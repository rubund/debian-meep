/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *val = NULL, *type = NULL, *tb = NULL;
      PyErr_Fetch(&val, &type, &tb);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(val, type, tb);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_FILE swig_types[0]
#define SWIGTYPE_p_GEOMETRIC_OBJECT swig_types[1]
#define SWIGTYPE_p_a_2__p_double swig_types[2]
#define SWIGTYPE_p_a_5__bool swig_types[3]
#define SWIGTYPE_p_a_5__meep__boundary_condition swig_types[4]
#define SWIGTYPE_p_a_5__p_double swig_types[5]
#define SWIGTYPE_p_a_meep__CONNECT_COPY_1__a_meep__Outgoing_1__p_p_double swig_types[6]
#define SWIGTYPE_p_a_meep__CONNECT_COPY_1__a_meep__Outgoing_1__size_t swig_types[7]
#define SWIGTYPE_p_a_meep__CONNECT_COPY_1__p_size_t swig_types[8]
#define SWIGTYPE_p_access_mode swig_types[9]
#define SWIGTYPE_p_allocator_type swig_types[10]
#define SWIGTYPE_p_bool swig_types[11]
#define SWIGTYPE_p_boundary_region_kind swig_types[12]
#define SWIGTYPE_p_char swig_types[13]
#define SWIGTYPE_p_difference_type swig_types[14]
#define SWIGTYPE_p_double swig_types[15]
#define SWIGTYPE_p_f_double_int_p_void__meep__vec swig_types[16]
#define SWIGTYPE_p_f_double_p_void__double swig_types[17]
#define SWIGTYPE_p_f_p_meep__fields_chunk_int_enum_meep__component_meep__ivec_meep__ivec_meep__vec_meep__vec_meep__vec_meep__vec_double_double_meep__ivec_std__complex__double___r_q_const__meep__symmetry_int_p_void__void swig_types[18]
#define SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double swig_types[19]
#define SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__std__complexT_double_t swig_types[20]
#define SWIGTYPE_p_f_std__complex__double____std__complexT_double_t swig_types[21]
#define SWIGTYPE_p_float swig_types[22]
#define SWIGTYPE_p_geom_box swig_types[23]
#define SWIGTYPE_p_geometric_object swig_types[24]
#define SWIGTYPE_p_geometric_object_list swig_types[25]
#define SWIGTYPE_p_int swig_types[26]
#define SWIGTYPE_p_long_double swig_types[27]
#define SWIGTYPE_p_material_data swig_types[28]
#define SWIGTYPE_p_material_type swig_types[29]
#define SWIGTYPE_p_medium_struct swig_types[30]
#define SWIGTYPE_p_meep__boundary_region swig_types[31]
#define SWIGTYPE_p_meep__component swig_types[32]
#define SWIGTYPE_p_meep__continuous_src_time swig_types[33]
#define SWIGTYPE_p_meep__custom_src_time swig_types[34]
#define SWIGTYPE_p_meep__dft_chunk swig_types[35]
#define SWIGTYPE_p_meep__dft_fields swig_types[36]
#define SWIGTYPE_p_meep__dft_flux swig_types[37]
#define SWIGTYPE_p_meep__dft_force swig_types[38]
#define SWIGTYPE_p_meep__dft_ldos swig_types[39]
#define SWIGTYPE_p_meep__dft_near2far swig_types[40]
#define SWIGTYPE_p_meep__direction swig_types[41]
#define SWIGTYPE_p_meep__fields swig_types[42]
#define SWIGTYPE_p_meep__fields_chunk swig_types[43]
#define SWIGTYPE_p_meep__flux_vol swig_types[44]
#define SWIGTYPE_p_meep__gaussian_src_time swig_types[45]
#define SWIGTYPE_p_meep__grid_volume swig_types[46]
#define SWIGTYPE_p_meep__h5file swig_types[47]
#define SWIGTYPE_p_meep__h5file__extending_s swig_types[48]
#define SWIGTYPE_p_meep__initialize swig_types[49]
#define SWIGTYPE_p_meep__ivec swig_types[50]
#define SWIGTYPE_p_meep__lorentzian_susceptibility swig_types[51]
#define SWIGTYPE_p_meep__material_function swig_types[52]
#define SWIGTYPE_p_meep__monitor_point swig_types[53]
#define SWIGTYPE_p_meep__multilevel_susceptibility swig_types[54]
#define SWIGTYPE_p_meep__noisy_lorentzian_susceptibility swig_types[55]
#define SWIGTYPE_p_meep__polarization_state_s swig_types[56]
#define SWIGTYPE_p_meep__signed_direction swig_types[57]
#define SWIGTYPE_p_meep__simple_material_function swig_types[58]
#define SWIGTYPE_p_meep__src_time swig_types[59]
#define SWIGTYPE_p_meep__structure swig_types[60]
#define SWIGTYPE_p_meep__structure_chunk swig_types[61]
#define SWIGTYPE_p_meep__susceptibility swig_types[62]
#define SWIGTYPE_p_meep__symmetry swig_types[63]
#define SWIGTYPE_p_meep__vec swig_types[64]
#define SWIGTYPE_p_meep__volume swig_types[65]
#define SWIGTYPE_p_meep__volume_list swig_types[66]
#define SWIGTYPE_p_meep_geom__absorber swig_types[67]
#define SWIGTYPE_p_meep_geom__dft_data swig_types[68]
#define SWIGTYPE_p_meep_geom__fragment_stats swig_types[69]
#define SWIGTYPE_p_p_PyObject swig_types[70]
#define SWIGTYPE_p_p_double swig_types[71]
#define SWIGTYPE_p_p_meep__continuous_src_time swig_types[72]
#define SWIGTYPE_p_p_meep__custom_src_time swig_types[73]
#define SWIGTYPE_p_p_meep__dft_chunk swig_types[74]
#define SWIGTYPE_p_p_meep__fields_chunk swig_types[75]
#define SWIGTYPE_p_p_meep__gaussian_src_time swig_types[76]
#define SWIGTYPE_p_p_meep__lorentzian_susceptibility swig_types[77]
#define SWIGTYPE_p_p_meep__multilevel_susceptibility swig_types[78]
#define SWIGTYPE_p_p_meep__noisy_lorentzian_susceptibility swig_types[79]
#define SWIGTYPE_p_p_meep__polarization_state_s swig_types[80]
#define SWIGTYPE_p_p_meep__src_time swig_types[81]
#define SWIGTYPE_p_p_meep__src_vol swig_types[82]
#define SWIGTYPE_p_p_meep__structure_chunk swig_types[83]
#define SWIGTYPE_p_p_meep__susceptibility swig_types[84]
#define SWIGTYPE_p_p_p_char swig_types[85]
#define SWIGTYPE_p_p_p_double swig_types[86]
#define SWIGTYPE_p_p_std__complexT_double_t swig_types[87]
#define SWIGTYPE_p_ptrdiff_t swig_types[88]
#define SWIGTYPE_p_size_t swig_types[89]
#define SWIGTYPE_p_size_type swig_types[90]
#define SWIGTYPE_p_std__allocatorT_double_t swig_types[91]
#define SWIGTYPE_p_std__allocatorT_int_t swig_types[92]
#define SWIGTYPE_p_std__allocatorT_meep__volume_t swig_types[93]
#define SWIGTYPE_p_std__allocatorT_meep_geom__dft_data_t swig_types[94]
#define SWIGTYPE_p_std__allocatorT_meep_geom__fragment_stats_t swig_types[95]
#define SWIGTYPE_p_std__complexT_double_t swig_types[96]
#define SWIGTYPE_p_std__complexT_float_t swig_types[97]
#define SWIGTYPE_p_std__complexT_long_double_t swig_types[98]
#define SWIGTYPE_p_std__invalid_argument swig_types[99]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[100]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[101]
#define SWIGTYPE_p_std__vectorT_meep__component_std__allocatorT_meep__component_t_t swig_types[102]
#define SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t swig_types[103]
#define SWIGTYPE_p_std__vectorT_meep_geom__absorber_std__allocatorT_meep_geom__absorber_t_t swig_types[104]
#define SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t swig_types[105]
#define SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t swig_types[106]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[107]
#define SWIGTYPE_p_user_material_func swig_types[108]
#define SWIGTYPE_p_value_type swig_types[109]
#define SWIGTYPE_p_vector3 swig_types[110]
#define SWIGTYPE_p_void swig_types[111]
static swig_type_info *swig_types[113];
static swig_module_info swig_module = {swig_types, 112, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _meep.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__meep

#else
#  define SWIG_init    init_meep

#endif
#define SWIG_name    "_meep"

#define SWIGVERSION 0x030012 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#define SWIG_FILE_WITH_INIT
#define SWIG_PYTHON_2_UNICODE

#include <complex>
#include <string>

#include "meep/vec.hpp"
#include "meep.hpp"
#include "meep/mympi.hpp"
#include "ctl-math.h"
#include "ctlgeom.h"
#include "meepgeom.hpp"

namespace meep {
    size_t dft_chunks_Ntotal(dft_chunk *dft_chunks, size_t *my_start);
}

using namespace meep;
using namespace meep_geom;

extern boolean point_in_objectp(vector3 p, GEOMETRIC_OBJECT o);
extern boolean point_in_periodic_objectp(vector3 p, GEOMETRIC_OBJECT o);
void display_geometric_object_info(int indentby, GEOMETRIC_OBJECT o);



#ifndef SWIG_FILE_WITH_INIT
#define NO_IMPORT_ARRAY
#endif
#include "stdio.h"
#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#include <numpy/arrayobject.h>


#include <complex> 


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <vector>


typedef struct {
    PyObject *func;
    int num_components;
} py_field_func_data;

#include "typemap_utils.cpp"

static int get_attr_int(PyObject *py_obj, int *result, const char *name) {
    PyObject *py_attr = PyObject_GetAttrString(py_obj, name);

    if (!py_attr) {
        PyErr_Format(PyExc_ValueError, "Class attribute '%s' is None\n", name);
        return 0;
    }

    *result = PyInteger_AsLong(py_attr);
    Py_XDECREF(py_attr);
    return 1;
}

static PyObject *py_source_time_object() {
    static PyObject *source_time_object = NULL;
    if (source_time_object == NULL) {
        PyObject *source_mod = PyImport_ImportModule("meep.source");
        source_time_object = PyObject_GetAttrString(source_mod, "SourceTime");
        Py_XDECREF(source_mod);
    }
    return source_time_object;
}

static PyObject *py_meep_src_time_object() {
    static PyObject *src_time = NULL;
    if (src_time == NULL) {
        PyObject *meep_mod = PyImport_ImportModule("meep");
        src_time = PyObject_GetAttrString(meep_mod, "src_time");
        Py_XDECREF(meep_mod);
    }
    return src_time;
}

static PyObject *py_vector3_object() {
    static PyObject *vector3_object = NULL;
    if (vector3_object == NULL) {
        PyObject *geom_mod = PyImport_ImportModule("meep.geom");
        vector3_object = PyObject_GetAttrString(geom_mod, "Vector3");
        Py_XDECREF(geom_mod);
    }
    return vector3_object;
}

static double py_callback_wrap(const meep::vec &v) {
    PyObject *pyv = vec2py(v);
    PyObject *pyret = PyObject_CallFunctionObjArgs(py_callback, pyv, NULL);
    double ret = PyFloat_AsDouble(pyret);
    Py_XDECREF(pyret);
    return ret;
}

static std::complex<double> py_amp_func_wrap(const meep::vec &v) {
    PyObject *pyv = vec2py(v);
    PyObject *pyret = PyObject_CallFunctionObjArgs(py_amp_func, pyv, NULL);
    double real = PyComplex_RealAsDouble(pyret);
    double imag = PyComplex_ImagAsDouble(pyret);
    std::complex<double> ret(real, imag);
    Py_DECREF(pyret);
    return ret;
}

static std::complex<double> py_field_func_wrap(const std::complex<double> *fields,
                                               const meep::vec &loc,
                                               void *data_) {
    PyObject *pyv = vec2py(loc);

    py_field_func_data *data = (py_field_func_data *)data_;
    int len = data->num_components;

    PyObject *py_args = PyTuple_New(len + 1);
    // Increment here because PyTuple_SetItem steals a reference
    Py_INCREF(pyv);
    PyTuple_SetItem(py_args, 0, pyv);

    for (Py_ssize_t i = 1; i < len + 1; i++) {
        PyObject *cmplx = PyComplex_FromDoubles(fields[i - 1].real(), fields[i - 1].imag());
        PyTuple_SetItem(py_args, i, cmplx);
    }

    PyObject *pyret = PyObject_CallObject(data->func, py_args);

    if (!pyret) {
        PyErr_PrintEx(0);
    }

    double real = PyComplex_RealAsDouble(pyret);
    double imag = PyComplex_ImagAsDouble(pyret);
    std::complex<double> ret(real, imag);
    Py_DECREF(pyret);
    Py_DECREF(py_args);
    return ret;
}

static std::complex<double> py_src_func_wrap(double t, void *f) {
    PyObject *py_t = PyFloat_FromDouble(t);
    PyObject *pyres = PyObject_CallFunctionObjArgs((PyObject *)f, py_t, NULL);
    double real = PyComplex_RealAsDouble(pyres);
    double imag = PyComplex_ImagAsDouble(pyres);
    std::complex<double> ret(real, imag);
    Py_DECREF(py_t);
    Py_DECREF(pyres);

    return ret;
}

static meep::vec py_kpoint_func_wrap(double freq, int mode, void *user_data) {
    PyObject *py_freq = PyFloat_FromDouble(freq);
    PyObject *py_mode = PyInteger_FromLong(mode);

    PyObject *py_result = PyObject_CallFunctionObjArgs((PyObject*)user_data, py_freq, py_mode, NULL);

    if (!py_result) {
        PyErr_PrintEx(0);
        Py_DECREF(py_freq);
        Py_DECREF(py_mode);
        return meep::vec(0, 0, 0);
    }

    vector3 v3;
    if (!pyv3_to_v3(py_result, &v3)) {
        PyErr_PrintEx(0);
        Py_DECREF(py_freq);
        Py_DECREF(py_mode);
        Py_XDECREF(py_result);
        return meep::vec(0, 0, 0);
    }

    meep::vec result(v3.x, v3.y, v3.z);

    Py_DECREF(py_freq);
    Py_DECREF(py_mode);
    Py_DECREF(py_result);

    return result;
}

static int pyabsorber_to_absorber(PyObject *py_absorber, meep_geom::absorber *a) {

    if (!get_attr_dbl(py_absorber, &a->thickness, "thickness") ||
        !get_attr_int(py_absorber, &a->direction, "direction") ||
        !get_attr_int(py_absorber, &a->side, "side") ||
        !get_attr_dbl(py_absorber, &a->R_asymptotic, "R_asymptotic") ||
        !get_attr_dbl(py_absorber, &a->mean_stretch, "mean_stretch")) {

        return 0;
    }

    PyObject *py_pml_profile_func = PyObject_GetAttrString(py_absorber, "pml_profile");

    if (!py_pml_profile_func) {
        PyErr_Format(PyExc_ValueError, "Class attribute 'pml_profile' is None\n");
        return 0;
    }

    a->pml_profile_data = py_pml_profile_func;

    return 1;
}

// Wrapper for Python PML profile function
double py_pml_profile(double u, void *f) {
    PyObject *func = (PyObject *)f;
    PyObject *d = PyFloat_FromDouble(u);

    if (!PyCallable_Check(func)) {
        PyErr_SetString(PyExc_TypeError, "py_pml_profile: Expected a callable");
        PyErr_Print();
    }

    PyObject *pyret = PyObject_CallFunctionObjArgs(func, d, NULL);

    double ret = PyFloat_AsDouble(pyret);
    Py_XDECREF(pyret);
    Py_XDECREF(d);
    return ret;
}

PyObject *py_do_harminv(PyObject *vals, double dt, double f_min, double f_max, int maxbands,
                     double spectral_density, double Q_thresh, double rel_err_thresh,
                     double err_thresh, double rel_amp_thresh, double amp_thresh) {

    std::complex<double> *amp = new std::complex<double>[maxbands];
    double *freq_re = new double[maxbands];
    double *freq_im = new double[maxbands];
    double *freq_err = new double[maxbands];

    Py_ssize_t n = PyList_Size(vals);
    std::complex<double> *items = new std::complex<double>[n];

    for(int i = 0; i < n; i++) {
        Py_complex py_c = PyComplex_AsCComplex(PyList_GetItem(vals, i));
        std::complex<double> c(py_c.real, py_c.imag);
        items[i] = c;
    }

    maxbands = do_harminv(items, n, dt, f_min, f_max, maxbands, amp,
                          freq_re, freq_im, freq_err, spectral_density, Q_thresh,
                          rel_err_thresh, err_thresh, rel_amp_thresh, amp_thresh);

    PyObject *res = PyList_New(maxbands);

    for(int i = 0; i < maxbands; i++) {
        Py_complex pyfreq = {freq_re[i], freq_im[i]};
        Py_complex pyamp = {amp[i].real(), amp[i].imag()};
        Py_complex pyfreq_err = {freq_err[i], 0};

        PyObject *pyobj = Py_BuildValue("(DDD)", &pyfreq, &pyamp, &pyfreq_err);
        PyList_SetItem(res, i, pyobj);
    }

    delete[] freq_err;
    delete[] freq_im;
    delete[] freq_re;
    delete[] amp;
    delete[] items;

    return res;
}

// Wrapper around meep::dft_near2far::farfield
PyObject *_get_farfield(meep::dft_near2far *f, const meep::vec & v) {
    Py_ssize_t len = f->Nfreq * 6;
    PyObject *res = PyList_New(len);

    std::complex<double> *ff_arr = f->farfield(v);

    for (Py_ssize_t i = 0; i < len; i++) {
        PyList_SetItem(res, i, PyComplex_FromDoubles(ff_arr[i].real(), ff_arr[i].imag()));
    }

    delete[] ff_arr;

    return res;
}

// Wrapper around meep::dft_ldos::ldos
PyObject *_dft_ldos_ldos(meep::dft_ldos *f) {
    Py_ssize_t len = f->Nomega;
    PyObject *res = PyList_New(len);

    double *tmp = f->ldos();

    for (Py_ssize_t i = 0; i < len; i++) {
        PyList_SetItem(res, i, PyFloat_FromDouble(tmp[i]));
    }

    delete[] tmp;

    return res;
}

// Wrapper around meep::dft_ldos_F
PyObject *_dft_ldos_F(meep::dft_ldos *f) {
    Py_ssize_t len = f->Nomega;
    PyObject *res = PyList_New(len);

    std::complex<double> *tmp = f->F();

    for (Py_ssize_t i = 0; i < len; i++) {
        PyList_SetItem(res, i, PyComplex_FromDoubles(tmp[i].real(), tmp[i].imag()));
    }

    delete[] tmp;

    return res;
}

// Wrapper arond meep::dft_ldos_J
PyObject *_dft_ldos_J(meep::dft_ldos *f) {
    Py_ssize_t len = f->Nomega;
    PyObject *res = PyList_New(len);

    std::complex<double> *tmp = f->J();

    for (Py_ssize_t i = 0; i < len; i++) {
        PyList_SetItem(res, i, PyComplex_FromDoubles(tmp[i].real(), tmp[i].imag()));
    }

    delete[] tmp;

    return res;
}

/* This is a wrapper function to fool SWIG...since our list constructor
   takes ownership of the next pointer, we have to make sure that SWIG
   does not garbage-collect volume_list objects.  We do
   this by wrapping a "helper" function around the constructor which
   does not have the %newobject SWIG attribute.   Note that we then
   need to deallocate the list explicitly in Python. */
meep::volume_list *make_volume_list(const meep::volume &v, int c,
                                    std::complex<double> weight,
                                    meep::volume_list *next) {

    return new meep::volume_list(v, c, weight, next);
}

template<typename dft_type>
PyObject *_get_dft_array(meep::fields *f, dft_type dft, meep::component c, int num_freq) {
    int rank;
    int dims[3];
    std::complex<double> *dft_arr = f->get_dft_array(dft, c, num_freq, &rank, dims);

    npy_intp *arr_dims = new npy_intp[rank];
    for (int i = 0; i < rank; ++i) {
        arr_dims[i] = dims[i];
    }

    PyObject *py_arr = PyArray_SimpleNewFromData(rank, arr_dims, NPY_CDOUBLE, dft_arr);
    delete[] arr_dims;

    return py_arr;
}

size_t _get_dft_data_size(meep::dft_chunk *dc) {
    size_t istart;
    return meep::dft_chunks_Ntotal(dc, &istart);
}

void _get_dft_data(meep::dft_chunk *dc, std::complex<meep::realnum> *cdata, int size) {
    size_t istart;
    size_t n = meep::dft_chunks_Ntotal(dc, &istart);
    if (n != size) {
        meep::abort("Total dft_chunks size does not agree with size allocated for output array.\n");
    }

    for (meep::dft_chunk *cur = dc; cur; cur = cur->next_in_dft) {
        size_t Nchunk = cur->N * cur->Nomega;
        for (size_t i = 0; i < Nchunk; ++i) {
            cdata[i + istart] = cur->dft[i];
        }
        istart += Nchunk;
    }
}

void _load_dft_data(meep::dft_chunk *dc, std::complex<meep::realnum> *cdata, int size) {
    size_t istart;
    size_t n = meep::dft_chunks_Ntotal(dc, &istart);
    if (n != size) {
        meep::abort("Total dft_chunks size does not agree with size allocated for output array.\n");
    }

    for (meep::dft_chunk *cur = dc; cur; cur = cur->next_in_dft) {
        size_t Nchunk = cur->N * cur->Nomega;
        for (size_t i = 0; i < Nchunk; ++i) {
            cur->dft[i] = cdata[i + istart];
        }
        istart += Nchunk;
    }
}



SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}


#if NPY_API_VERSION < 0x00000007
#define NPY_ARRAY_DEFAULT NPY_DEFAULT
#define NPY_ARRAY_FARRAY  NPY_FARRAY
#define NPY_FORTRANORDER  NPY_FORTRAN
#endif


/* Macros to extract array attributes.
 */
#if NPY_API_VERSION < 0x00000007
#define is_array(a)            ((a) && PyArray_Check((PyArrayObject*)a))
#define array_type(a)          (int)(PyArray_TYPE((PyArrayObject*)a))
#define array_numdims(a)       (((PyArrayObject*)a)->nd)
#define array_dimensions(a)    (((PyArrayObject*)a)->dimensions)
#define array_size(a,i)        (((PyArrayObject*)a)->dimensions[i])
#define array_strides(a)       (((PyArrayObject*)a)->strides)
#define array_stride(a,i)      (((PyArrayObject*)a)->strides[i])
#define array_data(a)          (((PyArrayObject*)a)->data)
#define array_descr(a)         (((PyArrayObject*)a)->descr)
#define array_flags(a)         (((PyArrayObject*)a)->flags)
#define array_enableflags(a,f) (((PyArrayObject*)a)->flags) = f
#define array_is_fortran(a)    (PyArray_ISFORTRAN((PyArrayObject*)a))
#else
#define is_array(a)            ((a) && PyArray_Check(a))
#define array_type(a)          PyArray_TYPE((PyArrayObject*)a)
#define array_numdims(a)       PyArray_NDIM((PyArrayObject*)a)
#define array_dimensions(a)    PyArray_DIMS((PyArrayObject*)a)
#define array_strides(a)       PyArray_STRIDES((PyArrayObject*)a)
#define array_stride(a,i)      PyArray_STRIDE((PyArrayObject*)a,i)
#define array_size(a,i)        PyArray_DIM((PyArrayObject*)a,i)
#define array_data(a)          PyArray_DATA((PyArrayObject*)a)
#define array_descr(a)         PyArray_DESCR((PyArrayObject*)a)
#define array_flags(a)         PyArray_FLAGS((PyArrayObject*)a)
#define array_enableflags(a,f) PyArray_ENABLEFLAGS((PyArrayObject*)a,f)
#define array_is_fortran(a)    (PyArray_IS_F_CONTIGUOUS((PyArrayObject*)a))
#endif
#define array_is_contiguous(a) (PyArray_ISCONTIGUOUS((PyArrayObject*)a))
#define array_is_native(a)     (PyArray_ISNOTSWAPPED((PyArrayObject*)a))


  /* Given a PyObject, return a string describing its type.
   */
  const char* pytype_string(PyObject* py_obj)
  {
    if (py_obj == NULL          ) return "C NULL value";
    if (py_obj == Py_None       ) return "Python None" ;
    if (PyCallable_Check(py_obj)) return "callable"    ;
    if (PyString_Check(  py_obj)) return "string"      ;
    if (PyInt_Check(     py_obj)) return "int"         ;
    if (PyFloat_Check(   py_obj)) return "float"       ;
    if (PyDict_Check(    py_obj)) return "dict"        ;
    if (PyList_Check(    py_obj)) return "list"        ;
    if (PyTuple_Check(   py_obj)) return "tuple"       ;
#if PY_MAJOR_VERSION < 3
    if (PyFile_Check(    py_obj)) return "file"        ;
    if (PyModule_Check(  py_obj)) return "module"      ;
    if (PyInstance_Check(py_obj)) return "instance"    ;
#endif

    return "unknown type";
  }

  /* Given a NumPy typecode, return a string describing the type.
   */
  const char* typecode_string(int typecode)
  {
    static const char* type_names[25] = {"bool",
                                         "byte",
                                         "unsigned byte",
                                         "short",
                                         "unsigned short",
                                         "int",
                                         "unsigned int",
                                         "long",
                                         "unsigned long",
                                         "long long",
                                         "unsigned long long",
                                         "float",
                                         "double",
                                         "long double",
                                         "complex float",
                                         "complex double",
                                         "complex long double",
                                         "object",
                                         "string",
                                         "unicode",
                                         "void",
                                         "ntypes",
                                         "notype",
                                         "char",
                                         "unknown"};
    return typecode < 24 ? type_names[typecode] : type_names[24];
  }

  /* Make sure input has correct numpy type.  This now just calls
     PyArray_EquivTypenums().
   */
  int type_match(int actual_type,
                 int desired_type)
  {
    return PyArray_EquivTypenums(actual_type, desired_type);
  }

#ifdef SWIGPY_USE_CAPSULE
  void free_cap(PyObject * cap)
  {
    void* array = (void*) PyCapsule_GetPointer(cap,SWIGPY_CAPSULE_NAME);
    if (array != NULL) free(array);
  }
#endif




  /* Given a PyObject pointer, cast it to a PyArrayObject pointer if
   * legal.  If not, set the python error string appropriately and
   * return NULL.
   */
  PyArrayObject* obj_to_array_no_conversion(PyObject* input,
                                            int        typecode)
  {
    PyArrayObject* ary = NULL;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input), typecode)))
    {
      ary = (PyArrayObject*) input;
    }
    else if is_array(input)
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = typecode_string(array_type(input));
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  Array of type '%s' given",
                   desired_type, actual_type);
      ary = NULL;
    }
    else
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = pytype_string(input);
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  A '%s' was given",
                   desired_type,
                   actual_type);
      ary = NULL;
    }
    return ary;
  }

  /* Convert the given PyObject to a NumPy array with the given
   * typecode.  On success, return a valid PyArrayObject* with the
   * correct type.  On failure, the python error string will be set and
   * the routine returns NULL.
   */
  PyArrayObject* obj_to_array_allow_conversion(PyObject* input,
                                               int       typecode,
                                               int*      is_new_object)
  {
    PyArrayObject* ary = NULL;
    PyObject*      py_obj;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input),typecode)))
    {
      ary = (PyArrayObject*) input;
      *is_new_object = 0;
    }
    else
    {
      py_obj = PyArray_FROMANY(input, typecode, 0, 0, NPY_ARRAY_DEFAULT);
      /* If NULL, PyArray_FromObject will have set python error value.*/
      ary = (PyArrayObject*) py_obj;
      *is_new_object = 1;
    }
    return ary;
  }

  /* Given a PyArrayObject, check to see if it is contiguous.  If so,
   * return the input pointer and flag it as not a new object.  If it is
   * not contiguous, create a new PyArrayObject using the original data,
   * flag it as a new object and return the pointer.
   */
  PyArrayObject* make_contiguous(PyArrayObject* ary,
                                 int*           is_new_object,
                                 int            min_dims,
                                 int            max_dims)
  {
    PyArrayObject* result;
    if (array_is_contiguous(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      result = (PyArrayObject*) PyArray_ContiguousFromObject((PyObject*)ary,
                                                              array_type(ary),
                                                              min_dims,
                                                              max_dims);
      *is_new_object = 1;
    }
    return result;
  }

  /* Given a PyArrayObject, check to see if it is Fortran-contiguous.
   * If so, return the input pointer, but do not flag it as not a new
   * object.  If it is not Fortran-contiguous, create a new
   * PyArrayObject using the original data, flag it as a new object
   * and return the pointer.
   */
  PyArrayObject* make_fortran(PyArrayObject* ary,
                              int*           is_new_object)
  {
    PyArrayObject* result;
    if (array_is_fortran(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      Py_INCREF(array_descr(ary));
      result = (PyArrayObject*) PyArray_FromArray(ary,
                                                  array_descr(ary),
#if NPY_API_VERSION < 0x00000007
                                                  NPY_FORTRANORDER);
#else
                                                  NPY_ARRAY_F_CONTIGUOUS);
#endif
      *is_new_object = 1;
    }
    return result;
  }

  /* Convert a given PyObject to a contiguous PyArrayObject of the
   * specified type.  If the input object is not a contiguous
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_contiguous_allow_conversion(PyObject* input,
                                                          int       typecode,
                                                          int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_contiguous(ary1, &is_new2, 0, 0);
      if ( is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }

  /* Convert a given PyObject to a Fortran-ordered PyArrayObject of the
   * specified type.  If the input object is not a Fortran-ordered
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_fortran_allow_conversion(PyObject* input,
                                                       int       typecode,
                                                       int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_fortran(ary1, &is_new2);
      if (is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }


  /* Test whether a python object is contiguous.  If array is
   * contiguous, return 1.  Otherwise, set the python error string and
   * return 0.
   */
  int require_contiguous(PyArrayObject* ary)
  {
    int contiguous = 1;
    if (!array_is_contiguous(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must be contiguous.  A non-contiguous array was given");
      contiguous = 0;
    }
    return contiguous;
  }

  /* Test whether a python object is (C_ or F_) contiguous.  If array is
   * contiguous, return 1.  Otherwise, set the python error string and
   * return 0.
   */
  int require_c_or_f_contiguous(PyArrayObject* ary)
  {
    int contiguous = 1;
    if (!(array_is_contiguous(ary) || array_is_fortran(ary)))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must be contiguous (C_ or F_).  A non-contiguous array was given");
      contiguous = 0;
    }
    return contiguous;
  }

  /* Require that a numpy array is not byte-swapped.  If the array is
   * not byte-swapped, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_native(PyArrayObject* ary)
  {
    int native = 1;
    if (!array_is_native(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must have native byteorder.  "
                      "A byte-swapped array was given");
      native = 0;
    }
    return native;
  }

  /* Require the given PyArrayObject to have a specified number of
   * dimensions.  If the array has the specified number of dimensions,
   * return 1.  Otherwise, set the python error string and return 0.
   */
  int require_dimensions(PyArrayObject* ary,
                         int            exact_dimensions)
  {
    int success = 1;
    if (array_numdims(ary) != exact_dimensions)
    {
      PyErr_Format(PyExc_TypeError,
                   "Array must have %d dimensions.  Given array has %d dimensions",
                   exact_dimensions,
                   array_numdims(ary));
      success = 0;
    }
    return success;
  }

  /* Require the given PyArrayObject to have one of a list of specified
   * number of dimensions.  If the array has one of the specified number
   * of dimensions, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_dimensions_n(PyArrayObject* ary,
                           int*           exact_dimensions,
                           int            n)
  {
    int success = 0;
    int i;
    char dims_str[255] = "";
    char s[255];
    for (i = 0; i < n && !success; i++)
    {
      if (array_numdims(ary) == exact_dimensions[i])
      {
        success = 1;
      }
    }
    if (!success)
    {
      for (i = 0; i < n-1; i++)
      {
        sprintf(s, "%d, ", exact_dimensions[i]);
        strcat(dims_str,s);
      }
      sprintf(s, " or %d", exact_dimensions[n-1]);
      strcat(dims_str,s);
      PyErr_Format(PyExc_TypeError,
                   "Array must have %s dimensions.  Given array has %d dimensions",
                   dims_str,
                   array_numdims(ary));
    }
    return success;
  }

  /* Require the given PyArrayObject to have a specified shape.  If the
   * array has the specified shape, return 1.  Otherwise, set the python
   * error string and return 0.
   */
  int require_size(PyArrayObject* ary,
                   npy_intp*      size,
                   int            n)
  {
    int i;
    int success = 1;
    int len;
    char desired_dims[255] = "[";
    char s[255];
    char actual_dims[255] = "[";
    for(i=0; i < n;i++)
    {
      if (size[i] != -1 &&  size[i] != array_size(ary,i))
      {
        success = 0;
      }
    }
    if (!success)
    {
      for (i = 0; i < n; i++)
      {
        if (size[i] == -1)
        {
          sprintf(s, "*,");
        }
        else
        {
          sprintf(s, "%ld,", (long int)size[i]);
        }
        strcat(desired_dims,s);
      }
      len = strlen(desired_dims);
      desired_dims[len-1] = ']';
      for (i = 0; i < n; i++)
      {
        sprintf(s, "%ld,", (long int)array_size(ary,i));
        strcat(actual_dims,s);
      }
      len = strlen(actual_dims);
      actual_dims[len-1] = ']';
      PyErr_Format(PyExc_TypeError,
                   "Array must have shape of %s.  Given array has shape of %s",
                   desired_dims,
                   actual_dims);
    }
    return success;
  }

  /* Require the given PyArrayObject to to be Fortran ordered.  If the
   * the PyArrayObject is already Fortran ordered, do nothing.  Else,
   * set the Fortran ordering flag and recompute the strides.
   */
  int require_fortran(PyArrayObject* ary)
  {
    int success = 1;
    int nd = array_numdims(ary);
    int i;
    npy_intp * strides = array_strides(ary);
    if (array_is_fortran(ary)) return success;
    /* Set the Fortran ordered flag */
    array_enableflags(ary,NPY_ARRAY_FARRAY);
    /* Recompute the strides */
    strides[0] = strides[nd-1];
    for (i=1; i < nd; ++i)
      strides[i] = strides[i-1] * array_size(ary,i-1);
    return success;
  }




SWIGINTERN int
SWIG_AsVal_std_complex_Sl_double_Sg_  (PyObject *o, std::complex<double>* val)
{
  if (PyComplex_Check(o)) {
    if (val) *val = std::complex<double>(PyComplex_RealAsDouble(o), PyComplex_ImagAsDouble(o));
    return SWIG_OK;
  } else {
    double d;    
    int res = SWIG_AddCast(SWIG_AsVal_double (o, &d));
    if (SWIG_IsOK(res)) {
      if (val) *val = std::complex<double>(d, 0.0);
      return res;
    }
  }
  return SWIG_TypeError;
}


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      swig_type_info *descriptor = type_info<Type>();
      int res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size, i <= j
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if (j < 0) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
      if (jj < ii)
        jj = ii;
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
      if (ii < jj)
        ii = jj;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence>
  struct traits_reserve {
    static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
      // This should be specialized for types that support reserve
    }
  };

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
      typename Sequence::const_reverse_iterator sb = self->rbegin();
      typename Sequence::const_reverse_iterator se = self->rbegin();
      std::advance(sb,size-ii-1);
      std::advance(se,size-jj-1);
      typename Sequence::const_reverse_iterator it = sb;
      while (it!=se) {
        sequence->push_back(*it);
        for (Py_ssize_t c=0; c<-step && it!=se; ++c)
          it++;
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount; ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount; ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      typename Sequence::iterator sb = self->begin();
      std::advance(sb,ii);
      if (step == 1) {
        typename Sequence::iterator se = self->begin();
        std::advance(se,jj);
        self->erase(sb,se);
      } else {
        typename Sequence::iterator it = sb;
        size_t delcount = (jj - ii + step - 1) / step;
        while (delcount) {
          it = self->erase(it);
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
          delcount--;
        }
      }
    } else {
      typename Sequence::reverse_iterator sb = self->rbegin();
      std::advance(sb,size-ii-1);
      typename Sequence::reverse_iterator it = sb;
      size_t delcount = (ii - jj - step - 1) / -step;
      while (delcount) {
        it = typename Sequence::reverse_iterator(self->erase((++it).base()));
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
        delcount--;
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", (int)_index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    Py_ssize_t _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  // STL container wrapper around a Python sequence
  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;
    typedef size_t size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      Py_ssize_t s = size();
      for (Py_ssize_t i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", (int)i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


  namespace swig {
    template <>  struct traits< meep_geom::fragment_stats > {
      typedef pointer_category category;
      static const char* type_name() { return"meep_geom::fragment_stats"; }
    };
  }


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	swig_type_info *descriptor = swig::type_info<sequence>();
	if (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_InternalNewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_reserve<std::vector<T> > {
      static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {
        seq.reserve(n);
      }
    };

    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< meep_geom::fragment_stats, std::allocator< meep_geom::fragment_stats > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "meep_geom::fragment_stats" "," "std::allocator< meep_geom::fragment_stats >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_meep_geom_fragment_stats_Sg__iterator(std::vector< meep_geom::fragment_stats > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_meep_geom_fragment_stats_Sg____nonzero__(std::vector< meep_geom::fragment_stats > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_meep_geom_fragment_stats_Sg____bool__(std::vector< meep_geom::fragment_stats > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< meep_geom::fragment_stats >::size_type std_vector_Sl_meep_geom_fragment_stats_Sg____len__(std::vector< meep_geom::fragment_stats > const *self){
      return self->size();
    }
SWIGINTERN std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > *std_vector_Sl_meep_geom_fragment_stats_Sg____getslice__(std::vector< meep_geom::fragment_stats > *self,std::vector< meep_geom::fragment_stats >::difference_type i,std::vector< meep_geom::fragment_stats >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_meep_geom_fragment_stats_Sg____setslice____SWIG_0(std::vector< meep_geom::fragment_stats > *self,std::vector< meep_geom::fragment_stats >::difference_type i,std::vector< meep_geom::fragment_stats >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >());
    }
SWIGINTERN void std_vector_Sl_meep_geom_fragment_stats_Sg____setslice____SWIG_1(std::vector< meep_geom::fragment_stats > *self,std::vector< meep_geom::fragment_stats >::difference_type i,std::vector< meep_geom::fragment_stats >::difference_type j,std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_meep_geom_fragment_stats_Sg____delslice__(std::vector< meep_geom::fragment_stats > *self,std::vector< meep_geom::fragment_stats >::difference_type i,std::vector< meep_geom::fragment_stats >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_meep_geom_fragment_stats_Sg____delitem____SWIG_0(std::vector< meep_geom::fragment_stats > *self,std::vector< meep_geom::fragment_stats >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > *std_vector_Sl_meep_geom_fragment_stats_Sg____getitem____SWIG_0(std::vector< meep_geom::fragment_stats > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >::difference_type id = i;
      std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_meep_geom_fragment_stats_Sg____setitem____SWIG_0(std::vector< meep_geom::fragment_stats > *self,PySliceObject *slice,std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >::difference_type id = i;
      std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_meep_geom_fragment_stats_Sg____setitem____SWIG_1(std::vector< meep_geom::fragment_stats > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >::difference_type id = i;
      std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_meep_geom_fragment_stats_Sg____delitem____SWIG_1(std::vector< meep_geom::fragment_stats > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >::difference_type id = i;
      std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< meep_geom::fragment_stats >::value_type const &std_vector_Sl_meep_geom_fragment_stats_Sg____getitem____SWIG_1(std::vector< meep_geom::fragment_stats > const *self,std::vector< meep_geom::fragment_stats >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_meep_geom_fragment_stats_Sg____setitem____SWIG_2(std::vector< meep_geom::fragment_stats > *self,std::vector< meep_geom::fragment_stats >::difference_type i,std::vector< meep_geom::fragment_stats >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< meep_geom::fragment_stats >::value_type std_vector_Sl_meep_geom_fragment_stats_Sg__pop(std::vector< meep_geom::fragment_stats > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_meep_geom_fragment_stats_Sg__append(std::vector< meep_geom::fragment_stats > *self,std::vector< meep_geom::fragment_stats >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< meep_geom::fragment_stats >::iterator std_vector_Sl_meep_geom_fragment_stats_Sg__erase__SWIG_0(std::vector< meep_geom::fragment_stats > *self,std::vector< meep_geom::fragment_stats >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< meep_geom::fragment_stats >::iterator std_vector_Sl_meep_geom_fragment_stats_Sg__erase__SWIG_1(std::vector< meep_geom::fragment_stats > *self,std::vector< meep_geom::fragment_stats >::iterator first,std::vector< meep_geom::fragment_stats >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< meep_geom::fragment_stats >::iterator std_vector_Sl_meep_geom_fragment_stats_Sg__insert__SWIG_0(std::vector< meep_geom::fragment_stats > *self,std::vector< meep_geom::fragment_stats >::iterator pos,std::vector< meep_geom::fragment_stats >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_meep_geom_fragment_stats_Sg__insert__SWIG_1(std::vector< meep_geom::fragment_stats > *self,std::vector< meep_geom::fragment_stats >::iterator pos,std::vector< meep_geom::fragment_stats >::size_type n,std::vector< meep_geom::fragment_stats >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< meep_geom::dft_data > {
      typedef pointer_category category;
      static const char* type_name() { return"meep_geom::dft_data"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< meep_geom::dft_data, std::allocator< meep_geom::dft_data > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "meep_geom::dft_data" "," "std::allocator< meep_geom::dft_data >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_meep_geom_dft_data_Sg__iterator(std::vector< meep_geom::dft_data > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_meep_geom_dft_data_Sg____nonzero__(std::vector< meep_geom::dft_data > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_meep_geom_dft_data_Sg____bool__(std::vector< meep_geom::dft_data > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< meep_geom::dft_data >::size_type std_vector_Sl_meep_geom_dft_data_Sg____len__(std::vector< meep_geom::dft_data > const *self){
      return self->size();
    }
SWIGINTERN std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > *std_vector_Sl_meep_geom_dft_data_Sg____getslice__(std::vector< meep_geom::dft_data > *self,std::vector< meep_geom::dft_data >::difference_type i,std::vector< meep_geom::dft_data >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_meep_geom_dft_data_Sg____setslice____SWIG_0(std::vector< meep_geom::dft_data > *self,std::vector< meep_geom::dft_data >::difference_type i,std::vector< meep_geom::dft_data >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >());
    }
SWIGINTERN void std_vector_Sl_meep_geom_dft_data_Sg____setslice____SWIG_1(std::vector< meep_geom::dft_data > *self,std::vector< meep_geom::dft_data >::difference_type i,std::vector< meep_geom::dft_data >::difference_type j,std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_meep_geom_dft_data_Sg____delslice__(std::vector< meep_geom::dft_data > *self,std::vector< meep_geom::dft_data >::difference_type i,std::vector< meep_geom::dft_data >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_meep_geom_dft_data_Sg____delitem____SWIG_0(std::vector< meep_geom::dft_data > *self,std::vector< meep_geom::dft_data >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > *std_vector_Sl_meep_geom_dft_data_Sg____getitem____SWIG_0(std::vector< meep_geom::dft_data > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >::difference_type id = i;
      std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_meep_geom_dft_data_Sg____setitem____SWIG_0(std::vector< meep_geom::dft_data > *self,PySliceObject *slice,std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >::difference_type id = i;
      std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_meep_geom_dft_data_Sg____setitem____SWIG_1(std::vector< meep_geom::dft_data > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >::difference_type id = i;
      std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_meep_geom_dft_data_Sg____delitem____SWIG_1(std::vector< meep_geom::dft_data > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >::difference_type id = i;
      std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< meep_geom::dft_data >::value_type const &std_vector_Sl_meep_geom_dft_data_Sg____getitem____SWIG_1(std::vector< meep_geom::dft_data > const *self,std::vector< meep_geom::dft_data >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_meep_geom_dft_data_Sg____setitem____SWIG_2(std::vector< meep_geom::dft_data > *self,std::vector< meep_geom::dft_data >::difference_type i,std::vector< meep_geom::dft_data >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< meep_geom::dft_data >::value_type std_vector_Sl_meep_geom_dft_data_Sg__pop(std::vector< meep_geom::dft_data > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_meep_geom_dft_data_Sg__append(std::vector< meep_geom::dft_data > *self,std::vector< meep_geom::dft_data >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< meep_geom::dft_data >::iterator std_vector_Sl_meep_geom_dft_data_Sg__erase__SWIG_0(std::vector< meep_geom::dft_data > *self,std::vector< meep_geom::dft_data >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< meep_geom::dft_data >::iterator std_vector_Sl_meep_geom_dft_data_Sg__erase__SWIG_1(std::vector< meep_geom::dft_data > *self,std::vector< meep_geom::dft_data >::iterator first,std::vector< meep_geom::dft_data >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< meep_geom::dft_data >::iterator std_vector_Sl_meep_geom_dft_data_Sg__insert__SWIG_0(std::vector< meep_geom::dft_data > *self,std::vector< meep_geom::dft_data >::iterator pos,std::vector< meep_geom::dft_data >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_meep_geom_dft_data_Sg__insert__SWIG_1(std::vector< meep_geom::dft_data > *self,std::vector< meep_geom::dft_data >::iterator pos,std::vector< meep_geom::dft_data >::size_type n,std::vector< meep_geom::dft_data >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< meep::volume > {
      typedef pointer_category category;
      static const char* type_name() { return"meep::volume"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< meep::volume, std::allocator< meep::volume > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "meep::volume" "," "std::allocator< meep::volume >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_meep_volume_Sg__iterator(std::vector< meep::volume > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_meep_volume_Sg____nonzero__(std::vector< meep::volume > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_meep_volume_Sg____bool__(std::vector< meep::volume > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< meep::volume >::size_type std_vector_Sl_meep_volume_Sg____len__(std::vector< meep::volume > const *self){
      return self->size();
    }
SWIGINTERN std::vector< meep::volume,std::allocator< meep::volume > > *std_vector_Sl_meep_volume_Sg____getslice__(std::vector< meep::volume > *self,std::vector< meep::volume >::difference_type i,std::vector< meep::volume >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_meep_volume_Sg____setslice____SWIG_0(std::vector< meep::volume > *self,std::vector< meep::volume >::difference_type i,std::vector< meep::volume >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< meep::volume,std::allocator< meep::volume > >());
    }
SWIGINTERN void std_vector_Sl_meep_volume_Sg____setslice____SWIG_1(std::vector< meep::volume > *self,std::vector< meep::volume >::difference_type i,std::vector< meep::volume >::difference_type j,std::vector< meep::volume,std::allocator< meep::volume > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_meep_volume_Sg____delslice__(std::vector< meep::volume > *self,std::vector< meep::volume >::difference_type i,std::vector< meep::volume >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_meep_volume_Sg____delitem____SWIG_0(std::vector< meep::volume > *self,std::vector< meep::volume >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< meep::volume,std::allocator< meep::volume > > *std_vector_Sl_meep_volume_Sg____getitem____SWIG_0(std::vector< meep::volume > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< meep::volume,std::allocator< meep::volume > >::difference_type id = i;
      std::vector< meep::volume,std::allocator< meep::volume > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_meep_volume_Sg____setitem____SWIG_0(std::vector< meep::volume > *self,PySliceObject *slice,std::vector< meep::volume,std::allocator< meep::volume > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< meep::volume,std::allocator< meep::volume > >::difference_type id = i;
      std::vector< meep::volume,std::allocator< meep::volume > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_meep_volume_Sg____setitem____SWIG_1(std::vector< meep::volume > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< meep::volume,std::allocator< meep::volume > >::difference_type id = i;
      std::vector< meep::volume,std::allocator< meep::volume > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_meep_volume_Sg____delitem____SWIG_1(std::vector< meep::volume > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< meep::volume,std::allocator< meep::volume > >::difference_type id = i;
      std::vector< meep::volume,std::allocator< meep::volume > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< meep::volume >::value_type const &std_vector_Sl_meep_volume_Sg____getitem____SWIG_1(std::vector< meep::volume > const *self,std::vector< meep::volume >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_meep_volume_Sg____setitem____SWIG_2(std::vector< meep::volume > *self,std::vector< meep::volume >::difference_type i,std::vector< meep::volume >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< meep::volume >::value_type std_vector_Sl_meep_volume_Sg__pop(std::vector< meep::volume > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< meep::volume,std::allocator< meep::volume > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_meep_volume_Sg__append(std::vector< meep::volume > *self,std::vector< meep::volume >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< meep::volume >::iterator std_vector_Sl_meep_volume_Sg__erase__SWIG_0(std::vector< meep::volume > *self,std::vector< meep::volume >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< meep::volume >::iterator std_vector_Sl_meep_volume_Sg__erase__SWIG_1(std::vector< meep::volume > *self,std::vector< meep::volume >::iterator first,std::vector< meep::volume >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< meep::volume >::iterator std_vector_Sl_meep_volume_Sg__insert__SWIG_0(std::vector< meep::volume > *self,std::vector< meep::volume >::iterator pos,std::vector< meep::volume >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_meep_volume_Sg__insert__SWIG_1(std::vector< meep::volume > *self,std::vector< meep::volume >::iterator pos,std::vector< meep::volume >::size_type n,std::vector< meep::volume >::value_type const &x){ self->insert(pos, n, x); }

SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


namespace swig {
  template <> struct traits< int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };
  template <>  struct traits_asval< int > {
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from< int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< int, std::allocator< int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "int" "," "std::allocator< int >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_int_Sg__iterator(std::vector< int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_int_Sg____nonzero__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_int_Sg____bool__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< int >::size_type std_vector_Sl_int_Sg____len__(std::vector< int > const *self){
      return self->size();
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setslice____SWIG_0(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< int,std::allocator< int > >());
    }
SWIGINTERN void std_vector_Sl_int_Sg____setslice____SWIG_1(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j,std::vector< int,std::allocator< int > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_0(std::vector< int > *self,std::vector< int >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getitem____SWIG_0(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< int,std::allocator< int > >::difference_type id = i;
      std::vector< int,std::allocator< int > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_0(std::vector< int > *self,PySliceObject *slice,std::vector< int,std::allocator< int > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< int,std::allocator< int > >::difference_type id = i;
      std::vector< int,std::allocator< int > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_1(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< int,std::allocator< int > >::difference_type id = i;
      std::vector< int,std::allocator< int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_1(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< int,std::allocator< int > >::difference_type id = i;
      std::vector< int,std::allocator< int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg____getitem____SWIG_1(std::vector< int > const *self,std::vector< int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_2(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__pop(std::vector< int > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< int,std::allocator< int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_int_Sg__append(std::vector< int > *self,std::vector< int >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__erase__SWIG_0(std::vector< int > *self,std::vector< int >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__erase__SWIG_1(std::vector< int > *self,std::vector< int >::iterator first,std::vector< int >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__insert__SWIG_0(std::vector< int > *self,std::vector< int >::iterator pos,std::vector< int >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_int_Sg__insert__SWIG_1(std::vector< int > *self,std::vector< int >::iterator pos,std::vector< int >::size_type n,std::vector< int >::value_type const &x){ self->insert(pos, n, x); }

  #define SWIG_From_double   PyFloat_FromDouble 


namespace swig {
  template <> struct traits< double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };
  template <>  struct traits_asval< double > {
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from< double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_double_Sg__iterator(std::vector< double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_double_Sg____nonzero__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_double_Sg____bool__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< double >::size_type std_vector_Sl_double_Sg____len__(std::vector< double > const *self){
      return self->size();
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< double,std::allocator< double > >());
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice____SWIG_1(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j,std::vector< double,std::allocator< double > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getitem____SWIG_0(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_0(std::vector< double > *self,PySliceObject *slice,std::vector< double,std::allocator< double > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg____getitem____SWIG_1(std::vector< double > const *self,std::vector< double >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_2(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__pop(std::vector< double > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< double,std::allocator< double > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_double_Sg__append(std::vector< double > *self,std::vector< double >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_1(std::vector< double > *self,std::vector< double >::iterator first,std::vector< double >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__insert__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_double_Sg__insert__SWIG_1(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::size_type n,std::vector< double >::value_type const &x){ self->insert(pos, n, x); }

SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERNINLINE PyObject*
SWIG_From_std_complex_Sl_double_Sg_  (/*@SWIG:/usr/local/Cellar/swig/3.0.12/share/swig/3.0.12/typemaps/swigmacros.swg,104,%ifcplusplus@*/

const std::complex<double>&



/*@SWIG@*/ c)
{
  return PyComplex_FromDoubles(std::real(c), std::imag(c));
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if(alloc) *alloc = SWIG_NEWOBJ;
#endif
    PyBytes_AsStringAndSize(obj, &cstr, &len);
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	{
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
#if PY_VERSION_HEX >= 0x03010000
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#else
      return PyUnicode_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined __cplusplus && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_py_do_harminv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:py_do_harminv",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  arg1 = obj0;
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "py_do_harminv" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "py_do_harminv" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "py_do_harminv" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "py_do_harminv" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "py_do_harminv" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "py_do_harminv" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "py_do_harminv" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "py_do_harminv" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "py_do_harminv" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "py_do_harminv" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  result = (PyObject *)py_do_harminv(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__get_farfield(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_get_farfield",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_get_farfield" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_get_farfield" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_get_farfield" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = (PyObject *)_get_farfield(arg1,(meep::vec const &)*arg2);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__dft_ldos_ldos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_ldos *arg1 = (meep::dft_ldos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_dft_ldos_ldos",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_ldos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_dft_ldos_ldos" "', argument " "1"" of type '" "meep::dft_ldos *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_ldos * >(argp1);
  result = (PyObject *)_dft_ldos_ldos(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__dft_ldos_F(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_ldos *arg1 = (meep::dft_ldos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_dft_ldos_F",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_ldos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_dft_ldos_F" "', argument " "1"" of type '" "meep::dft_ldos *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_ldos * >(argp1);
  result = (PyObject *)_dft_ldos_F(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__dft_ldos_J(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_ldos *arg1 = (meep::dft_ldos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_dft_ldos_J",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_ldos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_dft_ldos_J" "', argument " "1"" of type '" "meep::dft_ldos *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_ldos * >(argp1);
  result = (PyObject *)_dft_ldos_J(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__get_dft_data_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_get_dft_data_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_get_dft_data_size" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result = _get_dft_data_size(arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__get_dft_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  std::complex< meep::realnum > *arg2 = (std::complex< meep::realnum > *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int i2 = 1 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_get_dft_data",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_get_dft_data" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  {
    array2 = obj_to_array_no_conversion(obj1, NPY_CDOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_contiguous(array2)
      || !require_native(array2)) SWIG_fail;
    arg2 = (std::complex<meep::realnum>*) array_data(array2);
    arg3 = 1;
    for (i2=0; i2 < array_numdims(array2); ++i2) arg3 *= array_size(array2,i2);
  }
  _get_dft_data(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__load_dft_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  std::complex< meep::realnum > *arg2 = (std::complex< meep::realnum > *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int i2 = 1 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_load_dft_data",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_load_dft_data" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  {
    array2 = obj_to_array_no_conversion(obj1, NPY_CDOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_contiguous(array2)
      || !require_native(array2)) SWIG_fail;
    arg2 = (std::complex<meep::realnum>*) array_data(array2);
    arg3 = 1;
    for (i2=0; i2 < array_numdims(array2); ++i2) arg3 *= array_size(array2,i2);
  }
  _load_dft_data(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_make_volume_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = 0 ;
  int arg2 ;
  std::complex< double > arg3 ;
  meep::volume_list *arg4 = (meep::volume_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::complex< double > val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  meep::volume_list *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:make_volume_list",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "make_volume_list" "', argument " "1"" of type '" "meep::volume const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "make_volume_list" "', argument " "1"" of type '" "meep::volume const &""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "make_volume_list" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "make_volume_list" "', argument " "3"" of type '" "std::complex< double >""'");
  } 
  arg3 = static_cast< std::complex< double > >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_meep__volume_list, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "make_volume_list" "', argument " "4"" of type '" "meep::volume_list *""'"); 
  }
  arg4 = reinterpret_cast< meep::volume_list * >(argp4);
  result = (meep::volume_list *)make_volume_list((meep::volume const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__volume_list, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_dft_flux_array(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  SwigValueWrapper< meep::dft_flux > arg2 ;
  meep::component arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:get_dft_flux_array",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_dft_flux_array" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__dft_flux,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_dft_flux_array" "', argument " "2"" of type '" "meep::dft_flux""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_dft_flux_array" "', argument " "2"" of type '" "meep::dft_flux""'");
    } else {
      meep::dft_flux * temp = reinterpret_cast< meep::dft_flux * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    arg3 = static_cast<meep::component>(PyInteger_AsLong(obj2));
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "get_dft_flux_array" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (PyObject *)_get_dft_array< meep::dft_flux >(arg1,arg2,arg3,arg4);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_dft_fields_array(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  SwigValueWrapper< meep::dft_fields > arg2 ;
  meep::component arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:get_dft_fields_array",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_dft_fields_array" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__dft_fields,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_dft_fields_array" "', argument " "2"" of type '" "meep::dft_fields""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_dft_fields_array" "', argument " "2"" of type '" "meep::dft_fields""'");
    } else {
      meep::dft_fields * temp = reinterpret_cast< meep::dft_fields * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    arg3 = static_cast<meep::component>(PyInteger_AsLong(obj2));
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "get_dft_fields_array" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (PyObject *)_get_dft_array< meep::dft_fields >(arg1,arg2,arg3,arg4);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_dft_force_array(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  SwigValueWrapper< meep::dft_force > arg2 ;
  meep::component arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:get_dft_force_array",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_dft_force_array" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__dft_force,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_dft_force_array" "', argument " "2"" of type '" "meep::dft_force""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_dft_force_array" "', argument " "2"" of type '" "meep::dft_force""'");
    } else {
      meep::dft_force * temp = reinterpret_cast< meep::dft_force * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    arg3 = static_cast<meep::component>(PyInteger_AsLong(obj2));
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "get_dft_force_array" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (PyObject *)_get_dft_array< meep::dft_force >(arg1,arg2,arg3,arg4);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_dft_near2far_array(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  SwigValueWrapper< meep::dft_near2far > arg2 ;
  meep::component arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:get_dft_near2far_array",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_dft_near2far_array" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__dft_near2far,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_dft_near2far_array" "', argument " "2"" of type '" "meep::dft_near2far""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_dft_near2far_array" "', argument " "2"" of type '" "meep::dft_near2far""'");
    } else {
      meep::dft_near2far * temp = reinterpret_cast< meep::dft_near2far * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    arg3 = static_cast<meep::component>(PyInteger_AsLong(obj2));
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "get_dft_near2far_array" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (PyObject *)_get_dft_array< meep::dft_near2far >(arg1,arg2,arg3,arg4);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:FragmentStatsVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector_iterator" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_meep_geom_fragment_stats_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FragmentStatsVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector___nonzero__" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  result = (bool)std_vector_Sl_meep_geom_fragment_stats_Sg____nonzero__((std::vector< meep_geom::fragment_stats > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FragmentStatsVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector___bool__" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  result = (bool)std_vector_Sl_meep_geom_fragment_stats_Sg____bool__((std::vector< meep_geom::fragment_stats > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep_geom::fragment_stats >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FragmentStatsVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector___len__" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  result = std_vector_Sl_meep_geom_fragment_stats_Sg____len__((std::vector< meep_geom::fragment_stats > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  std::vector< meep_geom::fragment_stats >::difference_type arg2 ;
  std::vector< meep_geom::fragment_stats >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FragmentStatsVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector___getslice__" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FragmentStatsVector___getslice__" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< meep_geom::fragment_stats >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FragmentStatsVector___getslice__" "', argument " "3"" of type '" "std::vector< meep_geom::fragment_stats >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< meep_geom::fragment_stats >::difference_type >(val3);
  try {
    result = (std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > *)std_vector_Sl_meep_geom_fragment_stats_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  std::vector< meep_geom::fragment_stats >::difference_type arg2 ;
  std::vector< meep_geom::fragment_stats >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FragmentStatsVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector___setslice__" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FragmentStatsVector___setslice__" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< meep_geom::fragment_stats >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FragmentStatsVector___setslice__" "', argument " "3"" of type '" "std::vector< meep_geom::fragment_stats >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< meep_geom::fragment_stats >::difference_type >(val3);
  try {
    std_vector_Sl_meep_geom_fragment_stats_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  std::vector< meep_geom::fragment_stats >::difference_type arg2 ;
  std::vector< meep_geom::fragment_stats >::difference_type arg3 ;
  std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FragmentStatsVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector___setslice__" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FragmentStatsVector___setslice__" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< meep_geom::fragment_stats >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FragmentStatsVector___setslice__" "', argument " "3"" of type '" "std::vector< meep_geom::fragment_stats >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< meep_geom::fragment_stats >::difference_type >(val3);
  {
    std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > *ptr = (std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FragmentStatsVector___setslice__" "', argument " "4"" of type '" "std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FragmentStatsVector___setslice__" "', argument " "4"" of type '" "std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_meep_geom_fragment_stats_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FragmentStatsVector___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_FragmentStatsVector___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FragmentStatsVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< meep_geom::fragment_stats >::__setslice__(std::vector< meep_geom::fragment_stats >::difference_type,std::vector< meep_geom::fragment_stats >::difference_type)\n"
    "    std::vector< meep_geom::fragment_stats >::__setslice__(std::vector< meep_geom::fragment_stats >::difference_type,std::vector< meep_geom::fragment_stats >::difference_type,std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  std::vector< meep_geom::fragment_stats >::difference_type arg2 ;
  std::vector< meep_geom::fragment_stats >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FragmentStatsVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector___delslice__" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FragmentStatsVector___delslice__" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< meep_geom::fragment_stats >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FragmentStatsVector___delslice__" "', argument " "3"" of type '" "std::vector< meep_geom::fragment_stats >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< meep_geom::fragment_stats >::difference_type >(val3);
  try {
    std_vector_Sl_meep_geom_fragment_stats_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  std::vector< meep_geom::fragment_stats >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FragmentStatsVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector___delitem__" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FragmentStatsVector___delitem__" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< meep_geom::fragment_stats >::difference_type >(val2);
  try {
    std_vector_Sl_meep_geom_fragment_stats_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FragmentStatsVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector___getitem__" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FragmentStatsVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > *)std_vector_Sl_meep_geom_fragment_stats_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FragmentStatsVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector___setitem__" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FragmentStatsVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > *ptr = (std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FragmentStatsVector___setitem__" "', argument " "3"" of type '" "std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FragmentStatsVector___setitem__" "', argument " "3"" of type '" "std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_meep_geom_fragment_stats_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FragmentStatsVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector___setitem__" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FragmentStatsVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_meep_geom_fragment_stats_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FragmentStatsVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector___delitem__" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FragmentStatsVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_meep_geom_fragment_stats_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_FragmentStatsVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FragmentStatsVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FragmentStatsVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< meep_geom::fragment_stats >::__delitem__(std::vector< meep_geom::fragment_stats >::difference_type)\n"
    "    std::vector< meep_geom::fragment_stats >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  std::vector< meep_geom::fragment_stats >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< meep_geom::fragment_stats >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FragmentStatsVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector___getitem__" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FragmentStatsVector___getitem__" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< meep_geom::fragment_stats >::difference_type >(val2);
  try {
    result = (std::vector< meep_geom::fragment_stats >::value_type *) &std_vector_Sl_meep_geom_fragment_stats_Sg____getitem____SWIG_1((std::vector< meep_geom::fragment_stats > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_FragmentStatsVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FragmentStatsVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FragmentStatsVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< meep_geom::fragment_stats >::__getitem__(PySliceObject *)\n"
    "    std::vector< meep_geom::fragment_stats >::__getitem__(std::vector< meep_geom::fragment_stats >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  std::vector< meep_geom::fragment_stats >::difference_type arg2 ;
  std::vector< meep_geom::fragment_stats >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FragmentStatsVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector___setitem__" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FragmentStatsVector___setitem__" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< meep_geom::fragment_stats >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep_geom__fragment_stats,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FragmentStatsVector___setitem__" "', argument " "3"" of type '" "std::vector< meep_geom::fragment_stats >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FragmentStatsVector___setitem__" "', argument " "3"" of type '" "std::vector< meep_geom::fragment_stats >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< meep_geom::fragment_stats >::value_type * >(argp3);
  try {
    std_vector_Sl_meep_geom_fragment_stats_Sg____setitem____SWIG_2(arg1,arg2,(meep_geom::fragment_stats const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_FragmentStatsVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FragmentStatsVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep_geom__fragment_stats, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FragmentStatsVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FragmentStatsVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< meep_geom::fragment_stats >::__setitem__(PySliceObject *,std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > const &)\n"
    "    std::vector< meep_geom::fragment_stats >::__setitem__(PySliceObject *)\n"
    "    std::vector< meep_geom::fragment_stats >::__setitem__(std::vector< meep_geom::fragment_stats >::difference_type,std::vector< meep_geom::fragment_stats >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep_geom::fragment_stats >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FragmentStatsVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector_pop" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  try {
    result = std_vector_Sl_meep_geom_fragment_stats_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< meep_geom::fragment_stats >::value_type(static_cast< const std::vector< meep_geom::fragment_stats >::value_type& >(result))), SWIGTYPE_p_meep_geom__fragment_stats, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  std::vector< meep_geom::fragment_stats >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FragmentStatsVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector_append" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep_geom__fragment_stats,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FragmentStatsVector_append" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FragmentStatsVector_append" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< meep_geom::fragment_stats >::value_type * >(argp2);
  std_vector_Sl_meep_geom_fragment_stats_Sg__append(arg1,(meep_geom::fragment_stats const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FragmentStatsVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FragmentStatsVector")) SWIG_fail;
  result = (std::vector< meep_geom::fragment_stats > *)new std::vector< meep_geom::fragment_stats >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FragmentStatsVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< meep_geom::fragment_stats > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FragmentStatsVector",&obj0)) SWIG_fail;
  {
    std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > *ptr = (std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FragmentStatsVector" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FragmentStatsVector" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< meep_geom::fragment_stats > *)new std::vector< meep_geom::fragment_stats >((std::vector< meep_geom::fragment_stats > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FragmentStatsVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector_empty" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  result = (bool)((std::vector< meep_geom::fragment_stats > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep_geom::fragment_stats >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FragmentStatsVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector_size" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  result = ((std::vector< meep_geom::fragment_stats > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  std::vector< meep_geom::fragment_stats > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FragmentStatsVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector_swap" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FragmentStatsVector_swap" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FragmentStatsVector_swap" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep_geom::fragment_stats >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FragmentStatsVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector_begin" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< meep_geom::fragment_stats >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep_geom::fragment_stats >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FragmentStatsVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector_end" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< meep_geom::fragment_stats >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep_geom::fragment_stats >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FragmentStatsVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector_rbegin" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< meep_geom::fragment_stats >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep_geom::fragment_stats >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FragmentStatsVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector_rend" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< meep_geom::fragment_stats >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FragmentStatsVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector_clear" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< meep_geom::fragment_stats > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FragmentStatsVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector_get_allocator" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  result = ((std::vector< meep_geom::fragment_stats > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< meep_geom::fragment_stats >::allocator_type(static_cast< const std::vector< meep_geom::fragment_stats >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_meep_geom__fragment_stats_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FragmentStatsVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep_geom::fragment_stats > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FragmentStatsVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FragmentStatsVector" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats >::size_type""'");
  } 
  arg1 = static_cast< std::vector< meep_geom::fragment_stats >::size_type >(val1);
  result = (std::vector< meep_geom::fragment_stats > *)new std::vector< meep_geom::fragment_stats >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FragmentStatsVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector_pop_back" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  std::vector< meep_geom::fragment_stats >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FragmentStatsVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector_resize" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FragmentStatsVector_resize" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats >::size_type""'");
  } 
  arg2 = static_cast< std::vector< meep_geom::fragment_stats >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  std::vector< meep_geom::fragment_stats >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< meep_geom::fragment_stats >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FragmentStatsVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector_erase" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FragmentStatsVector_erase" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< meep_geom::fragment_stats >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< meep_geom::fragment_stats >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FragmentStatsVector_erase" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats >::iterator""'");
    }
  }
  result = std_vector_Sl_meep_geom_fragment_stats_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< meep_geom::fragment_stats >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  std::vector< meep_geom::fragment_stats >::iterator arg2 ;
  std::vector< meep_geom::fragment_stats >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< meep_geom::fragment_stats >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FragmentStatsVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector_erase" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FragmentStatsVector_erase" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< meep_geom::fragment_stats >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< meep_geom::fragment_stats >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FragmentStatsVector_erase" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FragmentStatsVector_erase" "', argument " "3"" of type '" "std::vector< meep_geom::fragment_stats >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< meep_geom::fragment_stats >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< meep_geom::fragment_stats >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FragmentStatsVector_erase" "', argument " "3"" of type '" "std::vector< meep_geom::fragment_stats >::iterator""'");
    }
  }
  result = std_vector_Sl_meep_geom_fragment_stats_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< meep_geom::fragment_stats >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< meep_geom::fragment_stats >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_FragmentStatsVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< meep_geom::fragment_stats >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< meep_geom::fragment_stats >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_FragmentStatsVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FragmentStatsVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< meep_geom::fragment_stats >::erase(std::vector< meep_geom::fragment_stats >::iterator)\n"
    "    std::vector< meep_geom::fragment_stats >::erase(std::vector< meep_geom::fragment_stats >::iterator,std::vector< meep_geom::fragment_stats >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_FragmentStatsVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats >::size_type arg1 ;
  std::vector< meep_geom::fragment_stats >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< meep_geom::fragment_stats > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_FragmentStatsVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FragmentStatsVector" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats >::size_type""'");
  } 
  arg1 = static_cast< std::vector< meep_geom::fragment_stats >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep_geom__fragment_stats,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_FragmentStatsVector" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FragmentStatsVector" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< meep_geom::fragment_stats >::value_type * >(argp2);
  result = (std::vector< meep_geom::fragment_stats > *)new std::vector< meep_geom::fragment_stats >(arg1,(std::vector< meep_geom::fragment_stats >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FragmentStatsVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_FragmentStatsVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_FragmentStatsVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FragmentStatsVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep_geom__fragment_stats, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_FragmentStatsVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FragmentStatsVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< meep_geom::fragment_stats >::vector()\n"
    "    std::vector< meep_geom::fragment_stats >::vector(std::vector< meep_geom::fragment_stats > const &)\n"
    "    std::vector< meep_geom::fragment_stats >::vector(std::vector< meep_geom::fragment_stats >::size_type)\n"
    "    std::vector< meep_geom::fragment_stats >::vector(std::vector< meep_geom::fragment_stats >::size_type,std::vector< meep_geom::fragment_stats >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  std::vector< meep_geom::fragment_stats >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FragmentStatsVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector_push_back" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep_geom__fragment_stats,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FragmentStatsVector_push_back" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FragmentStatsVector_push_back" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< meep_geom::fragment_stats >::value_type * >(argp2);
  (arg1)->push_back((std::vector< meep_geom::fragment_stats >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep_geom::fragment_stats >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FragmentStatsVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector_front" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  result = (std::vector< meep_geom::fragment_stats >::value_type *) &((std::vector< meep_geom::fragment_stats > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep_geom::fragment_stats >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FragmentStatsVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector_back" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  result = (std::vector< meep_geom::fragment_stats >::value_type *) &((std::vector< meep_geom::fragment_stats > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  std::vector< meep_geom::fragment_stats >::size_type arg2 ;
  std::vector< meep_geom::fragment_stats >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FragmentStatsVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector_assign" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FragmentStatsVector_assign" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats >::size_type""'");
  } 
  arg2 = static_cast< std::vector< meep_geom::fragment_stats >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep_geom__fragment_stats,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FragmentStatsVector_assign" "', argument " "3"" of type '" "std::vector< meep_geom::fragment_stats >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FragmentStatsVector_assign" "', argument " "3"" of type '" "std::vector< meep_geom::fragment_stats >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< meep_geom::fragment_stats >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< meep_geom::fragment_stats >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  std::vector< meep_geom::fragment_stats >::size_type arg2 ;
  std::vector< meep_geom::fragment_stats >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FragmentStatsVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector_resize" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FragmentStatsVector_resize" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats >::size_type""'");
  } 
  arg2 = static_cast< std::vector< meep_geom::fragment_stats >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep_geom__fragment_stats,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FragmentStatsVector_resize" "', argument " "3"" of type '" "std::vector< meep_geom::fragment_stats >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FragmentStatsVector_resize" "', argument " "3"" of type '" "std::vector< meep_geom::fragment_stats >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< meep_geom::fragment_stats >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< meep_geom::fragment_stats >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FragmentStatsVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep_geom__fragment_stats, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FragmentStatsVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FragmentStatsVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< meep_geom::fragment_stats >::resize(std::vector< meep_geom::fragment_stats >::size_type)\n"
    "    std::vector< meep_geom::fragment_stats >::resize(std::vector< meep_geom::fragment_stats >::size_type,std::vector< meep_geom::fragment_stats >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  std::vector< meep_geom::fragment_stats >::iterator arg2 ;
  std::vector< meep_geom::fragment_stats >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< meep_geom::fragment_stats >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FragmentStatsVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector_insert" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FragmentStatsVector_insert" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< meep_geom::fragment_stats >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< meep_geom::fragment_stats >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FragmentStatsVector_insert" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep_geom__fragment_stats,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FragmentStatsVector_insert" "', argument " "3"" of type '" "std::vector< meep_geom::fragment_stats >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FragmentStatsVector_insert" "', argument " "3"" of type '" "std::vector< meep_geom::fragment_stats >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< meep_geom::fragment_stats >::value_type * >(argp3);
  result = std_vector_Sl_meep_geom_fragment_stats_Sg__insert__SWIG_0(arg1,arg2,(meep_geom::fragment_stats const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< meep_geom::fragment_stats >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  std::vector< meep_geom::fragment_stats >::iterator arg2 ;
  std::vector< meep_geom::fragment_stats >::size_type arg3 ;
  std::vector< meep_geom::fragment_stats >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FragmentStatsVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector_insert" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FragmentStatsVector_insert" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< meep_geom::fragment_stats >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< meep_geom::fragment_stats >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FragmentStatsVector_insert" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FragmentStatsVector_insert" "', argument " "3"" of type '" "std::vector< meep_geom::fragment_stats >::size_type""'");
  } 
  arg3 = static_cast< std::vector< meep_geom::fragment_stats >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep_geom__fragment_stats,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FragmentStatsVector_insert" "', argument " "4"" of type '" "std::vector< meep_geom::fragment_stats >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FragmentStatsVector_insert" "', argument " "4"" of type '" "std::vector< meep_geom::fragment_stats >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< meep_geom::fragment_stats >::value_type * >(argp4);
  std_vector_Sl_meep_geom_fragment_stats_Sg__insert__SWIG_1(arg1,arg2,arg3,(meep_geom::fragment_stats const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< meep_geom::fragment_stats >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep_geom__fragment_stats, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FragmentStatsVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< meep_geom::fragment_stats >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep_geom__fragment_stats, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_FragmentStatsVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FragmentStatsVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< meep_geom::fragment_stats >::insert(std::vector< meep_geom::fragment_stats >::iterator,std::vector< meep_geom::fragment_stats >::value_type const &)\n"
    "    std::vector< meep_geom::fragment_stats >::insert(std::vector< meep_geom::fragment_stats >::iterator,std::vector< meep_geom::fragment_stats >::size_type,std::vector< meep_geom::fragment_stats >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  std::vector< meep_geom::fragment_stats >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FragmentStatsVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector_reserve" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FragmentStatsVector_reserve" "', argument " "2"" of type '" "std::vector< meep_geom::fragment_stats >::size_type""'");
  } 
  arg2 = static_cast< std::vector< meep_geom::fragment_stats >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FragmentStatsVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep_geom::fragment_stats >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FragmentStatsVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FragmentStatsVector_capacity" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  result = ((std::vector< meep_geom::fragment_stats > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FragmentStatsVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::fragment_stats > *arg1 = (std::vector< meep_geom::fragment_stats > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FragmentStatsVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FragmentStatsVector" "', argument " "1"" of type '" "std::vector< meep_geom::fragment_stats > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::fragment_stats > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FragmentStatsVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DftDataVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:DftDataVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector_iterator" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_meep_geom_dft_data_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DftDataVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector___nonzero__" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  result = (bool)std_vector_Sl_meep_geom_dft_data_Sg____nonzero__((std::vector< meep_geom::dft_data > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DftDataVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector___bool__" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  result = (bool)std_vector_Sl_meep_geom_dft_data_Sg____bool__((std::vector< meep_geom::dft_data > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep_geom::dft_data >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DftDataVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector___len__" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  result = std_vector_Sl_meep_geom_dft_data_Sg____len__((std::vector< meep_geom::dft_data > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  std::vector< meep_geom::dft_data >::difference_type arg2 ;
  std::vector< meep_geom::dft_data >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DftDataVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector___getslice__" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DftDataVector___getslice__" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< meep_geom::dft_data >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DftDataVector___getslice__" "', argument " "3"" of type '" "std::vector< meep_geom::dft_data >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< meep_geom::dft_data >::difference_type >(val3);
  try {
    result = (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > *)std_vector_Sl_meep_geom_dft_data_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  std::vector< meep_geom::dft_data >::difference_type arg2 ;
  std::vector< meep_geom::dft_data >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DftDataVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector___setslice__" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DftDataVector___setslice__" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< meep_geom::dft_data >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DftDataVector___setslice__" "', argument " "3"" of type '" "std::vector< meep_geom::dft_data >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< meep_geom::dft_data >::difference_type >(val3);
  try {
    std_vector_Sl_meep_geom_dft_data_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  std::vector< meep_geom::dft_data >::difference_type arg2 ;
  std::vector< meep_geom::dft_data >::difference_type arg3 ;
  std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DftDataVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector___setslice__" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DftDataVector___setslice__" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< meep_geom::dft_data >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DftDataVector___setslice__" "', argument " "3"" of type '" "std::vector< meep_geom::dft_data >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< meep_geom::dft_data >::difference_type >(val3);
  {
    std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > *ptr = (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DftDataVector___setslice__" "', argument " "4"" of type '" "std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DftDataVector___setslice__" "', argument " "4"" of type '" "std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_meep_geom_dft_data_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DftDataVector___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DftDataVector___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DftDataVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< meep_geom::dft_data >::__setslice__(std::vector< meep_geom::dft_data >::difference_type,std::vector< meep_geom::dft_data >::difference_type)\n"
    "    std::vector< meep_geom::dft_data >::__setslice__(std::vector< meep_geom::dft_data >::difference_type,std::vector< meep_geom::dft_data >::difference_type,std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DftDataVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  std::vector< meep_geom::dft_data >::difference_type arg2 ;
  std::vector< meep_geom::dft_data >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DftDataVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector___delslice__" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DftDataVector___delslice__" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< meep_geom::dft_data >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DftDataVector___delslice__" "', argument " "3"" of type '" "std::vector< meep_geom::dft_data >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< meep_geom::dft_data >::difference_type >(val3);
  try {
    std_vector_Sl_meep_geom_dft_data_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  std::vector< meep_geom::dft_data >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DftDataVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector___delitem__" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DftDataVector___delitem__" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< meep_geom::dft_data >::difference_type >(val2);
  try {
    std_vector_Sl_meep_geom_dft_data_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DftDataVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector___getitem__" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DftDataVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > *)std_vector_Sl_meep_geom_dft_data_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DftDataVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector___setitem__" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DftDataVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > *ptr = (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DftDataVector___setitem__" "', argument " "3"" of type '" "std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DftDataVector___setitem__" "', argument " "3"" of type '" "std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_meep_geom_dft_data_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DftDataVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector___setitem__" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DftDataVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_meep_geom_dft_data_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DftDataVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector___delitem__" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DftDataVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_meep_geom_dft_data_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_DftDataVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DftDataVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DftDataVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< meep_geom::dft_data >::__delitem__(std::vector< meep_geom::dft_data >::difference_type)\n"
    "    std::vector< meep_geom::dft_data >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DftDataVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  std::vector< meep_geom::dft_data >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< meep_geom::dft_data >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DftDataVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector___getitem__" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DftDataVector___getitem__" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< meep_geom::dft_data >::difference_type >(val2);
  try {
    result = (std::vector< meep_geom::dft_data >::value_type *) &std_vector_Sl_meep_geom_dft_data_Sg____getitem____SWIG_1((std::vector< meep_geom::dft_data > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep_geom__dft_data, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_DftDataVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DftDataVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DftDataVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< meep_geom::dft_data >::__getitem__(PySliceObject *)\n"
    "    std::vector< meep_geom::dft_data >::__getitem__(std::vector< meep_geom::dft_data >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DftDataVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  std::vector< meep_geom::dft_data >::difference_type arg2 ;
  std::vector< meep_geom::dft_data >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DftDataVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector___setitem__" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DftDataVector___setitem__" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< meep_geom::dft_data >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep_geom__dft_data,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DftDataVector___setitem__" "', argument " "3"" of type '" "std::vector< meep_geom::dft_data >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DftDataVector___setitem__" "', argument " "3"" of type '" "std::vector< meep_geom::dft_data >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< meep_geom::dft_data >::value_type * >(argp3);
  try {
    std_vector_Sl_meep_geom_dft_data_Sg____setitem____SWIG_2(arg1,arg2,(meep_geom::dft_data const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_DftDataVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DftDataVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep_geom__dft_data, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DftDataVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DftDataVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< meep_geom::dft_data >::__setitem__(PySliceObject *,std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > const &)\n"
    "    std::vector< meep_geom::dft_data >::__setitem__(PySliceObject *)\n"
    "    std::vector< meep_geom::dft_data >::__setitem__(std::vector< meep_geom::dft_data >::difference_type,std::vector< meep_geom::dft_data >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DftDataVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< meep_geom::dft_data > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DftDataVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector_pop" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  try {
    result = std_vector_Sl_meep_geom_dft_data_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< meep_geom::dft_data >::value_type(static_cast< const std::vector< meep_geom::dft_data >::value_type& >(result))), SWIGTYPE_p_meep_geom__dft_data, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  std::vector< meep_geom::dft_data >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DftDataVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector_append" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep_geom__dft_data,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DftDataVector_append" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DftDataVector_append" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< meep_geom::dft_data >::value_type * >(argp2);
  std_vector_Sl_meep_geom_dft_data_Sg__append(arg1,(meep_geom::dft_data const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DftDataVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DftDataVector")) SWIG_fail;
  result = (std::vector< meep_geom::dft_data > *)new std::vector< meep_geom::dft_data >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DftDataVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< meep_geom::dft_data > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DftDataVector",&obj0)) SWIG_fail;
  {
    std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > *ptr = (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DftDataVector" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DftDataVector" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< meep_geom::dft_data > *)new std::vector< meep_geom::dft_data >((std::vector< meep_geom::dft_data > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DftDataVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector_empty" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  result = (bool)((std::vector< meep_geom::dft_data > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep_geom::dft_data >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DftDataVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector_size" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  result = ((std::vector< meep_geom::dft_data > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  std::vector< meep_geom::dft_data > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DftDataVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector_swap" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DftDataVector_swap" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DftDataVector_swap" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep_geom::dft_data >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DftDataVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector_begin" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< meep_geom::dft_data >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep_geom::dft_data >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DftDataVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector_end" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< meep_geom::dft_data >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep_geom::dft_data >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DftDataVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector_rbegin" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< meep_geom::dft_data >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep_geom::dft_data >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DftDataVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector_rend" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< meep_geom::dft_data >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DftDataVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector_clear" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< meep_geom::dft_data > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DftDataVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector_get_allocator" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  result = ((std::vector< meep_geom::dft_data > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< meep_geom::dft_data >::allocator_type(static_cast< const std::vector< meep_geom::dft_data >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_meep_geom__dft_data_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DftDataVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector_pop_back" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  std::vector< meep_geom::dft_data >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< meep_geom::dft_data >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DftDataVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector_erase" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DftDataVector_erase" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< meep_geom::dft_data >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< meep_geom::dft_data >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DftDataVector_erase" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data >::iterator""'");
    }
  }
  result = std_vector_Sl_meep_geom_dft_data_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< meep_geom::dft_data >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  std::vector< meep_geom::dft_data >::iterator arg2 ;
  std::vector< meep_geom::dft_data >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< meep_geom::dft_data >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DftDataVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector_erase" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DftDataVector_erase" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< meep_geom::dft_data >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< meep_geom::dft_data >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DftDataVector_erase" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DftDataVector_erase" "', argument " "3"" of type '" "std::vector< meep_geom::dft_data >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< meep_geom::dft_data >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< meep_geom::dft_data >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DftDataVector_erase" "', argument " "3"" of type '" "std::vector< meep_geom::dft_data >::iterator""'");
    }
  }
  result = std_vector_Sl_meep_geom_dft_data_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< meep_geom::dft_data >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< meep_geom::dft_data >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_DftDataVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< meep_geom::dft_data >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< meep_geom::dft_data >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_DftDataVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DftDataVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< meep_geom::dft_data >::erase(std::vector< meep_geom::dft_data >::iterator)\n"
    "    std::vector< meep_geom::dft_data >::erase(std::vector< meep_geom::dft_data >::iterator,std::vector< meep_geom::dft_data >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_DftDataVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data >::size_type arg1 ;
  std::vector< meep_geom::dft_data >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< meep_geom::dft_data > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DftDataVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DftDataVector" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data >::size_type""'");
  } 
  arg1 = static_cast< std::vector< meep_geom::dft_data >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep_geom__dft_data,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DftDataVector" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DftDataVector" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< meep_geom::dft_data >::value_type * >(argp2);
  result = (std::vector< meep_geom::dft_data > *)new std::vector< meep_geom::dft_data >(arg1,(std::vector< meep_geom::dft_data >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DftDataVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DftDataVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DftDataVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep_geom__dft_data, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_DftDataVector__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DftDataVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< meep_geom::dft_data >::vector()\n"
    "    std::vector< meep_geom::dft_data >::vector(std::vector< meep_geom::dft_data > const &)\n"
    "    std::vector< meep_geom::dft_data >::vector(std::vector< meep_geom::dft_data >::size_type,std::vector< meep_geom::dft_data >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DftDataVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  std::vector< meep_geom::dft_data >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DftDataVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector_push_back" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep_geom__dft_data,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DftDataVector_push_back" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DftDataVector_push_back" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< meep_geom::dft_data >::value_type * >(argp2);
  (arg1)->push_back((std::vector< meep_geom::dft_data >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep_geom::dft_data >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DftDataVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector_front" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  result = (std::vector< meep_geom::dft_data >::value_type *) &((std::vector< meep_geom::dft_data > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep_geom__dft_data, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep_geom::dft_data >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DftDataVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector_back" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  result = (std::vector< meep_geom::dft_data >::value_type *) &((std::vector< meep_geom::dft_data > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep_geom__dft_data, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  std::vector< meep_geom::dft_data >::size_type arg2 ;
  std::vector< meep_geom::dft_data >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DftDataVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector_assign" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DftDataVector_assign" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data >::size_type""'");
  } 
  arg2 = static_cast< std::vector< meep_geom::dft_data >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep_geom__dft_data,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DftDataVector_assign" "', argument " "3"" of type '" "std::vector< meep_geom::dft_data >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DftDataVector_assign" "', argument " "3"" of type '" "std::vector< meep_geom::dft_data >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< meep_geom::dft_data >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< meep_geom::dft_data >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  std::vector< meep_geom::dft_data >::iterator arg2 ;
  std::vector< meep_geom::dft_data >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< meep_geom::dft_data >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DftDataVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector_insert" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DftDataVector_insert" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< meep_geom::dft_data >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< meep_geom::dft_data >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DftDataVector_insert" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep_geom__dft_data,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DftDataVector_insert" "', argument " "3"" of type '" "std::vector< meep_geom::dft_data >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DftDataVector_insert" "', argument " "3"" of type '" "std::vector< meep_geom::dft_data >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< meep_geom::dft_data >::value_type * >(argp3);
  result = std_vector_Sl_meep_geom_dft_data_Sg__insert__SWIG_0(arg1,arg2,(meep_geom::dft_data const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< meep_geom::dft_data >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  std::vector< meep_geom::dft_data >::iterator arg2 ;
  std::vector< meep_geom::dft_data >::size_type arg3 ;
  std::vector< meep_geom::dft_data >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DftDataVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector_insert" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DftDataVector_insert" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< meep_geom::dft_data >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< meep_geom::dft_data >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DftDataVector_insert" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DftDataVector_insert" "', argument " "3"" of type '" "std::vector< meep_geom::dft_data >::size_type""'");
  } 
  arg3 = static_cast< std::vector< meep_geom::dft_data >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep_geom__dft_data,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DftDataVector_insert" "', argument " "4"" of type '" "std::vector< meep_geom::dft_data >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DftDataVector_insert" "', argument " "4"" of type '" "std::vector< meep_geom::dft_data >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< meep_geom::dft_data >::value_type * >(argp4);
  std_vector_Sl_meep_geom_dft_data_Sg__insert__SWIG_1(arg1,arg2,arg3,(meep_geom::dft_data const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< meep_geom::dft_data >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep_geom__dft_data, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DftDataVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< meep_geom::dft_data >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep_geom__dft_data, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DftDataVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DftDataVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< meep_geom::dft_data >::insert(std::vector< meep_geom::dft_data >::iterator,std::vector< meep_geom::dft_data >::value_type const &)\n"
    "    std::vector< meep_geom::dft_data >::insert(std::vector< meep_geom::dft_data >::iterator,std::vector< meep_geom::dft_data >::size_type,std::vector< meep_geom::dft_data >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DftDataVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  std::vector< meep_geom::dft_data >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DftDataVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector_reserve" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DftDataVector_reserve" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data >::size_type""'");
  } 
  arg2 = static_cast< std::vector< meep_geom::dft_data >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DftDataVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep_geom::dft_data >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DftDataVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DftDataVector_capacity" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  result = ((std::vector< meep_geom::dft_data > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DftDataVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep_geom::dft_data > *arg1 = (std::vector< meep_geom::dft_data > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DftDataVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DftDataVector" "', argument " "1"" of type '" "std::vector< meep_geom::dft_data > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep_geom::dft_data > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DftDataVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VolumeVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VolumeVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector_iterator" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_meep_volume_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VolumeVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector___nonzero__" "', argument " "1"" of type '" "std::vector< meep::volume > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  result = (bool)std_vector_Sl_meep_volume_Sg____nonzero__((std::vector< meep::volume > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VolumeVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector___bool__" "', argument " "1"" of type '" "std::vector< meep::volume > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  result = (bool)std_vector_Sl_meep_volume_Sg____bool__((std::vector< meep::volume > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep::volume >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VolumeVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector___len__" "', argument " "1"" of type '" "std::vector< meep::volume > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  result = std_vector_Sl_meep_volume_Sg____len__((std::vector< meep::volume > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  std::vector< meep::volume >::difference_type arg2 ;
  std::vector< meep::volume >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< meep::volume,std::allocator< meep::volume > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VolumeVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector___getslice__" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VolumeVector___getslice__" "', argument " "2"" of type '" "std::vector< meep::volume >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< meep::volume >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VolumeVector___getslice__" "', argument " "3"" of type '" "std::vector< meep::volume >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< meep::volume >::difference_type >(val3);
  try {
    result = (std::vector< meep::volume,std::allocator< meep::volume > > *)std_vector_Sl_meep_volume_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  std::vector< meep::volume >::difference_type arg2 ;
  std::vector< meep::volume >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VolumeVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector___setslice__" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VolumeVector___setslice__" "', argument " "2"" of type '" "std::vector< meep::volume >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< meep::volume >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VolumeVector___setslice__" "', argument " "3"" of type '" "std::vector< meep::volume >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< meep::volume >::difference_type >(val3);
  try {
    std_vector_Sl_meep_volume_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  std::vector< meep::volume >::difference_type arg2 ;
  std::vector< meep::volume >::difference_type arg3 ;
  std::vector< meep::volume,std::allocator< meep::volume > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VolumeVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector___setslice__" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VolumeVector___setslice__" "', argument " "2"" of type '" "std::vector< meep::volume >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< meep::volume >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VolumeVector___setslice__" "', argument " "3"" of type '" "std::vector< meep::volume >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< meep::volume >::difference_type >(val3);
  {
    std::vector< meep::volume,std::allocator< meep::volume > > *ptr = (std::vector< meep::volume,std::allocator< meep::volume > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VolumeVector___setslice__" "', argument " "4"" of type '" "std::vector< meep::volume,std::allocator< meep::volume > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VolumeVector___setslice__" "', argument " "4"" of type '" "std::vector< meep::volume,std::allocator< meep::volume > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_meep_volume_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< meep::volume,std::allocator< meep::volume > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep::volume,std::allocator< meep::volume > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VolumeVector___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep::volume,std::allocator< meep::volume > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< meep::volume,std::allocator< meep::volume > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VolumeVector___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VolumeVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< meep::volume >::__setslice__(std::vector< meep::volume >::difference_type,std::vector< meep::volume >::difference_type)\n"
    "    std::vector< meep::volume >::__setslice__(std::vector< meep::volume >::difference_type,std::vector< meep::volume >::difference_type,std::vector< meep::volume,std::allocator< meep::volume > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VolumeVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  std::vector< meep::volume >::difference_type arg2 ;
  std::vector< meep::volume >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VolumeVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector___delslice__" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VolumeVector___delslice__" "', argument " "2"" of type '" "std::vector< meep::volume >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< meep::volume >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VolumeVector___delslice__" "', argument " "3"" of type '" "std::vector< meep::volume >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< meep::volume >::difference_type >(val3);
  try {
    std_vector_Sl_meep_volume_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  std::vector< meep::volume >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VolumeVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector___delitem__" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VolumeVector___delitem__" "', argument " "2"" of type '" "std::vector< meep::volume >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< meep::volume >::difference_type >(val2);
  try {
    std_vector_Sl_meep_volume_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< meep::volume,std::allocator< meep::volume > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VolumeVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector___getitem__" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VolumeVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< meep::volume,std::allocator< meep::volume > > *)std_vector_Sl_meep_volume_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< meep::volume,std::allocator< meep::volume > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VolumeVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector___setitem__" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VolumeVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< meep::volume,std::allocator< meep::volume > > *ptr = (std::vector< meep::volume,std::allocator< meep::volume > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VolumeVector___setitem__" "', argument " "3"" of type '" "std::vector< meep::volume,std::allocator< meep::volume > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VolumeVector___setitem__" "', argument " "3"" of type '" "std::vector< meep::volume,std::allocator< meep::volume > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_meep_volume_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< meep::volume,std::allocator< meep::volume > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VolumeVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector___setitem__" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VolumeVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_meep_volume_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VolumeVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector___delitem__" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VolumeVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_meep_volume_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep::volume,std::allocator< meep::volume > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VolumeVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep::volume,std::allocator< meep::volume > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VolumeVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VolumeVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< meep::volume >::__delitem__(std::vector< meep::volume >::difference_type)\n"
    "    std::vector< meep::volume >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VolumeVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  std::vector< meep::volume >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< meep::volume >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VolumeVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector___getitem__" "', argument " "1"" of type '" "std::vector< meep::volume > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VolumeVector___getitem__" "', argument " "2"" of type '" "std::vector< meep::volume >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< meep::volume >::difference_type >(val2);
  try {
    result = (std::vector< meep::volume >::value_type *) &std_vector_Sl_meep_volume_Sg____getitem____SWIG_1((std::vector< meep::volume > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__volume, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep::volume,std::allocator< meep::volume > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VolumeVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep::volume,std::allocator< meep::volume > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VolumeVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VolumeVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< meep::volume >::__getitem__(PySliceObject *)\n"
    "    std::vector< meep::volume >::__getitem__(std::vector< meep::volume >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VolumeVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  std::vector< meep::volume >::difference_type arg2 ;
  std::vector< meep::volume >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VolumeVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector___setitem__" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VolumeVector___setitem__" "', argument " "2"" of type '" "std::vector< meep::volume >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< meep::volume >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VolumeVector___setitem__" "', argument " "3"" of type '" "std::vector< meep::volume >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VolumeVector___setitem__" "', argument " "3"" of type '" "std::vector< meep::volume >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< meep::volume >::value_type * >(argp3);
  try {
    std_vector_Sl_meep_volume_Sg____setitem____SWIG_2(arg1,arg2,(meep::volume const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep::volume,std::allocator< meep::volume > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VolumeVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep::volume,std::allocator< meep::volume > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< meep::volume,std::allocator< meep::volume > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VolumeVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep::volume,std::allocator< meep::volume > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VolumeVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VolumeVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< meep::volume >::__setitem__(PySliceObject *,std::vector< meep::volume,std::allocator< meep::volume > > const &)\n"
    "    std::vector< meep::volume >::__setitem__(PySliceObject *)\n"
    "    std::vector< meep::volume >::__setitem__(std::vector< meep::volume >::difference_type,std::vector< meep::volume >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VolumeVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< meep::volume > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VolumeVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector_pop" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  try {
    result = std_vector_Sl_meep_volume_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< meep::volume >::value_type(static_cast< const std::vector< meep::volume >::value_type& >(result))), SWIGTYPE_p_meep__volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  std::vector< meep::volume >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VolumeVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector_append" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VolumeVector_append" "', argument " "2"" of type '" "std::vector< meep::volume >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VolumeVector_append" "', argument " "2"" of type '" "std::vector< meep::volume >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< meep::volume >::value_type * >(argp2);
  std_vector_Sl_meep_volume_Sg__append(arg1,(meep::volume const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VolumeVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VolumeVector")) SWIG_fail;
  result = (std::vector< meep::volume > *)new std::vector< meep::volume >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VolumeVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< meep::volume > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VolumeVector",&obj0)) SWIG_fail;
  {
    std::vector< meep::volume,std::allocator< meep::volume > > *ptr = (std::vector< meep::volume,std::allocator< meep::volume > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VolumeVector" "', argument " "1"" of type '" "std::vector< meep::volume > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VolumeVector" "', argument " "1"" of type '" "std::vector< meep::volume > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< meep::volume > *)new std::vector< meep::volume >((std::vector< meep::volume > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VolumeVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector_empty" "', argument " "1"" of type '" "std::vector< meep::volume > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  result = (bool)((std::vector< meep::volume > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep::volume >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VolumeVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector_size" "', argument " "1"" of type '" "std::vector< meep::volume > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  result = ((std::vector< meep::volume > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  std::vector< meep::volume > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VolumeVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector_swap" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VolumeVector_swap" "', argument " "2"" of type '" "std::vector< meep::volume > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VolumeVector_swap" "', argument " "2"" of type '" "std::vector< meep::volume > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< meep::volume > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep::volume >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VolumeVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector_begin" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< meep::volume >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep::volume >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VolumeVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector_end" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< meep::volume >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep::volume >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VolumeVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector_rbegin" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< meep::volume >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep::volume >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VolumeVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector_rend" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< meep::volume >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VolumeVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector_clear" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< meep::volume > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VolumeVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector_get_allocator" "', argument " "1"" of type '" "std::vector< meep::volume > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  result = ((std::vector< meep::volume > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< meep::volume >::allocator_type(static_cast< const std::vector< meep::volume >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_meep__volume_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VolumeVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector_pop_back" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  std::vector< meep::volume >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< meep::volume >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VolumeVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector_erase" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VolumeVector_erase" "', argument " "2"" of type '" "std::vector< meep::volume >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< meep::volume >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< meep::volume >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VolumeVector_erase" "', argument " "2"" of type '" "std::vector< meep::volume >::iterator""'");
    }
  }
  result = std_vector_Sl_meep_volume_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< meep::volume >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  std::vector< meep::volume >::iterator arg2 ;
  std::vector< meep::volume >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< meep::volume >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VolumeVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector_erase" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VolumeVector_erase" "', argument " "2"" of type '" "std::vector< meep::volume >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< meep::volume >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< meep::volume >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VolumeVector_erase" "', argument " "2"" of type '" "std::vector< meep::volume >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VolumeVector_erase" "', argument " "3"" of type '" "std::vector< meep::volume >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< meep::volume >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< meep::volume >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VolumeVector_erase" "', argument " "3"" of type '" "std::vector< meep::volume >::iterator""'");
    }
  }
  result = std_vector_Sl_meep_volume_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< meep::volume >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep::volume,std::allocator< meep::volume > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< meep::volume >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VolumeVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep::volume,std::allocator< meep::volume > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< meep::volume >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< meep::volume >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VolumeVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VolumeVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< meep::volume >::erase(std::vector< meep::volume >::iterator)\n"
    "    std::vector< meep::volume >::erase(std::vector< meep::volume >::iterator,std::vector< meep::volume >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_VolumeVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume >::size_type arg1 ;
  std::vector< meep::volume >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< meep::volume > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VolumeVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VolumeVector" "', argument " "1"" of type '" "std::vector< meep::volume >::size_type""'");
  } 
  arg1 = static_cast< std::vector< meep::volume >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VolumeVector" "', argument " "2"" of type '" "std::vector< meep::volume >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VolumeVector" "', argument " "2"" of type '" "std::vector< meep::volume >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< meep::volume >::value_type * >(argp2);
  result = (std::vector< meep::volume > *)new std::vector< meep::volume >(arg1,(std::vector< meep::volume >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VolumeVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VolumeVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep::volume,std::allocator< meep::volume > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VolumeVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__volume, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VolumeVector__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VolumeVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< meep::volume >::vector()\n"
    "    std::vector< meep::volume >::vector(std::vector< meep::volume > const &)\n"
    "    std::vector< meep::volume >::vector(std::vector< meep::volume >::size_type,std::vector< meep::volume >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VolumeVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  std::vector< meep::volume >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VolumeVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector_push_back" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VolumeVector_push_back" "', argument " "2"" of type '" "std::vector< meep::volume >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VolumeVector_push_back" "', argument " "2"" of type '" "std::vector< meep::volume >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< meep::volume >::value_type * >(argp2);
  (arg1)->push_back((std::vector< meep::volume >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep::volume >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VolumeVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector_front" "', argument " "1"" of type '" "std::vector< meep::volume > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  result = (std::vector< meep::volume >::value_type *) &((std::vector< meep::volume > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__volume, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep::volume >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VolumeVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector_back" "', argument " "1"" of type '" "std::vector< meep::volume > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  result = (std::vector< meep::volume >::value_type *) &((std::vector< meep::volume > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__volume, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  std::vector< meep::volume >::size_type arg2 ;
  std::vector< meep::volume >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VolumeVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector_assign" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VolumeVector_assign" "', argument " "2"" of type '" "std::vector< meep::volume >::size_type""'");
  } 
  arg2 = static_cast< std::vector< meep::volume >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VolumeVector_assign" "', argument " "3"" of type '" "std::vector< meep::volume >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VolumeVector_assign" "', argument " "3"" of type '" "std::vector< meep::volume >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< meep::volume >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< meep::volume >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  std::vector< meep::volume >::iterator arg2 ;
  std::vector< meep::volume >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< meep::volume >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VolumeVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector_insert" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VolumeVector_insert" "', argument " "2"" of type '" "std::vector< meep::volume >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< meep::volume >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< meep::volume >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VolumeVector_insert" "', argument " "2"" of type '" "std::vector< meep::volume >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VolumeVector_insert" "', argument " "3"" of type '" "std::vector< meep::volume >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VolumeVector_insert" "', argument " "3"" of type '" "std::vector< meep::volume >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< meep::volume >::value_type * >(argp3);
  result = std_vector_Sl_meep_volume_Sg__insert__SWIG_0(arg1,arg2,(meep::volume const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< meep::volume >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  std::vector< meep::volume >::iterator arg2 ;
  std::vector< meep::volume >::size_type arg3 ;
  std::vector< meep::volume >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VolumeVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector_insert" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VolumeVector_insert" "', argument " "2"" of type '" "std::vector< meep::volume >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< meep::volume >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< meep::volume >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VolumeVector_insert" "', argument " "2"" of type '" "std::vector< meep::volume >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VolumeVector_insert" "', argument " "3"" of type '" "std::vector< meep::volume >::size_type""'");
  } 
  arg3 = static_cast< std::vector< meep::volume >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VolumeVector_insert" "', argument " "4"" of type '" "std::vector< meep::volume >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VolumeVector_insert" "', argument " "4"" of type '" "std::vector< meep::volume >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< meep::volume >::value_type * >(argp4);
  std_vector_Sl_meep_volume_Sg__insert__SWIG_1(arg1,arg2,arg3,(meep::volume const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep::volume,std::allocator< meep::volume > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< meep::volume >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VolumeVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< meep::volume,std::allocator< meep::volume > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< meep::volume >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__volume, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VolumeVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VolumeVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< meep::volume >::insert(std::vector< meep::volume >::iterator,std::vector< meep::volume >::value_type const &)\n"
    "    std::vector< meep::volume >::insert(std::vector< meep::volume >::iterator,std::vector< meep::volume >::size_type,std::vector< meep::volume >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VolumeVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  std::vector< meep::volume >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VolumeVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector_reserve" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VolumeVector_reserve" "', argument " "2"" of type '" "std::vector< meep::volume >::size_type""'");
  } 
  arg2 = static_cast< std::vector< meep::volume >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VolumeVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep::volume >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VolumeVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VolumeVector_capacity" "', argument " "1"" of type '" "std::vector< meep::volume > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  result = ((std::vector< meep::volume > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VolumeVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< meep::volume > *arg1 = (std::vector< meep::volume > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VolumeVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VolumeVector" "', argument " "1"" of type '" "std::vector< meep::volume > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< meep::volume > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VolumeVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IntVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_iterator" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_int_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___nonzero__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)std_vector_Sl_int_Sg____nonzero__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___bool__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)std_vector_Sl_int_Sg____bool__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___len__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = std_vector_Sl_int_Sg____len__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___getslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___getslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___getslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___setslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___setslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    std_vector_Sl_int_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IntVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___setslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___setslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IntVector___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntVector___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_int_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntVector___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IntVector___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__setslice__(std::vector< int >::difference_type,std::vector< int >::difference_type)\n"
    "    std::vector< int >::__setslice__(std::vector< int >::difference_type,std::vector< int >::difference_type,std::vector< int,std::allocator< int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___delslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___delslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___delslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    std_vector_Sl_int_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___delitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  try {
    std_vector_Sl_int_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___getitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IntVector___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntVector___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_int_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IntVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__delitem__(std::vector< int >::difference_type)\n"
    "    std::vector< int >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___getitem__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___getitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg____getitem____SWIG_1((std::vector< int > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IntVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__getitem__(PySliceObject *)\n"
    "    std::vector< int >::__getitem__(std::vector< int >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___setitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___setitem__" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_2(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IntVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IntVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__setitem__(PySliceObject *,std::vector< int,std::allocator< int > > const &)\n"
    "    std::vector< int >::__setitem__(PySliceObject *)\n"
    "    std::vector< int >::__setitem__(std::vector< int >::difference_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_pop" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  try {
    result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_append" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_append" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_int_Sg__append(arg1,(int const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IntVector")) SWIG_fail;
  result = (std::vector< int > *)new std::vector< int >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IntVector",&obj0)) SWIG_fail;
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_empty" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)((std::vector< int > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_size" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_swap" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntVector_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntVector_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_begin" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_end" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_rbegin" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_rend" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_clear" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_get_allocator" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< int >::allocator_type(static_cast< const std::vector< int >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IntVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  result = (std::vector< int > *)new std::vector< int >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_pop_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  result = std_vector_Sl_int_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
    }
  }
  result = std_vector_Sl_int_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_IntVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_IntVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::erase(std::vector< int >::iterator)\n"
    "    std::vector< int >::erase(std::vector< int >::iterator,std::vector< int >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_IntVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  std::vector< int >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IntVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IntVector" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< int > *)new std::vector< int >(arg1,(std::vector< int >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_IntVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IntVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IntVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_IntVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_IntVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::vector()\n"
    "    std::vector< int >::vector(std::vector< int > const &)\n"
    "    std::vector< int >::vector(std::vector< int >::size_type)\n"
    "    std::vector< int >::vector(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_push_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_push_back" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_front" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->front();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_back" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->back();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_assign" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_assign" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_assign" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_resize" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::resize(std::vector< int >::size_type)\n"
    "    std::vector< int >::resize(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_insert" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  result = std_vector_Sl_int_Sg__insert__SWIG_0(arg1,arg2,(int const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::size_type arg3 ;
  std::vector< int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< int >::value_type temp4 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IntVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_insert" "', argument " "3"" of type '" "std::vector< int >::size_type""'");
  } 
  arg3 = static_cast< std::vector< int >::size_type >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IntVector_insert" "', argument " "4"" of type '" "std::vector< int >::value_type""'");
  } 
  temp4 = static_cast< std::vector< int >::value_type >(val4);
  arg4 = &temp4;
  std_vector_Sl_int_Sg__insert__SWIG_1(arg1,arg2,arg3,(int const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IntVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::insert(std::vector< int >::iterator,std::vector< int >::value_type const &)\n"
    "    std::vector< int >::insert(std::vector< int >::iterator,std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_reserve" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_reserve" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_capacity" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IntVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntVector" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DoubleVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_iterator" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_double_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___nonzero__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)std_vector_Sl_double_Sg____nonzero__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___bool__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)std_vector_Sl_double_Sg____bool__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___len__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = std_vector_Sl_double_Sg____len__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___getslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___getslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___getslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    std_vector_Sl_double_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DoubleVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DoubleVector___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_double_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DoubleVector___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type)\n"
    "    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___delslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___delslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___delslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    std_vector_Sl_double_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___delitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    std_vector_Sl_double_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___getitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_double_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_DoubleVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DoubleVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__delitem__(std::vector< double >::difference_type)\n"
    "    std::vector< double >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___getitem__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___getitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg____getitem____SWIG_1((std::vector< double > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_DoubleVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DoubleVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__getitem__(PySliceObject *)\n"
    "    std::vector< double >::__getitem__(std::vector< double >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___setitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_2(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_DoubleVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DoubleVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__setitem__(PySliceObject *,std::vector< double,std::allocator< double > > const &)\n"
    "    std::vector< double >::__setitem__(PySliceObject *)\n"
    "    std::vector< double >::__setitem__(std::vector< double >::difference_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_pop" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  try {
    result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_append" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_append" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_double_Sg__append(arg1,(double const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DoubleVector")) SWIG_fail;
  result = (std::vector< double > *)new std::vector< double >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DoubleVector",&obj0)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_empty" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)((std::vector< double > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_size" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_swap" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DoubleVector_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_begin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_end" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_rbegin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_rend" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_get_allocator" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< double >::allocator_type(static_cast< const std::vector< double >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DoubleVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_pop_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  result = std_vector_Sl_double_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
    }
  }
  result = std_vector_Sl_double_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_DoubleVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_DoubleVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::erase(std::vector< double >::iterator)\n"
    "    std::vector< double >::erase(std::vector< double >::iterator,std::vector< double >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  std::vector< double >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DoubleVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DoubleVector" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DoubleVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DoubleVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DoubleVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector()\n"
    "    std::vector< double >::vector(std::vector< double > const &)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_push_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_push_back" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_front" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->front();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_back" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->back();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_assign" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_assign" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_assign" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_resize" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DoubleVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::resize(std::vector< double >::size_type)\n"
    "    std::vector< double >::resize(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_insert" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  result = std_vector_Sl_double_Sg__insert__SWIG_0(arg1,arg2,(double const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::size_type arg3 ;
  std::vector< double >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< double >::value_type temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DoubleVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_insert" "', argument " "3"" of type '" "std::vector< double >::size_type""'");
  } 
  arg3 = static_cast< std::vector< double >::size_type >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DoubleVector_insert" "', argument " "4"" of type '" "std::vector< double >::value_type""'");
  } 
  temp4 = static_cast< std::vector< double >::value_type >(val4);
  arg4 = &temp4;
  std_vector_Sl_double_Sg__insert__SWIG_1(arg1,arg2,arg3,(double const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DoubleVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::value_type const &)\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_reserve" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_reserve" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_capacity" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DoubleVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DoubleVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoubleVector" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DoubleVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_NUM_FIELD_COMPONENTS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable NUM_FIELD_COMPONENTS is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_NUM_FIELD_COMPONENTS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(meep::NUM_FIELD_COMPONENTS));
  return pyobj;
}


SWIGINTERN int Swig_var_NUM_FIELD_TYPES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable NUM_FIELD_TYPES is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_NUM_FIELD_TYPES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(meep::NUM_FIELD_TYPES));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_signed_direction__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::direction arg1 ;
  bool arg2 ;
  std::complex< double > arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  std::complex< double > val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::signed_direction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_signed_direction",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_signed_direction" "', argument " "1"" of type '" "meep::direction""'");
  } 
  arg1 = static_cast< meep::direction >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_signed_direction" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_signed_direction" "', argument " "3"" of type '" "std::complex< double >""'");
  } 
  arg3 = static_cast< std::complex< double > >(val3);
  result = (meep::signed_direction *)new meep::signed_direction(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__signed_direction, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_signed_direction__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::direction arg1 ;
  bool arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::signed_direction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_signed_direction",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_signed_direction" "', argument " "1"" of type '" "meep::direction""'");
  } 
  arg1 = static_cast< meep::direction >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_signed_direction" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (meep::signed_direction *)new meep::signed_direction(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__signed_direction, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_signed_direction__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::direction arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::signed_direction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_signed_direction",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_signed_direction" "', argument " "1"" of type '" "meep::direction""'");
  } 
  arg1 = static_cast< meep::direction >(val1);
  result = (meep::signed_direction *)new meep::signed_direction(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__signed_direction, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_signed_direction__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::signed_direction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_signed_direction")) SWIG_fail;
  result = (meep::signed_direction *)new meep::signed_direction();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__signed_direction, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_signed_direction__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::signed_direction *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::signed_direction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_signed_direction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__signed_direction,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_signed_direction" "', argument " "1"" of type '" "meep::signed_direction const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_signed_direction" "', argument " "1"" of type '" "meep::signed_direction const &""'"); 
  }
  arg1 = reinterpret_cast< meep::signed_direction * >(argp1);
  result = (meep::signed_direction *)new meep::signed_direction((meep::signed_direction const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__signed_direction, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_signed_direction(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_signed_direction__SWIG_3(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__signed_direction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_signed_direction__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_signed_direction__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_signed_direction__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_signed_direction__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_signed_direction'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::signed_direction::signed_direction(meep::direction,bool,std::complex< double >)\n"
    "    meep::signed_direction::signed_direction(meep::direction,bool)\n"
    "    meep::signed_direction::signed_direction(meep::direction)\n"
    "    meep::signed_direction::signed_direction()\n"
    "    meep::signed_direction::signed_direction(meep::signed_direction const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_signed_direction___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::signed_direction *arg1 = (meep::signed_direction *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::signed_direction result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:signed_direction___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__signed_direction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "signed_direction___mul__" "', argument " "1"" of type '" "meep::signed_direction *""'"); 
  }
  arg1 = reinterpret_cast< meep::signed_direction * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "signed_direction___mul__" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  result = (arg1)->operator *(arg2);
  resultobj = SWIG_NewPointerObj((new meep::signed_direction(static_cast< const meep::signed_direction& >(result))), SWIGTYPE_p_meep__signed_direction, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_signed_direction___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::signed_direction *arg1 = (meep::signed_direction *) 0 ;
  meep::signed_direction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:signed_direction___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__signed_direction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "signed_direction___eq__" "', argument " "1"" of type '" "meep::signed_direction const *""'"); 
  }
  arg1 = reinterpret_cast< meep::signed_direction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__signed_direction,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "signed_direction___eq__" "', argument " "2"" of type '" "meep::signed_direction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "signed_direction___eq__" "', argument " "2"" of type '" "meep::signed_direction const &""'"); 
  }
  arg2 = reinterpret_cast< meep::signed_direction * >(argp2);
  result = (bool)((meep::signed_direction const *)arg1)->operator ==((meep::signed_direction const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_signed_direction___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::signed_direction *arg1 = (meep::signed_direction *) 0 ;
  meep::signed_direction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:signed_direction___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__signed_direction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "signed_direction___ne__" "', argument " "1"" of type '" "meep::signed_direction const *""'"); 
  }
  arg1 = reinterpret_cast< meep::signed_direction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__signed_direction,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "signed_direction___ne__" "', argument " "2"" of type '" "meep::signed_direction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "signed_direction___ne__" "', argument " "2"" of type '" "meep::signed_direction const &""'"); 
  }
  arg2 = reinterpret_cast< meep::signed_direction * >(argp2);
  result = (bool)((meep::signed_direction const *)arg1)->operator !=((meep::signed_direction const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_signed_direction_d_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::signed_direction *arg1 = (meep::signed_direction *) 0 ;
  meep::direction arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:signed_direction_d_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__signed_direction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "signed_direction_d_set" "', argument " "1"" of type '" "meep::signed_direction *""'"); 
  }
  arg1 = reinterpret_cast< meep::signed_direction * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "signed_direction_d_set" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  if (arg1) (arg1)->d = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_signed_direction_d_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::signed_direction *arg1 = (meep::signed_direction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::direction result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:signed_direction_d_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__signed_direction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "signed_direction_d_get" "', argument " "1"" of type '" "meep::signed_direction *""'"); 
  }
  arg1 = reinterpret_cast< meep::signed_direction * >(argp1);
  result = (meep::direction) ((arg1)->d);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_signed_direction_flipped_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::signed_direction *arg1 = (meep::signed_direction *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:signed_direction_flipped_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__signed_direction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "signed_direction_flipped_set" "', argument " "1"" of type '" "meep::signed_direction *""'"); 
  }
  arg1 = reinterpret_cast< meep::signed_direction * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "signed_direction_flipped_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->flipped = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_signed_direction_flipped_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::signed_direction *arg1 = (meep::signed_direction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:signed_direction_flipped_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__signed_direction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "signed_direction_flipped_get" "', argument " "1"" of type '" "meep::signed_direction *""'"); 
  }
  arg1 = reinterpret_cast< meep::signed_direction * >(argp1);
  result = (bool) ((arg1)->flipped);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_signed_direction_phase_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::signed_direction *arg1 = (meep::signed_direction *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:signed_direction_phase_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__signed_direction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "signed_direction_phase_set" "', argument " "1"" of type '" "meep::signed_direction *""'"); 
  }
  arg1 = reinterpret_cast< meep::signed_direction * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "signed_direction_phase_set" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  if (arg1) (arg1)->phase = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_signed_direction_phase_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::signed_direction *arg1 = (meep::signed_direction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:signed_direction_phase_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__signed_direction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "signed_direction_phase_get" "', argument " "1"" of type '" "meep::signed_direction *""'"); 
  }
  arg1 = reinterpret_cast< meep::signed_direction * >(argp1);
  result =  ((arg1)->phase);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_signed_direction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::signed_direction *arg1 = (meep::signed_direction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_signed_direction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__signed_direction, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_signed_direction" "', argument " "1"" of type '" "meep::signed_direction *""'"); 
  }
  arg1 = reinterpret_cast< meep::signed_direction * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *signed_direction_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__signed_direction, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_number_of_directions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ndim arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:number_of_directions",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "number_of_directions" "', argument " "1"" of type '" "meep::ndim""'");
  } 
  arg1 = static_cast< meep::ndim >(val1);
  result = (int)meep::number_of_directions(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_start_at_direction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ndim arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::direction result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:start_at_direction",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "start_at_direction" "', argument " "1"" of type '" "meep::ndim""'");
  } 
  arg1 = static_cast< meep::ndim >(val1);
  result = (meep::direction)meep::start_at_direction(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_stop_at_direction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ndim arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::direction result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:stop_at_direction",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "stop_at_direction" "', argument " "1"" of type '" "meep::ndim""'");
  } 
  arg1 = static_cast< meep::ndim >(val1);
  result = (meep::direction)meep::stop_at_direction(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_first_field_component(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::field_type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::component result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:first_field_component",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "first_field_component" "', argument " "1"" of type '" "meep::field_type""'");
  } 
  arg1 = static_cast< meep::field_type >(val1);
  result = (meep::component)meep::first_field_component(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flip(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::signed_direction arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::signed_direction result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:flip",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__signed_direction,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flip" "', argument " "1"" of type '" "meep::signed_direction""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "flip" "', argument " "1"" of type '" "meep::signed_direction""'");
    } else {
      meep::signed_direction * temp = reinterpret_cast< meep::signed_direction * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = meep::flip(arg1);
  resultobj = SWIG_NewPointerObj((new meep::signed_direction(static_cast< const meep::signed_direction& >(result))), SWIGTYPE_p_meep__signed_direction, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_has_direction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ndim arg1 ;
  meep::direction arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:has_direction",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "has_direction" "', argument " "1"" of type '" "meep::ndim""'");
  } 
  arg1 = static_cast< meep::ndim >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "has_direction" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  result = (bool)meep::has_direction(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_has_field_direction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ndim arg1 ;
  meep::direction arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:has_field_direction",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "has_field_direction" "', argument " "1"" of type '" "meep::ndim""'");
  } 
  arg1 = static_cast< meep::ndim >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "has_field_direction" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  result = (bool)meep::has_field_direction(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_coordinate_mismatch__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ndim arg1 ;
  meep::direction arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:coordinate_mismatch",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "coordinate_mismatch" "', argument " "1"" of type '" "meep::ndim""'");
  } 
  arg1 = static_cast< meep::ndim >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "coordinate_mismatch" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  result = (bool)meep::coordinate_mismatch(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_tm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::component arg1 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:is_tm",&obj0)) SWIG_fail;
  {
    arg1 = static_cast<meep::component>(PyInteger_AsLong(obj0));
  }
  result = (bool)meep::is_tm(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_abort__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:abort",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "abort" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  meep::abort((char const *)arg1,arg2);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_abort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,1);
  varargs = PyTuple_GetSlice(args,1,PyTuple_Size(args));
  resultobj = _wrap_abort__varargs__(NULL,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_is_electric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::component arg1 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:is_electric",&obj0)) SWIG_fail;
  {
    arg1 = static_cast<meep::component>(PyInteger_AsLong(obj0));
  }
  result = (bool)meep::is_electric(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_magnetic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::component arg1 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:is_magnetic",&obj0)) SWIG_fail;
  {
    arg1 = static_cast<meep::component>(PyInteger_AsLong(obj0));
  }
  result = (bool)meep::is_magnetic(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::component arg1 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:is_D",&obj0)) SWIG_fail;
  {
    arg1 = static_cast<meep::component>(PyInteger_AsLong(obj0));
  }
  result = (bool)meep::is_D(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_B(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::component arg1 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:is_B",&obj0)) SWIG_fail;
  {
    arg1 = static_cast<meep::component>(PyInteger_AsLong(obj0));
  }
  result = (bool)meep::is_B(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_derived(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:is_derived",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "is_derived" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (bool)meep::is_derived(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_poynting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::derived_component arg1 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:is_poynting",&obj0)) SWIG_fail;
  {
    arg1 = static_cast<meep::derived_component>(PyInteger_AsLong(obj0));
  }
  result = (bool)meep::is_poynting(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_energydensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::derived_component arg1 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:is_energydensity",&obj0)) SWIG_fail;
  {
    arg1 = static_cast<meep::derived_component>(PyInteger_AsLong(obj0));
  }
  result = (bool)meep::is_energydensity(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_meep_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::component arg1 ;
  PyObject * obj0 = 0 ;
  meep::field_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:meep_type",&obj0)) SWIG_fail;
  {
    arg1 = static_cast<meep::component>(PyInteger_AsLong(obj0));
  }
  result = (meep::field_type)meep::type(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_component_name__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::component arg1 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:component_name",&obj0)) SWIG_fail;
  {
    arg1 = static_cast<meep::component>(PyInteger_AsLong(obj0));
  }
  result = (char *)meep::component_name(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_component_name__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::derived_component arg1 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:component_name",&obj0)) SWIG_fail;
  {
    arg1 = static_cast<meep::derived_component>(PyInteger_AsLong(obj0));
  }
  result = (char *)meep::component_name(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_component_name__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:component_name",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "component_name" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (char *)meep::component_name(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_component_name(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      _v = PyInteger_Check(argv[0]) && PyInteger_AsLong(argv[0]) < 100;
    }
    if (_v) {
      return _wrap_component_name__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = PyInteger_Check(argv[0]) && PyInteger_AsLong(argv[0]) >= 100;
    }
    if (_v) {
      return _wrap_component_name__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_component_name__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'component_name'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::component_name(meep::component)\n"
    "    meep::component_name(meep::derived_component)\n"
    "    meep::component_name(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_direction_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::direction arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:direction_name",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "direction_name" "', argument " "1"" of type '" "meep::direction""'");
  } 
  arg1 = static_cast< meep::direction >(val1);
  result = (char *)meep::direction_name(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dimension_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ndim arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dimension_name",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "dimension_name" "', argument " "1"" of type '" "meep::ndim""'");
  } 
  arg1 = static_cast< meep::ndim >(val1);
  result = (char *)meep::dimension_name(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_component_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::component arg1 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:component_index",&obj0)) SWIG_fail;
  {
    arg1 = static_cast<meep::component>(PyInteger_AsLong(obj0));
  }
  result = (int)meep::component_index(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_component_direction__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::direction result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:component_direction",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "component_direction" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (meep::direction)meep::component_direction(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_direction_component__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  meep::direction arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:direction_component",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "direction_component" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "direction_component" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  result = (int)meep::direction_component(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_component_direction__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::component arg1 ;
  PyObject * obj0 = 0 ;
  meep::direction result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:component_direction",&obj0)) SWIG_fail;
  {
    arg1 = static_cast<meep::component>(PyInteger_AsLong(obj0));
  }
  result = (meep::direction)meep::component_direction(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_component_direction__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::derived_component arg1 ;
  PyObject * obj0 = 0 ;
  meep::direction result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:component_direction",&obj0)) SWIG_fail;
  {
    arg1 = static_cast<meep::derived_component>(PyInteger_AsLong(obj0));
  }
  result = (meep::direction)meep::component_direction(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_component_direction(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      _v = PyInteger_Check(argv[0]) && PyInteger_AsLong(argv[0]) < 100;
    }
    if (_v) {
      return _wrap_component_direction__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = PyInteger_Check(argv[0]) && PyInteger_AsLong(argv[0]) >= 100;
    }
    if (_v) {
      return _wrap_component_direction__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_component_direction__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'component_direction'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::component_direction(int)\n"
    "    meep::component_direction(meep::component)\n"
    "    meep::component_direction(meep::derived_component)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_direction_component__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::component arg1 ;
  meep::direction arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::component result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:direction_component",&obj0,&obj1)) SWIG_fail;
  {
    arg1 = static_cast<meep::component>(PyInteger_AsLong(obj0));
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "direction_component" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  result = (meep::component)meep::direction_component(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_direction_component__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::derived_component arg1 ;
  meep::direction arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::derived_component result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:direction_component",&obj0,&obj1)) SWIG_fail;
  {
    arg1 = static_cast<meep::derived_component>(PyInteger_AsLong(obj0));
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "direction_component" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  result = (meep::derived_component)meep::direction_component(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_direction_component(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = PyInteger_Check(argv[0]) && PyInteger_AsLong(argv[0]) < 100;
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_direction_component__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = PyInteger_Check(argv[0]) && PyInteger_AsLong(argv[0]) >= 100;
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_direction_component__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_direction_component__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'direction_component'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::direction_component(int,meep::direction)\n"
    "    meep::direction_component(meep::component,meep::direction)\n"
    "    meep::direction_component(meep::derived_component,meep::direction)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_field_type_component(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::field_type arg1 ;
  meep::component arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::component result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:field_type_component",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "field_type_component" "', argument " "1"" of type '" "meep::field_type""'");
  } 
  arg1 = static_cast< meep::field_type >(val1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  result = (meep::component)meep::field_type_component(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_coordinate_mismatch__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ndim arg1 ;
  meep::component arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:coordinate_mismatch",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "coordinate_mismatch" "', argument " "1"" of type '" "meep::ndim""'");
  } 
  arg1 = static_cast< meep::ndim >(val1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  result = (bool)meep::coordinate_mismatch(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_coordinate_mismatch__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ndim arg1 ;
  meep::derived_component arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:coordinate_mismatch",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "coordinate_mismatch" "', argument " "1"" of type '" "meep::ndim""'");
  } 
  arg1 = static_cast< meep::ndim >(val1);
  {
    arg2 = static_cast<meep::derived_component>(PyInteger_AsLong(obj1));
  }
  result = (bool)meep::coordinate_mismatch(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_coordinate_mismatch(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        return _wrap_coordinate_mismatch__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) >= 100;
      }
      if (_v) {
        return _wrap_coordinate_mismatch__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_coordinate_mismatch__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'coordinate_mismatch'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::coordinate_mismatch(meep::ndim,meep::direction)\n"
    "    meep::coordinate_mismatch(meep::ndim,meep::component)\n"
    "    meep::coordinate_mismatch(meep::ndim,meep::derived_component)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_cycle_direction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ndim arg1 ;
  meep::direction arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::direction result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:cycle_direction",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cycle_direction" "', argument " "1"" of type '" "meep::ndim""'");
  } 
  arg1 = static_cast< meep::ndim >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cycle_direction" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cycle_direction" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (meep::direction)meep::cycle_direction(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cycle_component(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ndim arg1 ;
  meep::component arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::component result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:cycle_component",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cycle_component" "', argument " "1"" of type '" "meep::ndim""'");
  } 
  arg1 = static_cast< meep::ndim >(val1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cycle_component" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (meep::component)meep::cycle_component(arg1,arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_veccyl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:veccyl",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "veccyl" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "veccyl" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = meep::veccyl(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_zero_vec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ndim arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:zero_vec",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "zero_vec" "', argument " "1"" of type '" "meep::ndim""'");
  } 
  arg1 = static_cast< meep::ndim >(val1);
  result = meep::zero_vec(arg1);
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vec__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vec")) SWIG_fail;
  result = (meep::vec *)new meep::vec();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__vec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vec__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ndim arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vec",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vec" "', argument " "1"" of type '" "meep::ndim""'");
  } 
  arg1 = static_cast< meep::ndim >(val1);
  result = (meep::vec *)new meep::vec(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__vec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vec_from_dim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ndim arg1 ;
  double arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vec_from_dim",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vec_from_dim" "', argument " "1"" of type '" "meep::ndim""'");
  } 
  arg1 = static_cast< meep::ndim >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vec_from_dim" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (meep::vec *)new meep::vec(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vec__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vec",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vec" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (meep::vec *)new meep::vec(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__vec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vec__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vec",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vec" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vec" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (meep::vec *)new meep::vec(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__vec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vec__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_vec",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vec" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vec" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_vec" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (meep::vec *)new meep::vec(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__vec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vec(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vec__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vec__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vec__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_vec__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_vec__SWIG_4(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vec'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::vec::vec()\n"
    "    meep::vec::vec(meep::ndim)\n"
    "    meep::vec::vec(double)\n"
    "    meep::vec::vec(double,double)\n"
    "    meep::vec::vec(double,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_vec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = (meep::vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__vec, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vec" "', argument " "1"" of type '" "meep::vec *""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = (meep::vec *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__vec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec___add__" "', argument " "1"" of type '" "meep::vec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec___add__" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec___add__" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = ((meep::vec const *)arg1)->operator +((meep::vec const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = (meep::vec *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__vec, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec___iadd__" "', argument " "1"" of type '" "meep::vec *""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec___iadd__" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec___iadd__" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = (arg1)->operator +=((meep::vec const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = (meep::vec *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__vec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec___sub__" "', argument " "1"" of type '" "meep::vec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec___sub__" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec___sub__" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = ((meep::vec const *)arg1)->operator -((meep::vec const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = (meep::vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec___neg__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__vec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec___neg__" "', argument " "1"" of type '" "meep::vec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  result = ((meep::vec const *)arg1)->operator -();
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = (meep::vec *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__vec, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec___isub__" "', argument " "1"" of type '" "meep::vec *""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec___isub__" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec___isub__" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = (arg1)->operator -=((meep::vec const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = (meep::vec *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__vec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec___ne__" "', argument " "1"" of type '" "meep::vec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec___ne__" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec___ne__" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = (bool)((meep::vec const *)arg1)->operator !=((meep::vec const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = (meep::vec *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__vec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec___eq__" "', argument " "1"" of type '" "meep::vec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec___eq__" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec___eq__" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = (bool)((meep::vec const *)arg1)->operator ==((meep::vec const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec_round_float(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = (meep::vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec_round_float",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__vec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec_round_float" "', argument " "1"" of type '" "meep::vec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  result = ((meep::vec const *)arg1)->round_float();
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = (meep::vec *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__vec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec___mul__" "', argument " "1"" of type '" "meep::vec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec___mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((meep::vec const *)arg1)->operator *(arg2);
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec___truediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = (meep::vec *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec___truediv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__vec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec___truediv__" "', argument " "1"" of type '" "meep::vec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec___truediv__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((meep::vec const *)arg1)->operator /(arg2);
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec___and__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = (meep::vec *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec___and__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__vec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec___and__" "', argument " "1"" of type '" "meep::vec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec___and__" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec___and__" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = (double)((meep::vec const *)arg1)->operator &((meep::vec const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec_dim_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = (meep::vec *) 0 ;
  meep::ndim arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec_dim_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__vec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec_dim_set" "', argument " "1"" of type '" "meep::vec *""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec_dim_set" "', argument " "2"" of type '" "meep::ndim""'");
  } 
  arg2 = static_cast< meep::ndim >(val2);
  if (arg1) (arg1)->dim = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec_dim_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = (meep::vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::ndim result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec_dim_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__vec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec_dim_get" "', argument " "1"" of type '" "meep::vec *""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  result = (meep::ndim) ((arg1)->dim);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec_r(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = (meep::vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec_r",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__vec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec_r" "', argument " "1"" of type '" "meep::vec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  result = (double)((meep::vec const *)arg1)->r();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec_x(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = (meep::vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec_x",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__vec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec_x" "', argument " "1"" of type '" "meep::vec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  result = (double)((meep::vec const *)arg1)->x();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec_y(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = (meep::vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec_y",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__vec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec_y" "', argument " "1"" of type '" "meep::vec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  result = (double)((meep::vec const *)arg1)->y();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec_z(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = (meep::vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec_z",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__vec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec_z" "', argument " "1"" of type '" "meep::vec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  result = (double)((meep::vec const *)arg1)->z();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec_in_direction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = (meep::vec *) 0 ;
  meep::direction arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec_in_direction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__vec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec_in_direction" "', argument " "1"" of type '" "meep::vec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec_in_direction" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  result = (double)((meep::vec const *)arg1)->in_direction(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec_set_direction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = (meep::vec *) 0 ;
  meep::direction arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vec_set_direction",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__vec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec_set_direction" "', argument " "1"" of type '" "meep::vec *""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec_set_direction" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vec_set_direction" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->set_direction(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec_project_to_boundary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = (meep::vec *) 0 ;
  meep::direction arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vec_project_to_boundary",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__vec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec_project_to_boundary" "', argument " "1"" of type '" "meep::vec *""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vec_project_to_boundary" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vec_project_to_boundary" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (double)(arg1)->project_to_boundary(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vec_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__vec, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vec_abs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec_abs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec_abs" "', argument " "1"" of type '" "meep::vec const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec_abs" "', argument " "1"" of type '" "meep::vec const &""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  result = (double)meep::abs((meep::vec const &)*arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_one_vec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ndim arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:one_vec",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "one_vec" "', argument " "1"" of type '" "meep::ndim""'");
  } 
  arg1 = static_cast< meep::ndim >(val1);
  result = meep::one_vec(arg1);
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unit_vec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ndim arg1 ;
  meep::direction arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:unit_vec",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "unit_vec" "', argument " "1"" of type '" "meep::ndim""'");
  } 
  arg1 = static_cast< meep::ndim >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unit_vec" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  result = meep::unit_vec(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_clean_vec__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:clean_vec",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clean_vec" "', argument " "1"" of type '" "meep::vec const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "clean_vec" "', argument " "1"" of type '" "meep::vec const &""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "clean_vec" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = meep::clean_vec((meep::vec const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_clean_vec__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:clean_vec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clean_vec" "', argument " "1"" of type '" "meep::vec const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "clean_vec" "', argument " "1"" of type '" "meep::vec const &""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  result = meep::clean_vec((meep::vec const &)*arg1);
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_clean_vec(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__vec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_clean_vec__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__vec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_clean_vec__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'clean_vec'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::clean_vec(meep::vec const &,double)\n"
    "    meep::clean_vec(meep::vec const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_iveccyl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::ivec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:iveccyl",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "iveccyl" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "iveccyl" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = meep::iveccyl(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new meep::ivec(static_cast< const meep::ivec& >(result))), SWIGTYPE_p_meep__ivec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_zero_ivec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ndim arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::ivec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:zero_ivec",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "zero_ivec" "', argument " "1"" of type '" "meep::ndim""'");
  } 
  arg1 = static_cast< meep::ndim >(val1);
  result = meep::zero_ivec(arg1);
  resultobj = SWIG_NewPointerObj((new meep::ivec(static_cast< const meep::ivec& >(result))), SWIGTYPE_p_meep__ivec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_one_ivec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ndim arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::ivec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:one_ivec",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "one_ivec" "', argument " "1"" of type '" "meep::ndim""'");
  } 
  arg1 = static_cast< meep::ndim >(val1);
  result = meep::one_ivec(arg1);
  resultobj = SWIG_NewPointerObj((new meep::ivec(static_cast< const meep::ivec& >(result))), SWIGTYPE_p_meep__ivec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ivec__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ivec")) SWIG_fail;
  result = (meep::ivec *)new meep::ivec();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__ivec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ivec__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ndim arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::ivec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ivec",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ivec" "', argument " "1"" of type '" "meep::ndim""'");
  } 
  arg1 = static_cast< meep::ndim >(val1);
  result = (meep::ivec *)new meep::ivec(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__ivec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ivec__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ndim arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::ivec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ivec",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ivec" "', argument " "1"" of type '" "meep::ndim""'");
  } 
  arg1 = static_cast< meep::ndim >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ivec" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (meep::ivec *)new meep::ivec(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__ivec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ivec__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::ivec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ivec",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ivec" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (meep::ivec *)new meep::ivec(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__ivec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ivec__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::ivec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ivec",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ivec" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ivec" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (meep::ivec *)new meep::ivec(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__ivec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ivec__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::ivec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ivec",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ivec" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ivec" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ivec" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (meep::ivec *)new meep::ivec(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__ivec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ivec(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ivec__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ivec__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ivec__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ivec__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ivec__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ivec__SWIG_5(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ivec'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::ivec::ivec()\n"
    "    meep::ivec::ivec(meep::ndim)\n"
    "    meep::ivec::ivec(meep::ndim,int)\n"
    "    meep::ivec::ivec(int)\n"
    "    meep::ivec::ivec(int,int)\n"
    "    meep::ivec::ivec(int,int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ivec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = (meep::ivec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ivec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__ivec, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ivec" "', argument " "1"" of type '" "meep::ivec *""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivec_yucky_val(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = (meep::ivec *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivec_yucky_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivec_yucky_val" "', argument " "1"" of type '" "meep::ivec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ivec_yucky_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)((meep::ivec const *)arg1)->yucky_val(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivec___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = (meep::ivec *) 0 ;
  meep::ivec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::ivec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivec___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivec___add__" "', argument " "1"" of type '" "meep::ivec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ivec___add__" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ivec___add__" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::ivec * >(argp2);
  result = ((meep::ivec const *)arg1)->operator +((meep::ivec const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::ivec(static_cast< const meep::ivec& >(result))), SWIGTYPE_p_meep__ivec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivec___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = (meep::ivec *) 0 ;
  meep::ivec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::ivec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivec___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__ivec, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivec___iadd__" "', argument " "1"" of type '" "meep::ivec *""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ivec___iadd__" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ivec___iadd__" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::ivec * >(argp2);
  result = (arg1)->operator +=((meep::ivec const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::ivec(static_cast< const meep::ivec& >(result))), SWIGTYPE_p_meep__ivec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivec___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = (meep::ivec *) 0 ;
  meep::ivec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::ivec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivec___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivec___sub__" "', argument " "1"" of type '" "meep::ivec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ivec___sub__" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ivec___sub__" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::ivec * >(argp2);
  result = ((meep::ivec const *)arg1)->operator -((meep::ivec const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::ivec(static_cast< const meep::ivec& >(result))), SWIGTYPE_p_meep__ivec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivec___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = (meep::ivec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::ivec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ivec___neg__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivec___neg__" "', argument " "1"" of type '" "meep::ivec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  result = ((meep::ivec const *)arg1)->operator -();
  resultobj = SWIG_NewPointerObj((new meep::ivec(static_cast< const meep::ivec& >(result))), SWIGTYPE_p_meep__ivec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivec___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = (meep::ivec *) 0 ;
  meep::ivec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::ivec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivec___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__ivec, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivec___isub__" "', argument " "1"" of type '" "meep::ivec *""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ivec___isub__" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ivec___isub__" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::ivec * >(argp2);
  result = (arg1)->operator -=((meep::ivec const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::ivec(static_cast< const meep::ivec& >(result))), SWIGTYPE_p_meep__ivec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivec___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = (meep::ivec *) 0 ;
  meep::ivec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivec___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivec___ne__" "', argument " "1"" of type '" "meep::ivec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ivec___ne__" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ivec___ne__" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::ivec * >(argp2);
  result = (bool)((meep::ivec const *)arg1)->operator !=((meep::ivec const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivec___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = (meep::ivec *) 0 ;
  meep::ivec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivec___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivec___eq__" "', argument " "1"" of type '" "meep::ivec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ivec___eq__" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ivec___eq__" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::ivec * >(argp2);
  result = (bool)((meep::ivec const *)arg1)->operator ==((meep::ivec const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivec___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = (meep::ivec *) 0 ;
  meep::ivec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivec___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivec___le__" "', argument " "1"" of type '" "meep::ivec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ivec___le__" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ivec___le__" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::ivec * >(argp2);
  result = (bool)((meep::ivec const *)arg1)->operator <=((meep::ivec const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivec___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = (meep::ivec *) 0 ;
  meep::ivec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivec___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivec___ge__" "', argument " "1"" of type '" "meep::ivec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ivec___ge__" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ivec___ge__" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::ivec * >(argp2);
  result = (bool)((meep::ivec const *)arg1)->operator >=((meep::ivec const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivec___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = (meep::ivec *) 0 ;
  meep::ivec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivec___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivec___lt__" "', argument " "1"" of type '" "meep::ivec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ivec___lt__" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ivec___lt__" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::ivec * >(argp2);
  result = (bool)((meep::ivec const *)arg1)->operator <((meep::ivec const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivec___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = (meep::ivec *) 0 ;
  meep::ivec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivec___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivec___gt__" "', argument " "1"" of type '" "meep::ivec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ivec___gt__" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ivec___gt__" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::ivec * >(argp2);
  result = (bool)((meep::ivec const *)arg1)->operator >((meep::ivec const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivec___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = (meep::ivec *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::ivec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivec___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivec___mul__" "', argument " "1"" of type '" "meep::ivec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ivec___mul__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((meep::ivec const *)arg1)->operator *(arg2);
  resultobj = SWIG_NewPointerObj((new meep::ivec(static_cast< const meep::ivec& >(result))), SWIGTYPE_p_meep__ivec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivec___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = (meep::ivec *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivec___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivec___mul__" "', argument " "1"" of type '" "meep::ivec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ivec___mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((meep::ivec const *)arg1)->operator *(arg2);
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivec___mul__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__ivec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ivec___mul____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__ivec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ivec___mul____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ivec_dim_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = (meep::ivec *) 0 ;
  meep::ndim arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivec_dim_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivec_dim_set" "', argument " "1"" of type '" "meep::ivec *""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ivec_dim_set" "', argument " "2"" of type '" "meep::ndim""'");
  } 
  arg2 = static_cast< meep::ndim >(val2);
  if (arg1) (arg1)->dim = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivec_dim_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = (meep::ivec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::ndim result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ivec_dim_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivec_dim_get" "', argument " "1"" of type '" "meep::ivec *""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  result = (meep::ndim) ((arg1)->dim);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivec_r(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = (meep::ivec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ivec_r",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivec_r" "', argument " "1"" of type '" "meep::ivec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  result = (int)((meep::ivec const *)arg1)->r();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivec_x(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = (meep::ivec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ivec_x",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivec_x" "', argument " "1"" of type '" "meep::ivec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  result = (int)((meep::ivec const *)arg1)->x();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivec_y(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = (meep::ivec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ivec_y",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivec_y" "', argument " "1"" of type '" "meep::ivec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  result = (int)((meep::ivec const *)arg1)->y();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivec_z(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = (meep::ivec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ivec_z",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivec_z" "', argument " "1"" of type '" "meep::ivec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  result = (int)((meep::ivec const *)arg1)->z();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivec_in_direction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = (meep::ivec *) 0 ;
  meep::direction arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ivec_in_direction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivec_in_direction" "', argument " "1"" of type '" "meep::ivec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ivec_in_direction" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  result = (int)((meep::ivec const *)arg1)->in_direction(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivec_set_direction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = (meep::ivec *) 0 ;
  meep::direction arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ivec_set_direction",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivec_set_direction" "', argument " "1"" of type '" "meep::ivec *""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ivec_set_direction" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ivec_set_direction" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->set_direction(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ivec_round_up_to_even(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = (meep::ivec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::ivec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ivec_round_up_to_even",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ivec_round_up_to_even" "', argument " "1"" of type '" "meep::ivec const *""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  result = ((meep::ivec const *)arg1)->round_up_to_even();
  resultobj = SWIG_NewPointerObj((new meep::ivec(static_cast< const meep::ivec& >(result))), SWIGTYPE_p_meep__ivec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ivec_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__ivec, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_unit_ivec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ndim arg1 ;
  meep::direction arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::ivec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:unit_ivec",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "unit_ivec" "', argument " "1"" of type '" "meep::ndim""'");
  } 
  arg1 = static_cast< meep::ndim >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unit_ivec" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  result = meep::unit_ivec(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new meep::ivec(static_cast< const meep::ivec& >(result))), SWIGTYPE_p_meep__ivec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec_max__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec_max",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec_max" "', argument " "1"" of type '" "meep::vec const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec_max" "', argument " "1"" of type '" "meep::vec const &""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec_max" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec_max" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = meep::max((meep::vec const &)*arg1,(meep::vec const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec_min__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec_min",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec_min" "', argument " "1"" of type '" "meep::vec const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec_min" "', argument " "1"" of type '" "meep::vec const &""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec_min" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec_min" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = meep::min((meep::vec const &)*arg1,(meep::vec const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec_max__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = 0 ;
  meep::ivec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::ivec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec_max",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec_max" "', argument " "1"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec_max" "', argument " "1"" of type '" "meep::ivec const &""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec_max" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec_max" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::ivec * >(argp2);
  result = meep::max((meep::ivec const &)*arg1,(meep::ivec const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::ivec(static_cast< const meep::ivec& >(result))), SWIGTYPE_p_meep__ivec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec_max(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__vec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__vec, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_vec_max__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__ivec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__ivec, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_vec_max__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vec_max'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::max(meep::vec const &,meep::vec const &)\n"
    "    meep::max(meep::ivec const &,meep::ivec const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vec_min__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = 0 ;
  meep::ivec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::ivec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vec_min",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec_min" "', argument " "1"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec_min" "', argument " "1"" of type '" "meep::ivec const &""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vec_min" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec_min" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::ivec * >(argp2);
  result = meep::min((meep::ivec const &)*arg1,(meep::ivec const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::ivec(static_cast< const meep::ivec& >(result))), SWIGTYPE_p_meep__ivec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec_min(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__vec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__vec, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_vec_min__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__ivec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__ivec, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_vec_min__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vec_min'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::min(meep::vec const &,meep::vec const &)\n"
    "    meep::min(meep::ivec const &,meep::ivec const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_max_to_all__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ivec *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::ivec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:max_to_all",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "max_to_all" "', argument " "1"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "max_to_all" "', argument " "1"" of type '" "meep::ivec const &""'"); 
  }
  arg1 = reinterpret_cast< meep::ivec * >(argp1);
  result = meep::max_to_all((meep::ivec const &)*arg1);
  resultobj = SWIG_NewPointerObj((new meep::ivec(static_cast< const meep::ivec& >(result))), SWIGTYPE_p_meep__ivec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_dim_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  meep::ndim arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:volume_dim_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_dim_set" "', argument " "1"" of type '" "meep::volume *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "volume_dim_set" "', argument " "2"" of type '" "meep::ndim""'");
  } 
  arg2 = static_cast< meep::ndim >(val2);
  if (arg1) (arg1)->dim = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_dim_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::ndim result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:volume_dim_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_dim_get" "', argument " "1"" of type '" "meep::volume *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  result = (meep::ndim) ((arg1)->dim);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_volume__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::ndim arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::volume *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_volume",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_volume" "', argument " "1"" of type '" "meep::ndim""'");
  } 
  arg1 = static_cast< meep::ndim >(val1);
  result = (meep::volume *)new meep::volume(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__volume, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_volume__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::volume *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_volume",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_volume" "', argument " "1"" of type '" "meep::vec const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_volume" "', argument " "1"" of type '" "meep::vec const &""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_volume" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_volume" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = (meep::volume *)new meep::volume((meep::vec const &)*arg1,(meep::vec const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__volume, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_volume__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::volume *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_volume",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_volume" "', argument " "1"" of type '" "meep::vec const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_volume" "', argument " "1"" of type '" "meep::vec const &""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  result = (meep::volume *)new meep::volume((meep::vec const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__volume, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_volume__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::volume *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_volume",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_volume" "', argument " "1"" of type '" "meep::volume const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_volume" "', argument " "1"" of type '" "meep::volume const &""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  result = (meep::volume *)new meep::volume((meep::volume const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__volume, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_volume(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__vec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_volume__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_volume__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_volume__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__vec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__vec, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_volume__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_volume'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::volume::volume(meep::ndim)\n"
    "    meep::volume::volume(meep::vec const &,meep::vec const &)\n"
    "    meep::volume::volume(meep::vec const &)\n"
    "    meep::volume::volume(meep::volume const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_volume_set_direction_min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  meep::direction arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:volume_set_direction_min",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_set_direction_min" "', argument " "1"" of type '" "meep::volume *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "volume_set_direction_min" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "volume_set_direction_min" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->set_direction_min(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_set_direction_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  meep::direction arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:volume_set_direction_max",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_set_direction_max" "', argument " "1"" of type '" "meep::volume *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "volume_set_direction_max" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "volume_set_direction_max" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->set_direction_max(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_in_direction_min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  meep::direction arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:volume_in_direction_min",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_in_direction_min" "', argument " "1"" of type '" "meep::volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "volume_in_direction_min" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  result = (double)((meep::volume const *)arg1)->in_direction_min(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_in_direction_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  meep::direction arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:volume_in_direction_max",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_in_direction_max" "', argument " "1"" of type '" "meep::volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "volume_in_direction_max" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  result = (double)((meep::volume const *)arg1)->in_direction_max(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_in_direction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  meep::direction arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:volume_in_direction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_in_direction" "', argument " "1"" of type '" "meep::volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "volume_in_direction" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  result = (double)((meep::volume const *)arg1)->in_direction(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_computational_volume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:volume_computational_volume",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_computational_volume" "', argument " "1"" of type '" "meep::volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  result = (double)((meep::volume const *)arg1)->computational_volume();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_integral_volume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:volume_integral_volume",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_integral_volume" "', argument " "1"" of type '" "meep::volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  result = (double)((meep::volume const *)arg1)->integral_volume();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_full_volume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:volume_full_volume",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_full_volume" "', argument " "1"" of type '" "meep::volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  result = (double)((meep::volume const *)arg1)->full_volume();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_center(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:volume_center",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_center" "', argument " "1"" of type '" "meep::volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  result = ((meep::volume const *)arg1)->center();
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_diameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:volume_diameter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_diameter" "', argument " "1"" of type '" "meep::volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  result = (double)((meep::volume const *)arg1)->diameter();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_contains__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:volume_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_contains" "', argument " "1"" of type '" "meep::volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "volume_contains" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "volume_contains" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = (bool)((meep::volume const *)arg1)->contains((meep::vec const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_contains__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  meep::volume *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:volume_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_contains" "', argument " "1"" of type '" "meep::volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "volume_contains" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "volume_contains" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  result = (bool)((meep::volume const *)arg1)->contains((meep::volume const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_contains(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__vec, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_volume_contains__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__volume, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_volume_contains__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'volume_contains'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::volume::contains(meep::vec const &) const\n"
    "    meep::volume::contains(meep::volume const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_volume_intersect_with(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  meep::volume *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< meep::volume > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:volume_intersect_with",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_intersect_with" "', argument " "1"" of type '" "meep::volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "volume_intersect_with" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "volume_intersect_with" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  result = ((meep::volume const *)arg1)->intersect_with((meep::volume const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::volume(static_cast< const meep::volume& >(result))), SWIGTYPE_p_meep__volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume___and__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  meep::volume *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< meep::volume > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:volume___and__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume___and__" "', argument " "1"" of type '" "meep::volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "volume___and__" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "volume___and__" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  result = ((meep::volume const *)arg1)->operator &((meep::volume const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::volume(static_cast< const meep::volume& >(result))), SWIGTYPE_p_meep__volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume___or__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  meep::volume *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< meep::volume > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:volume___or__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume___or__" "', argument " "1"" of type '" "meep::volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "volume___or__" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "volume___or__" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  result = ((meep::volume const *)arg1)->operator |((meep::volume const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::volume(static_cast< const meep::volume& >(result))), SWIGTYPE_p_meep__volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< meep::volume > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:volume___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume___add__" "', argument " "1"" of type '" "meep::volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "volume___add__" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "volume___add__" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = ((meep::volume const *)arg1)->operator +((meep::vec const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::volume(static_cast< const meep::volume& >(result))), SWIGTYPE_p_meep__volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< meep::volume > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:volume___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume___iadd__" "', argument " "1"" of type '" "meep::volume *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "volume___iadd__" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "volume___iadd__" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = (arg1)->operator +=((meep::vec const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::volume(static_cast< const meep::volume& >(result))), SWIGTYPE_p_meep__volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< meep::volume > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:volume___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume___sub__" "', argument " "1"" of type '" "meep::volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "volume___sub__" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "volume___sub__" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = ((meep::volume const *)arg1)->operator -((meep::vec const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::volume(static_cast< const meep::volume& >(result))), SWIGTYPE_p_meep__volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< meep::volume > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:volume___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume___isub__" "', argument " "1"" of type '" "meep::volume *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "volume___isub__" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "volume___isub__" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = (arg1)->operator -=((meep::vec const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::volume(static_cast< const meep::volume& >(result))), SWIGTYPE_p_meep__volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  meep::volume *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:volume___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume___eq__" "', argument " "1"" of type '" "meep::volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "volume___eq__" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "volume___eq__" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  result = (bool)((meep::volume const *)arg1)->operator ==((meep::volume const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  meep::volume *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:volume___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume___ne__" "', argument " "1"" of type '" "meep::volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "volume___ne__" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "volume___ne__" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  result = (bool)((meep::volume const *)arg1)->operator !=((meep::volume const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_round_float(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< meep::volume > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:volume_round_float",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_round_float" "', argument " "1"" of type '" "meep::volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  result = ((meep::volume const *)arg1)->round_float();
  resultobj = SWIG_NewPointerObj((new meep::volume(static_cast< const meep::volume& >(result))), SWIGTYPE_p_meep__volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_intersects(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  meep::volume *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:volume_intersects",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_intersects" "', argument " "1"" of type '" "meep::volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "volume_intersects" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "volume_intersects" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  result = (bool)((meep::volume const *)arg1)->intersects((meep::volume const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  meep::volume *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:volume___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume___contains__" "', argument " "1"" of type '" "meep::volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "volume___contains__" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "volume___contains__" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  result = (bool)((meep::volume const *)arg1)->operator &&((meep::volume const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_get_min_corner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:volume_get_min_corner",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_get_min_corner" "', argument " "1"" of type '" "meep::volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  result = ((meep::volume const *)arg1)->get_min_corner();
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_get_max_corner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:volume_get_max_corner",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_get_max_corner" "', argument " "1"" of type '" "meep::volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  result = ((meep::volume const *)arg1)->get_max_corner();
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_normal_direction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::direction result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:volume_normal_direction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_normal_direction" "', argument " "1"" of type '" "meep::volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  result = (meep::direction)((meep::volume const *)arg1)->normal_direction();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_volume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = (meep::volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_volume",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_volume" "', argument " "1"" of type '" "meep::volume *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *volume_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__volume, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_volcyl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::grid_volume result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:volcyl",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "volcyl" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "volcyl" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "volcyl" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = meep::volcyl(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new meep::grid_volume(static_cast< const meep::grid_volume& >(result))), SWIGTYPE_p_meep__grid_volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::grid_volume result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:volone",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "volone" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "volone" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = meep::volone(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new meep::grid_volume(static_cast< const meep::grid_volume& >(result))), SWIGTYPE_p_meep__grid_volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vol1d(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::grid_volume result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vol1d",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "vol1d" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vol1d" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = meep::vol1d(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new meep::grid_volume(static_cast< const meep::grid_volume& >(result))), SWIGTYPE_p_meep__grid_volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_voltwo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::grid_volume result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:voltwo",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "voltwo" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "voltwo" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "voltwo" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = meep::voltwo(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new meep::grid_volume(static_cast< const meep::grid_volume& >(result))), SWIGTYPE_p_meep__grid_volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vol2d(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::grid_volume result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vol2d",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "vol2d" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vol2d" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vol2d" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = meep::vol2d(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new meep::grid_volume(static_cast< const meep::grid_volume& >(result))), SWIGTYPE_p_meep__grid_volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vol3d(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  meep::grid_volume result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vol3d",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "vol3d" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vol3d" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vol3d" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "vol3d" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = meep::vol3d(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new meep::grid_volume(static_cast< const meep::grid_volume& >(result))), SWIGTYPE_p_meep__grid_volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_grid_volume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_grid_volume")) SWIG_fail;
  result = (meep::grid_volume *)new meep::grid_volume();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__grid_volume, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_dim_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::ndim arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_dim_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_dim_set" "', argument " "1"" of type '" "meep::grid_volume *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_dim_set" "', argument " "2"" of type '" "meep::ndim""'");
  } 
  arg2 = static_cast< meep::ndim >(val2);
  if (arg1) (arg1)->dim = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_dim_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::ndim result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_dim_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_dim_get" "', argument " "1"" of type '" "meep::grid_volume *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = (meep::ndim) ((arg1)->dim);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_a_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_a_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_a_set" "', argument " "1"" of type '" "meep::grid_volume *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_a_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->a = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_a_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_a_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_a_get" "', argument " "1"" of type '" "meep::grid_volume *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = (double) ((arg1)->a);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_inva_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_inva_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_inva_set" "', argument " "1"" of type '" "meep::grid_volume *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_inva_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->inva = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_inva_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_inva_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_inva_get" "', argument " "1"" of type '" "meep::grid_volume *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = (double) ((arg1)->inva);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_print_grid_volume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_print_grid_volume",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_print_grid_volume" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ((meep::grid_volume const *)arg1)->print();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_stride(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::direction arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_stride",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_stride" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_stride" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  result = ((meep::grid_volume const *)arg1)->stride(arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_num_direction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::direction arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_num_direction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_num_direction" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_num_direction" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  result = (int)((meep::grid_volume const *)arg1)->num_direction(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_yucky_num(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_yucky_num",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_yucky_num" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_yucky_num" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)((meep::grid_volume const *)arg1)->yucky_num(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_yucky_direction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::direction result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_yucky_direction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_yucky_direction" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_yucky_direction" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (meep::direction)((meep::grid_volume const *)arg1)->yucky_direction(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_set_num_direction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::direction arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:grid_volume_set_num_direction",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_set_num_direction" "', argument " "1"" of type '" "meep::grid_volume *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_set_num_direction" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grid_volume_set_num_direction" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->set_num_direction(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_nr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_nr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_nr" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = (int)((meep::grid_volume const *)arg1)->nr();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_nx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_nx",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_nx" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = (int)((meep::grid_volume const *)arg1)->nx();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_ny(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_ny",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_ny" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = (int)((meep::grid_volume const *)arg1)->ny();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_nz(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_nz",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_nz" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = (int)((meep::grid_volume const *)arg1)->nz();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_has_field(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_has_field",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_has_field" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  result = (bool)((meep::grid_volume const *)arg1)->has_field(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_has_boundary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::boundary_side arg2 ;
  meep::direction arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:grid_volume_has_boundary",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_has_boundary" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_has_boundary" "', argument " "2"" of type '" "meep::boundary_side""'");
  } 
  arg2 = static_cast< meep::boundary_side >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grid_volume_has_boundary" "', argument " "3"" of type '" "meep::direction""'");
  } 
  arg3 = static_cast< meep::direction >(val3);
  result = (int)((meep::grid_volume const *)arg1)->has_boundary(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_dr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_dr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_dr" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = ((meep::grid_volume const *)arg1)->dr();
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_dx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_dx",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_dx" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = ((meep::grid_volume const *)arg1)->dx();
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_dy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_dy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_dy" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = ((meep::grid_volume const *)arg1)->dy();
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_dz(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_dz",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_dz" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = ((meep::grid_volume const *)arg1)->dz();
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_ntot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_ntot",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_ntot" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = ((meep::grid_volume const *)arg1)->ntot();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_nowned_min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_nowned_min",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_nowned_min" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = ((meep::grid_volume const *)arg1)->nowned_min();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_nowned(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_nowned",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_nowned" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  result = ((meep::grid_volume const *)arg1)->nowned(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::ivec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume___getitem__" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "grid_volume___getitem__" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grid_volume___getitem__" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::ivec * >(argp2);
  result = ((meep::grid_volume const *)arg1)->operator []((meep::ivec const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::component arg2 ;
  meep::ivec *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:grid_volume_index",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_index" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "grid_volume_index" "', argument " "3"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grid_volume_index" "', argument " "3"" of type '" "meep::ivec const &""'"); 
  }
  arg3 = reinterpret_cast< meep::ivec * >(argp3);
  result = ((meep::grid_volume const *)arg1)->index(arg2,(meep::ivec const &)*arg3);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_round_vec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::ivec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_round_vec",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_round_vec" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "grid_volume_round_vec" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grid_volume_round_vec" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = ((meep::grid_volume const *)arg1)->round_vec((meep::vec const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::ivec(static_cast< const meep::ivec& >(result))), SWIGTYPE_p_meep__ivec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_interpolate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::component arg2 ;
  meep::vec *arg3 = 0 ;
  ptrdiff_t *arg4 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:grid_volume_interpolate",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_interpolate" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "grid_volume_interpolate" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grid_volume_interpolate" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  arg3 = reinterpret_cast< meep::vec * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_ptrdiff_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "grid_volume_interpolate" "', argument " "4"" of type '" "ptrdiff_t [8]""'"); 
  } 
  arg4 = reinterpret_cast< ptrdiff_t * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "grid_volume_interpolate" "', argument " "5"" of type '" "double [8]""'"); 
  } 
  arg5 = reinterpret_cast< double * >(argp5);
  ((meep::grid_volume const *)arg1)->interpolate(arg2,(meep::vec const &)*arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_interpolate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::component arg2 ;
  meep::vec *arg3 = 0 ;
  meep::ivec *arg4 ;
  double *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:grid_volume_interpolate",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_interpolate" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "grid_volume_interpolate" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grid_volume_interpolate" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  arg3 = reinterpret_cast< meep::vec * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "grid_volume_interpolate" "', argument " "4"" of type '" "meep::ivec [8]""'"); 
  } 
  arg4 = reinterpret_cast< meep::ivec * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "grid_volume_interpolate" "', argument " "5"" of type '" "double [8]""'"); 
  } 
  arg5 = reinterpret_cast< double * >(argp5);
  ((meep::grid_volume const *)arg1)->interpolate(arg2,(meep::vec const &)*arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_interpolate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__vec, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_ptrdiff_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_grid_volume_interpolate__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__vec, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_meep__ivec, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_grid_volume_interpolate__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'grid_volume_interpolate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::grid_volume::interpolate(meep::component,meep::vec const &,ptrdiff_t [8],double [8]) const\n"
    "    meep::grid_volume::interpolate(meep::component,meep::vec const &,meep::ivec [8],double [8]) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_grid_volume_dV__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::component arg2 ;
  ptrdiff_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< meep::volume > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:grid_volume_dV",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_dV" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grid_volume_dV" "', argument " "3"" of type '" "ptrdiff_t""'");
  } 
  arg3 = static_cast< ptrdiff_t >(val3);
  result = ((meep::grid_volume const *)arg1)->dV(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new meep::volume(static_cast< const meep::volume& >(result))), SWIGTYPE_p_meep__volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_dV__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::ivec *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< meep::volume > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:grid_volume_dV",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_dV" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "grid_volume_dV" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grid_volume_dV" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::ivec * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grid_volume_dV" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = ((meep::grid_volume const *)arg1)->dV((meep::ivec const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj((new meep::volume(static_cast< const meep::volume& >(result))), SWIGTYPE_p_meep__volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_dV__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::ivec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< meep::volume > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_dV",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_dV" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "grid_volume_dV" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grid_volume_dV" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::ivec * >(argp2);
  result = ((meep::grid_volume const *)arg1)->dV((meep::ivec const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::volume(static_cast< const meep::volume& >(result))), SWIGTYPE_p_meep__volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_dV(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__ivec, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_grid_volume_dV__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__ivec, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_grid_volume_dV__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_grid_volume_dV__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'grid_volume_dV'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::grid_volume::dV(meep::component,ptrdiff_t) const\n"
    "    meep::grid_volume::dV(meep::ivec const &,double) const\n"
    "    meep::grid_volume::dV(meep::ivec const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_grid_volume_intersect_with__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::grid_volume *arg2 = 0 ;
  meep::grid_volume *arg3 = (meep::grid_volume *) 0 ;
  meep::grid_volume *arg4 = (meep::grid_volume *) 0 ;
  int *arg5 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:grid_volume_intersect_with",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_intersect_with" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "grid_volume_intersect_with" "', argument " "2"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grid_volume_intersect_with" "', argument " "2"" of type '" "meep::grid_volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::grid_volume * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "grid_volume_intersect_with" "', argument " "3"" of type '" "meep::grid_volume *""'"); 
  }
  arg3 = reinterpret_cast< meep::grid_volume * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "grid_volume_intersect_with" "', argument " "4"" of type '" "meep::grid_volume *""'"); 
  }
  arg4 = reinterpret_cast< meep::grid_volume * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "grid_volume_intersect_with" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  result = (bool)((meep::grid_volume const *)arg1)->intersect_with((meep::grid_volume const &)*arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_intersect_with__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::grid_volume *arg2 = 0 ;
  meep::grid_volume *arg3 = (meep::grid_volume *) 0 ;
  meep::grid_volume *arg4 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:grid_volume_intersect_with",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_intersect_with" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "grid_volume_intersect_with" "', argument " "2"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grid_volume_intersect_with" "', argument " "2"" of type '" "meep::grid_volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::grid_volume * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "grid_volume_intersect_with" "', argument " "3"" of type '" "meep::grid_volume *""'"); 
  }
  arg3 = reinterpret_cast< meep::grid_volume * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "grid_volume_intersect_with" "', argument " "4"" of type '" "meep::grid_volume *""'"); 
  }
  arg4 = reinterpret_cast< meep::grid_volume * >(argp4);
  result = (bool)((meep::grid_volume const *)arg1)->intersect_with((meep::grid_volume const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_intersect_with__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::grid_volume *arg2 = 0 ;
  meep::grid_volume *arg3 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:grid_volume_intersect_with",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_intersect_with" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "grid_volume_intersect_with" "', argument " "2"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grid_volume_intersect_with" "', argument " "2"" of type '" "meep::grid_volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::grid_volume * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "grid_volume_intersect_with" "', argument " "3"" of type '" "meep::grid_volume *""'"); 
  }
  arg3 = reinterpret_cast< meep::grid_volume * >(argp3);
  result = (bool)((meep::grid_volume const *)arg1)->intersect_with((meep::grid_volume const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_intersect_with__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::grid_volume *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_intersect_with",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_intersect_with" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "grid_volume_intersect_with" "', argument " "2"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grid_volume_intersect_with" "', argument " "2"" of type '" "meep::grid_volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::grid_volume * >(argp2);
  result = (bool)((meep::grid_volume const *)arg1)->intersect_with((meep::grid_volume const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_intersect_with(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__grid_volume, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_grid_volume_intersect_with__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__grid_volume, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_grid_volume_intersect_with__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__grid_volume, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_grid_volume_intersect_with__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__grid_volume, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_int, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_grid_volume_intersect_with__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'grid_volume_intersect_with'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::grid_volume::intersect_with(meep::grid_volume const &,meep::grid_volume *,meep::grid_volume *,int *) const\n"
    "    meep::grid_volume::intersect_with(meep::grid_volume const &,meep::grid_volume *,meep::grid_volume *) const\n"
    "    meep::grid_volume::intersect_with(meep::grid_volume const &,meep::grid_volume *) const\n"
    "    meep::grid_volume::intersect_with(meep::grid_volume const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_grid_volume_rmin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_rmin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_rmin" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = (double)((meep::grid_volume const *)arg1)->rmin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_rmax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_rmax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_rmax" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = (double)((meep::grid_volume const *)arg1)->rmax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_xmin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_xmin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_xmin" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = (double)((meep::grid_volume const *)arg1)->xmin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_xmax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_xmax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_xmax" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = (double)((meep::grid_volume const *)arg1)->xmax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_ymin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_ymin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_ymin" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = (double)((meep::grid_volume const *)arg1)->ymin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_ymax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_ymax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_ymax" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = (double)((meep::grid_volume const *)arg1)->ymax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_zmin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_zmin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_zmin" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = (double)((meep::grid_volume const *)arg1)->zmin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_zmax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_zmax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_zmax" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = (double)((meep::grid_volume const *)arg1)->zmax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_center(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_center",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_center" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = ((meep::grid_volume const *)arg1)->center();
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_icenter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::ivec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_icenter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_icenter" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = ((meep::grid_volume const *)arg1)->icenter();
  resultobj = SWIG_NewPointerObj((new meep::ivec(static_cast< const meep::ivec& >(result))), SWIGTYPE_p_meep__ivec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_loc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::component arg2 ;
  ptrdiff_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:grid_volume_loc",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_loc" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grid_volume_loc" "', argument " "3"" of type '" "ptrdiff_t""'");
  } 
  arg3 = static_cast< ptrdiff_t >(val3);
  result = ((meep::grid_volume const *)arg1)->loc(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_loc_at_resolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  ptrdiff_t arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:grid_volume_loc_at_resolution",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_loc_at_resolution" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_loc_at_resolution" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grid_volume_loc_at_resolution" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = ((meep::grid_volume const *)arg1)->loc_at_resolution(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_ntot_at_resolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_ntot_at_resolution",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_ntot_at_resolution" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_ntot_at_resolution" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((meep::grid_volume const *)arg1)->ntot_at_resolution(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_iloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::component arg2 ;
  ptrdiff_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::ivec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:grid_volume_iloc",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_iloc" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grid_volume_iloc" "', argument " "3"" of type '" "ptrdiff_t""'");
  } 
  arg3 = static_cast< ptrdiff_t >(val3);
  result = ((meep::grid_volume const *)arg1)->iloc(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new meep::ivec(static_cast< const meep::ivec& >(result))), SWIGTYPE_p_meep__ivec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_yee_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_yee_index",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_yee_index" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  result = ((meep::grid_volume const *)arg1)->yee_index(arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_yee_shift(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_yee_shift",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_yee_shift" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  result = ((meep::grid_volume const *)arg1)->yee_shift(arg2);
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_eps_component(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::component result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_eps_component",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_eps_component" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = (meep::component)((meep::grid_volume const *)arg1)->eps_component();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_yee2cent_offsets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::component arg2 ;
  ptrdiff_t *arg3 = 0 ;
  ptrdiff_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:grid_volume_yee2cent_offsets",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_yee2cent_offsets" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ptrdiff_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "grid_volume_yee2cent_offsets" "', argument " "3"" of type '" "ptrdiff_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grid_volume_yee2cent_offsets" "', argument " "3"" of type '" "ptrdiff_t &""'"); 
  }
  arg3 = reinterpret_cast< ptrdiff_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_ptrdiff_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "grid_volume_yee2cent_offsets" "', argument " "4"" of type '" "ptrdiff_t &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grid_volume_yee2cent_offsets" "', argument " "4"" of type '" "ptrdiff_t &""'"); 
  }
  arg4 = reinterpret_cast< ptrdiff_t * >(argp4);
  ((meep::grid_volume const *)arg1)->yee2cent_offsets(arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_cent2yee_offsets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::component arg2 ;
  ptrdiff_t *arg3 = 0 ;
  ptrdiff_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:grid_volume_cent2yee_offsets",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_cent2yee_offsets" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ptrdiff_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "grid_volume_cent2yee_offsets" "', argument " "3"" of type '" "ptrdiff_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grid_volume_cent2yee_offsets" "', argument " "3"" of type '" "ptrdiff_t &""'"); 
  }
  arg3 = reinterpret_cast< ptrdiff_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_ptrdiff_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "grid_volume_cent2yee_offsets" "', argument " "4"" of type '" "ptrdiff_t &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grid_volume_cent2yee_offsets" "', argument " "4"" of type '" "ptrdiff_t &""'"); 
  }
  arg4 = reinterpret_cast< ptrdiff_t * >(argp4);
  ((meep::grid_volume const *)arg1)->cent2yee_offsets(arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_boundary_location(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::boundary_side arg2 ;
  meep::direction arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:grid_volume_boundary_location",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_boundary_location" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_boundary_location" "', argument " "2"" of type '" "meep::boundary_side""'");
  } 
  arg2 = static_cast< meep::boundary_side >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grid_volume_boundary_location" "', argument " "3"" of type '" "meep::direction""'");
  } 
  arg3 = static_cast< meep::direction >(val3);
  result = (double)((meep::grid_volume const *)arg1)->boundary_location(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_big_corner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::ivec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_big_corner",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_big_corner" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = ((meep::grid_volume const *)arg1)->big_corner();
  resultobj = SWIG_NewPointerObj((new meep::ivec(static_cast< const meep::ivec& >(result))), SWIGTYPE_p_meep__ivec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_little_corner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::ivec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_little_corner",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_little_corner" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = ((meep::grid_volume const *)arg1)->little_corner();
  resultobj = SWIG_NewPointerObj((new meep::ivec(static_cast< const meep::ivec& >(result))), SWIGTYPE_p_meep__ivec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_corner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::boundary_side arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_corner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_corner" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_corner" "', argument " "2"" of type '" "meep::boundary_side""'");
  } 
  arg2 = static_cast< meep::boundary_side >(val2);
  result = ((meep::grid_volume const *)arg1)->corner(arg2);
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_contains__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_contains" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "grid_volume_contains" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grid_volume_contains" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = (bool)((meep::grid_volume const *)arg1)->contains((meep::vec const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_contains__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::ivec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_contains" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "grid_volume_contains" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grid_volume_contains" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::ivec * >(argp2);
  result = (bool)((meep::grid_volume const *)arg1)->contains((meep::ivec const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_contains(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__vec, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_grid_volume_contains__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__ivec, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_grid_volume_contains__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'grid_volume_contains'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::grid_volume::contains(meep::vec const &) const\n"
    "    meep::grid_volume::contains(meep::ivec const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_grid_volume_little_owned_corner0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::ivec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_little_owned_corner0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_little_owned_corner0" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  result = ((meep::grid_volume const *)arg1)->little_owned_corner0(arg2);
  resultobj = SWIG_NewPointerObj((new meep::ivec(static_cast< const meep::ivec& >(result))), SWIGTYPE_p_meep__ivec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_little_owned_corner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::ivec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_little_owned_corner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_little_owned_corner" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  result = ((meep::grid_volume const *)arg1)->little_owned_corner(arg2);
  resultobj = SWIG_NewPointerObj((new meep::ivec(static_cast< const meep::ivec& >(result))), SWIGTYPE_p_meep__ivec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_owns(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::ivec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_owns",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_owns" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "grid_volume_owns" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grid_volume_owns" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::ivec * >(argp2);
  result = (bool)((meep::grid_volume const *)arg1)->owns((meep::ivec const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_surroundings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< meep::volume > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_surroundings",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_surroundings" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = ((meep::grid_volume const *)arg1)->surroundings();
  resultobj = SWIG_NewPointerObj((new meep::volume(static_cast< const meep::volume& >(result))), SWIGTYPE_p_meep__volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_interior(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< meep::volume > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_interior",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_interior" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = ((meep::grid_volume const *)arg1)->interior();
  resultobj = SWIG_NewPointerObj((new meep::volume(static_cast< const meep::volume& >(result))), SWIGTYPE_p_meep__volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_get_boundary_icorners(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::component arg2 ;
  int arg3 ;
  meep::ivec *arg4 = (meep::ivec *) 0 ;
  meep::ivec *arg5 = (meep::ivec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:grid_volume_get_boundary_icorners",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_get_boundary_icorners" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grid_volume_get_boundary_icorners" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "grid_volume_get_boundary_icorners" "', argument " "4"" of type '" "meep::ivec *""'"); 
  }
  arg4 = reinterpret_cast< meep::ivec * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "grid_volume_get_boundary_icorners" "', argument " "5"" of type '" "meep::ivec *""'"); 
  }
  arg5 = reinterpret_cast< meep::ivec * >(argp5);
  result = (bool)((meep::grid_volume const *)arg1)->get_boundary_icorners(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_split(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  size_t arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::grid_volume result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:grid_volume_split",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_split" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_split" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grid_volume_split" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((meep::grid_volume const *)arg1)->split(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new meep::grid_volume(static_cast< const meep::grid_volume& >(result))), SWIGTYPE_p_meep__grid_volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_split_by_effort__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  meep::grid_volume *arg5 = (meep::grid_volume *) 0 ;
  double *arg6 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  meep::grid_volume result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:grid_volume_split_by_effort",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_split_by_effort" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_split_by_effort" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grid_volume_split_by_effort" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "grid_volume_split_by_effort" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "grid_volume_split_by_effort" "', argument " "5"" of type '" "meep::grid_volume const *""'"); 
  }
  arg5 = reinterpret_cast< meep::grid_volume * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "grid_volume_split_by_effort" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  result = ((meep::grid_volume const *)arg1)->split_by_effort(arg2,arg3,arg4,(meep::grid_volume const *)arg5,arg6);
  resultobj = SWIG_NewPointerObj((new meep::grid_volume(static_cast< const meep::grid_volume& >(result))), SWIGTYPE_p_meep__grid_volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_split_by_effort__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  meep::grid_volume *arg5 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  meep::grid_volume result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:grid_volume_split_by_effort",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_split_by_effort" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_split_by_effort" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grid_volume_split_by_effort" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "grid_volume_split_by_effort" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "grid_volume_split_by_effort" "', argument " "5"" of type '" "meep::grid_volume const *""'"); 
  }
  arg5 = reinterpret_cast< meep::grid_volume * >(argp5);
  result = ((meep::grid_volume const *)arg1)->split_by_effort(arg2,arg3,arg4,(meep::grid_volume const *)arg5);
  resultobj = SWIG_NewPointerObj((new meep::grid_volume(static_cast< const meep::grid_volume& >(result))), SWIGTYPE_p_meep__grid_volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_split_by_effort__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  meep::grid_volume result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:grid_volume_split_by_effort",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_split_by_effort" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_split_by_effort" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grid_volume_split_by_effort" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "grid_volume_split_by_effort" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = ((meep::grid_volume const *)arg1)->split_by_effort(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new meep::grid_volume(static_cast< const meep::grid_volume& >(result))), SWIGTYPE_p_meep__grid_volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_split_by_effort__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::grid_volume result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:grid_volume_split_by_effort",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_split_by_effort" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_split_by_effort" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grid_volume_split_by_effort" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((meep::grid_volume const *)arg1)->split_by_effort(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new meep::grid_volume(static_cast< const meep::grid_volume& >(result))), SWIGTYPE_p_meep__grid_volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_split_by_effort(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_grid_volume_split_by_effort__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_grid_volume_split_by_effort__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_grid_volume_split_by_effort__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_grid_volume_split_by_effort__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'grid_volume_split_by_effort'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::grid_volume::split_by_effort(int,int,int,meep::grid_volume const *,double *) const\n"
    "    meep::grid_volume::split_by_effort(int,int,int,meep::grid_volume const *) const\n"
    "    meep::grid_volume::split_by_effort(int,int,int) const\n"
    "    meep::grid_volume::split_by_effort(int,int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_grid_volume_split_at_fraction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  bool arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::grid_volume result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:grid_volume_split_at_fraction",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_split_at_fraction" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_split_at_fraction" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grid_volume_split_at_fraction" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((meep::grid_volume const *)arg1)->split_at_fraction(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new meep::grid_volume(static_cast< const meep::grid_volume& >(result))), SWIGTYPE_p_meep__grid_volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_halve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::direction arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::grid_volume result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_halve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_halve" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_halve" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  result = ((meep::grid_volume const *)arg1)->halve(arg2);
  resultobj = SWIG_NewPointerObj((new meep::grid_volume(static_cast< const meep::grid_volume& >(result))), SWIGTYPE_p_meep__grid_volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_pad_self(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::direction arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_pad_self",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_pad_self" "', argument " "1"" of type '" "meep::grid_volume *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_pad_self" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  (arg1)->pad_self(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_pad__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::direction arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::grid_volume result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_pad",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_pad" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_pad" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  result = ((meep::grid_volume const *)arg1)->pad(arg2);
  resultobj = SWIG_NewPointerObj((new meep::grid_volume(static_cast< const meep::grid_volume& >(result))), SWIGTYPE_p_meep__grid_volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_pad__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::grid_volume result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_pad",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_pad" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = ((meep::grid_volume const *)arg1)->pad();
  resultobj = SWIG_NewPointerObj((new meep::grid_volume(static_cast< const meep::grid_volume& >(result))), SWIGTYPE_p_meep__grid_volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_pad(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_grid_volume_pad__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_grid_volume_pad__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'grid_volume_pad'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::grid_volume::pad(meep::direction) const\n"
    "    meep::grid_volume::pad() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_grid_volume_iyee_shift(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::ivec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_iyee_shift",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_iyee_shift" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  result = ((meep::grid_volume const *)arg1)->iyee_shift(arg2);
  resultobj = SWIG_NewPointerObj((new meep::ivec(static_cast< const meep::ivec& >(result))), SWIGTYPE_p_meep__ivec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_get_origin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_get_origin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_get_origin" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = ((meep::grid_volume const *)arg1)->get_origin();
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_set_origin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_set_origin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_set_origin" "', argument " "1"" of type '" "meep::grid_volume *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "grid_volume_set_origin" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grid_volume_set_origin" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  (arg1)->set_origin((meep::vec const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_set_origin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::ivec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_set_origin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_set_origin" "', argument " "1"" of type '" "meep::grid_volume *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "grid_volume_set_origin" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grid_volume_set_origin" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::ivec * >(argp2);
  (arg1)->set_origin((meep::ivec const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_shift_origin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_shift_origin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_shift_origin" "', argument " "1"" of type '" "meep::grid_volume *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "grid_volume_shift_origin" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grid_volume_shift_origin" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  (arg1)->shift_origin((meep::vec const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_shift_origin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::ivec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_shift_origin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_shift_origin" "', argument " "1"" of type '" "meep::grid_volume *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "grid_volume_shift_origin" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grid_volume_shift_origin" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::ivec * >(argp2);
  (arg1)->shift_origin((meep::ivec const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_shift_origin__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::direction arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:grid_volume_shift_origin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_shift_origin" "', argument " "1"" of type '" "meep::grid_volume *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_shift_origin" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grid_volume_shift_origin" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->shift_origin(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_shift_origin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__vec, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_grid_volume_shift_origin__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__ivec, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_grid_volume_shift_origin__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_grid_volume_shift_origin__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'grid_volume_shift_origin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::grid_volume::shift_origin(meep::vec const &)\n"
    "    meep::grid_volume::shift_origin(meep::ivec const &)\n"
    "    meep::grid_volume::shift_origin(meep::direction,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_grid_volume_set_origin__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::direction arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:grid_volume_set_origin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_set_origin" "', argument " "1"" of type '" "meep::grid_volume *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_set_origin" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grid_volume_set_origin" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->set_origin(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_set_origin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__vec, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_grid_volume_set_origin__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__ivec, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_grid_volume_set_origin__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_grid_volume_set_origin__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'grid_volume_set_origin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::grid_volume::set_origin(meep::vec const &)\n"
    "    meep::grid_volume::set_origin(meep::ivec const &)\n"
    "    meep::grid_volume::set_origin(meep::direction,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_grid_volume_center_origin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_center_origin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_center_origin" "', argument " "1"" of type '" "meep::grid_volume *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  (arg1)->center_origin();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_origin_in_direction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::direction arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_origin_in_direction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_origin_in_direction" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_origin_in_direction" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  result = (double)((meep::grid_volume const *)arg1)->origin_in_direction(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_iorigin_in_direction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  meep::direction arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grid_volume_iorigin_in_direction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_iorigin_in_direction" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_volume_iorigin_in_direction" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  result = (int)((meep::grid_volume const *)arg1)->iorigin_in_direction(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_origin_r(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_origin_r",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_origin_r" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = (double)((meep::grid_volume const *)arg1)->origin_r();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_origin_x(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_origin_x",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_origin_x" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = (double)((meep::grid_volume const *)arg1)->origin_x();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_origin_y(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_origin_y",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_origin_y" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = (double)((meep::grid_volume const *)arg1)->origin_y();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grid_volume_origin_z(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grid_volume_origin_z",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_volume_origin_z" "', argument " "1"" of type '" "meep::grid_volume const *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  result = (double)((meep::grid_volume const *)arg1)->origin_z();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_grid_volume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_grid_volume",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__grid_volume, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_grid_volume" "', argument " "1"" of type '" "meep::grid_volume *""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *grid_volume_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__grid_volume, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_identity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::symmetry result;
  
  if (!PyArg_ParseTuple(args,(char *)":identity")) SWIG_fail;
  result = meep::identity();
  resultobj = SWIG_NewPointerObj((new meep::symmetry(static_cast< const meep::symmetry& >(result))), SWIGTYPE_p_meep__symmetry, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rotate4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::direction arg1 ;
  meep::grid_volume *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::symmetry result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:rotate4",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "rotate4" "', argument " "1"" of type '" "meep::direction""'");
  } 
  arg1 = static_cast< meep::direction >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "rotate4" "', argument " "2"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rotate4" "', argument " "2"" of type '" "meep::grid_volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::grid_volume * >(argp2);
  result = meep::rotate4(arg1,(meep::grid_volume const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::symmetry(static_cast< const meep::symmetry& >(result))), SWIGTYPE_p_meep__symmetry, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rotate2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::direction arg1 ;
  meep::grid_volume *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::symmetry result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:rotate2",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "rotate2" "', argument " "1"" of type '" "meep::direction""'");
  } 
  arg1 = static_cast< meep::direction >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "rotate2" "', argument " "2"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rotate2" "', argument " "2"" of type '" "meep::grid_volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::grid_volume * >(argp2);
  result = meep::rotate2(arg1,(meep::grid_volume const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::symmetry(static_cast< const meep::symmetry& >(result))), SWIGTYPE_p_meep__symmetry, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mirror(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::direction arg1 ;
  meep::grid_volume *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::symmetry result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mirror",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mirror" "', argument " "1"" of type '" "meep::direction""'");
  } 
  arg1 = static_cast< meep::direction >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mirror" "', argument " "2"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mirror" "', argument " "2"" of type '" "meep::grid_volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::grid_volume * >(argp2);
  result = meep::mirror(arg1,(meep::grid_volume const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::symmetry(static_cast< const meep::symmetry& >(result))), SWIGTYPE_p_meep__symmetry, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_r_to_minus_r_symmetry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::symmetry result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:r_to_minus_r_symmetry",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "r_to_minus_r_symmetry" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = meep::r_to_minus_r_symmetry(arg1);
  resultobj = SWIG_NewPointerObj((new meep::symmetry(static_cast< const meep::symmetry& >(result))), SWIGTYPE_p_meep__symmetry, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_symmetry__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::symmetry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_symmetry")) SWIG_fail;
  result = (meep::symmetry *)new meep::symmetry();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__symmetry, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_symmetry__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::symmetry *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::symmetry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_symmetry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__symmetry,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_symmetry" "', argument " "1"" of type '" "meep::symmetry const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_symmetry" "', argument " "1"" of type '" "meep::symmetry const &""'"); 
  }
  arg1 = reinterpret_cast< meep::symmetry * >(argp1);
  result = (meep::symmetry *)new meep::symmetry((meep::symmetry const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__symmetry, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_symmetry(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_symmetry__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__symmetry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_symmetry__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_symmetry'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::symmetry::symmetry()\n"
    "    meep::symmetry::symmetry(meep::symmetry const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_symmetry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::symmetry *arg1 = (meep::symmetry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_symmetry",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__symmetry, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_symmetry" "', argument " "1"" of type '" "meep::symmetry *""'"); 
  }
  arg1 = reinterpret_cast< meep::symmetry * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_symmetry_transform__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::symmetry *arg1 = (meep::symmetry *) 0 ;
  meep::direction arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::signed_direction result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:symmetry_transform",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__symmetry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "symmetry_transform" "', argument " "1"" of type '" "meep::symmetry const *""'"); 
  }
  arg1 = reinterpret_cast< meep::symmetry * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "symmetry_transform" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "symmetry_transform" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((meep::symmetry const *)arg1)->transform(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new meep::signed_direction(static_cast< const meep::signed_direction& >(result))), SWIGTYPE_p_meep__signed_direction, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_symmetry_transform__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::symmetry *arg1 = (meep::symmetry *) 0 ;
  meep::ivec *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::ivec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:symmetry_transform",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__symmetry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "symmetry_transform" "', argument " "1"" of type '" "meep::symmetry const *""'"); 
  }
  arg1 = reinterpret_cast< meep::symmetry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "symmetry_transform" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "symmetry_transform" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::ivec * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "symmetry_transform" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((meep::symmetry const *)arg1)->transform((meep::ivec const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj((new meep::ivec(static_cast< const meep::ivec& >(result))), SWIGTYPE_p_meep__ivec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_symmetry_transform__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::symmetry *arg1 = (meep::symmetry *) 0 ;
  meep::vec *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:symmetry_transform",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__symmetry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "symmetry_transform" "', argument " "1"" of type '" "meep::symmetry const *""'"); 
  }
  arg1 = reinterpret_cast< meep::symmetry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "symmetry_transform" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "symmetry_transform" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "symmetry_transform" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((meep::symmetry const *)arg1)->transform((meep::vec const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_symmetry_transform_unshifted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::symmetry *arg1 = (meep::symmetry *) 0 ;
  meep::ivec *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::ivec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:symmetry_transform_unshifted",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__symmetry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "symmetry_transform_unshifted" "', argument " "1"" of type '" "meep::symmetry const *""'"); 
  }
  arg1 = reinterpret_cast< meep::symmetry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "symmetry_transform_unshifted" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "symmetry_transform_unshifted" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::ivec * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "symmetry_transform_unshifted" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((meep::symmetry const *)arg1)->transform_unshifted((meep::ivec const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj((new meep::ivec(static_cast< const meep::ivec& >(result))), SWIGTYPE_p_meep__ivec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_symmetry_transform__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::symmetry *arg1 = (meep::symmetry *) 0 ;
  meep::volume *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< meep::volume > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:symmetry_transform",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__symmetry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "symmetry_transform" "', argument " "1"" of type '" "meep::symmetry const *""'"); 
  }
  arg1 = reinterpret_cast< meep::symmetry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "symmetry_transform" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "symmetry_transform" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "symmetry_transform" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((meep::symmetry const *)arg1)->transform((meep::volume const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj((new meep::volume(static_cast< const meep::volume& >(result))), SWIGTYPE_p_meep__volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_symmetry_transform__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::symmetry *arg1 = (meep::symmetry *) 0 ;
  meep::component arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::component result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:symmetry_transform",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__symmetry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "symmetry_transform" "', argument " "1"" of type '" "meep::symmetry const *""'"); 
  }
  arg1 = reinterpret_cast< meep::symmetry * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "symmetry_transform" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (meep::component)((meep::symmetry const *)arg1)->transform(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_symmetry_phase_shift__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::symmetry *arg1 = (meep::symmetry *) 0 ;
  meep::component arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:symmetry_phase_shift",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__symmetry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "symmetry_phase_shift" "', argument " "1"" of type '" "meep::symmetry const *""'"); 
  }
  arg1 = reinterpret_cast< meep::symmetry * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "symmetry_phase_shift" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((meep::symmetry const *)arg1)->phase_shift(arg2,arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_symmetry_transform__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::symmetry *arg1 = (meep::symmetry *) 0 ;
  meep::derived_component arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::derived_component result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:symmetry_transform",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__symmetry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "symmetry_transform" "', argument " "1"" of type '" "meep::symmetry const *""'"); 
  }
  arg1 = reinterpret_cast< meep::symmetry * >(argp1);
  {
    arg2 = static_cast<meep::derived_component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "symmetry_transform" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (meep::derived_component)((meep::symmetry const *)arg1)->transform(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_symmetry_phase_shift__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::symmetry *arg1 = (meep::symmetry *) 0 ;
  meep::derived_component arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:symmetry_phase_shift",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__symmetry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "symmetry_phase_shift" "', argument " "1"" of type '" "meep::symmetry const *""'"); 
  }
  arg1 = reinterpret_cast< meep::symmetry * >(argp1);
  {
    arg2 = static_cast<meep::derived_component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "symmetry_phase_shift" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((meep::symmetry const *)arg1)->phase_shift(arg2,arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_symmetry_transform__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::symmetry *arg1 = (meep::symmetry *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:symmetry_transform",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__symmetry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "symmetry_transform" "', argument " "1"" of type '" "meep::symmetry const *""'"); 
  }
  arg1 = reinterpret_cast< meep::symmetry * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "symmetry_transform" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "symmetry_transform" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)((meep::symmetry const *)arg1)->transform(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_symmetry_transform(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__symmetry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__ivec, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_symmetry_transform__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__symmetry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__vec, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_symmetry_transform__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__symmetry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__volume, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_symmetry_transform__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__symmetry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_symmetry_transform__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__symmetry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) >= 100;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_symmetry_transform__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__symmetry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_symmetry_transform__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__symmetry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_symmetry_transform__SWIG_6(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'symmetry_transform'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::symmetry::transform(meep::direction,int) const\n"
    "    meep::symmetry::transform(meep::ivec const &,int) const\n"
    "    meep::symmetry::transform(meep::vec const &,int) const\n"
    "    meep::symmetry::transform(meep::volume const &,int) const\n"
    "    meep::symmetry::transform(meep::component,int) const\n"
    "    meep::symmetry::transform(meep::derived_component,int) const\n"
    "    meep::symmetry::transform(int,int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_symmetry_phase_shift__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::symmetry *arg1 = (meep::symmetry *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:symmetry_phase_shift",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__symmetry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "symmetry_phase_shift" "', argument " "1"" of type '" "meep::symmetry const *""'"); 
  }
  arg1 = reinterpret_cast< meep::symmetry * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "symmetry_phase_shift" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "symmetry_phase_shift" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((meep::symmetry const *)arg1)->phase_shift(arg2,arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_symmetry_phase_shift(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__symmetry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_symmetry_phase_shift__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__symmetry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) >= 100;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_symmetry_phase_shift__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__symmetry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_symmetry_phase_shift__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'symmetry_phase_shift'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::symmetry::phase_shift(meep::component,int) const\n"
    "    meep::symmetry::phase_shift(meep::derived_component,int) const\n"
    "    meep::symmetry::phase_shift(int,int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_symmetry_multiplicity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::symmetry *arg1 = (meep::symmetry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:symmetry_multiplicity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__symmetry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "symmetry_multiplicity" "', argument " "1"" of type '" "meep::symmetry const *""'"); 
  }
  arg1 = reinterpret_cast< meep::symmetry * >(argp1);
  result = (int)((meep::symmetry const *)arg1)->multiplicity();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_symmetry_is_primitive(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::symmetry *arg1 = (meep::symmetry *) 0 ;
  meep::ivec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:symmetry_is_primitive",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__symmetry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "symmetry_is_primitive" "', argument " "1"" of type '" "meep::symmetry const *""'"); 
  }
  arg1 = reinterpret_cast< meep::symmetry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "symmetry_is_primitive" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "symmetry_is_primitive" "', argument " "2"" of type '" "meep::ivec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::ivec * >(argp2);
  result = (bool)((meep::symmetry const *)arg1)->is_primitive((meep::ivec const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_symmetry_symmetry_reduce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::symmetry *arg1 = (meep::symmetry *) 0 ;
  meep::volume_list *arg2 = (meep::volume_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::volume_list *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:symmetry_symmetry_reduce",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__symmetry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "symmetry_symmetry_reduce" "', argument " "1"" of type '" "meep::symmetry const *""'"); 
  }
  arg1 = reinterpret_cast< meep::symmetry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__volume_list, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "symmetry_symmetry_reduce" "', argument " "2"" of type '" "meep::volume_list const *""'"); 
  }
  arg2 = reinterpret_cast< meep::volume_list * >(argp2);
  result = (meep::volume_list *)((meep::symmetry const *)arg1)->reduce((meep::volume_list const *)arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__volume_list, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_symmetry___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::symmetry *arg1 = (meep::symmetry *) 0 ;
  meep::symmetry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::symmetry result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:symmetry___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__symmetry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "symmetry___add__" "', argument " "1"" of type '" "meep::symmetry const *""'"); 
  }
  arg1 = reinterpret_cast< meep::symmetry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__symmetry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "symmetry___add__" "', argument " "2"" of type '" "meep::symmetry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "symmetry___add__" "', argument " "2"" of type '" "meep::symmetry const &""'"); 
  }
  arg2 = reinterpret_cast< meep::symmetry * >(argp2);
  result = ((meep::symmetry const *)arg1)->operator +((meep::symmetry const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::symmetry(static_cast< const meep::symmetry& >(result))), SWIGTYPE_p_meep__symmetry, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_symmetry___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::symmetry *arg1 = (meep::symmetry *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::symmetry result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:symmetry___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__symmetry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "symmetry___mul__" "', argument " "1"" of type '" "meep::symmetry const *""'"); 
  }
  arg1 = reinterpret_cast< meep::symmetry * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "symmetry___mul__" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  result = ((meep::symmetry const *)arg1)->operator *(arg2);
  resultobj = SWIG_NewPointerObj((new meep::symmetry(static_cast< const meep::symmetry& >(result))), SWIGTYPE_p_meep__symmetry, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_symmetry___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::symmetry *arg1 = (meep::symmetry *) 0 ;
  meep::symmetry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::symmetry result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:symmetry___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__symmetry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "symmetry___sub__" "', argument " "1"" of type '" "meep::symmetry const *""'"); 
  }
  arg1 = reinterpret_cast< meep::symmetry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__symmetry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "symmetry___sub__" "', argument " "2"" of type '" "meep::symmetry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "symmetry___sub__" "', argument " "2"" of type '" "meep::symmetry const &""'"); 
  }
  arg2 = reinterpret_cast< meep::symmetry * >(argp2);
  result = ((meep::symmetry const *)arg1)->operator -((meep::symmetry const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::symmetry(static_cast< const meep::symmetry& >(result))), SWIGTYPE_p_meep__symmetry, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_symmetry___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::symmetry *arg1 = (meep::symmetry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::symmetry result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:symmetry___neg__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__symmetry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "symmetry___neg__" "', argument " "1"" of type '" "meep::symmetry const *""'"); 
  }
  arg1 = reinterpret_cast< meep::symmetry * >(argp1);
  result = ((meep::symmetry const *)arg1)->operator -();
  resultobj = SWIG_NewPointerObj((new meep::symmetry(static_cast< const meep::symmetry& >(result))), SWIGTYPE_p_meep__symmetry, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_symmetry_symmetry_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::symmetry *arg1 = (meep::symmetry *) 0 ;
  meep::symmetry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:symmetry_symmetry_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__symmetry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "symmetry_symmetry_assign" "', argument " "1"" of type '" "meep::symmetry *""'"); 
  }
  arg1 = reinterpret_cast< meep::symmetry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__symmetry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "symmetry_symmetry_assign" "', argument " "2"" of type '" "meep::symmetry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "symmetry_symmetry_assign" "', argument " "2"" of type '" "meep::symmetry const &""'"); 
  }
  arg2 = reinterpret_cast< meep::symmetry * >(argp2);
  (arg1)->operator =((meep::symmetry const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_symmetry___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::symmetry *arg1 = (meep::symmetry *) 0 ;
  meep::symmetry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:symmetry___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__symmetry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "symmetry___eq__" "', argument " "1"" of type '" "meep::symmetry const *""'"); 
  }
  arg1 = reinterpret_cast< meep::symmetry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__symmetry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "symmetry___eq__" "', argument " "2"" of type '" "meep::symmetry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "symmetry___eq__" "', argument " "2"" of type '" "meep::symmetry const &""'"); 
  }
  arg2 = reinterpret_cast< meep::symmetry * >(argp2);
  result = (bool)((meep::symmetry const *)arg1)->operator ==((meep::symmetry const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_symmetry___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::symmetry *arg1 = (meep::symmetry *) 0 ;
  meep::symmetry *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:symmetry___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__symmetry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "symmetry___ne__" "', argument " "1"" of type '" "meep::symmetry const *""'"); 
  }
  arg1 = reinterpret_cast< meep::symmetry * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__symmetry,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "symmetry___ne__" "', argument " "2"" of type '" "meep::symmetry const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "symmetry___ne__" "', argument " "2"" of type '" "meep::symmetry const &""'"); 
  }
  arg2 = reinterpret_cast< meep::symmetry * >(argp2);
  result = (bool)((meep::symmetry const *)arg1)->operator !=((meep::symmetry const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *symmetry_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__symmetry, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_volume_list__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = 0 ;
  int arg2 ;
  std::complex< double > arg3 ;
  meep::volume_list *arg4 = (meep::volume_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::complex< double > val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  meep::volume_list *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_volume_list",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_volume_list" "', argument " "1"" of type '" "meep::volume const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_volume_list" "', argument " "1"" of type '" "meep::volume const &""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_volume_list" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_volume_list" "', argument " "3"" of type '" "std::complex< double >""'");
  } 
  arg3 = static_cast< std::complex< double > >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_meep__volume_list, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_volume_list" "', argument " "4"" of type '" "meep::volume_list *""'"); 
  }
  arg4 = reinterpret_cast< meep::volume_list * >(argp4);
  result = (meep::volume_list *)new meep::volume_list((meep::volume const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__volume_list, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_volume_list__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = 0 ;
  int arg2 ;
  std::complex< double > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::complex< double > val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::volume_list *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_volume_list",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_volume_list" "', argument " "1"" of type '" "meep::volume const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_volume_list" "', argument " "1"" of type '" "meep::volume const &""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_volume_list" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_volume_list" "', argument " "3"" of type '" "std::complex< double >""'");
  } 
  arg3 = static_cast< std::complex< double > >(val3);
  result = (meep::volume_list *)new meep::volume_list((meep::volume const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__volume_list, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_volume_list__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume *arg1 = 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::volume_list *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_volume_list",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_volume_list" "', argument " "1"" of type '" "meep::volume const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_volume_list" "', argument " "1"" of type '" "meep::volume const &""'"); 
  }
  arg1 = reinterpret_cast< meep::volume * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_volume_list" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (meep::volume_list *)new meep::volume_list((meep::volume const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__volume_list, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_volume_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume_list *arg1 = (meep::volume_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_volume_list",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume_list, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_volume_list" "', argument " "1"" of type '" "meep::volume_list *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume_list * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_volume_list__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume_list *arg1 = (meep::volume_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::volume_list *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_volume_list",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_volume_list" "', argument " "1"" of type '" "meep::volume_list const *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume_list * >(argp1);
  result = (meep::volume_list *)new meep::volume_list((meep::volume_list const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__volume_list, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_volume_list(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__volume_list, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_volume_list__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_volume_list__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_volume_list__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_meep__volume_list, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_volume_list__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_volume_list'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::volume_list::volume_list(meep::volume const &,int,std::complex< double >,meep::volume_list *)\n"
    "    meep::volume_list::volume_list(meep::volume const &,int,std::complex< double >)\n"
    "    meep::volume_list::volume_list(meep::volume const &,int)\n"
    "    meep::volume_list::volume_list(meep::volume_list const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_volume_list_v_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume_list *arg1 = (meep::volume_list *) 0 ;
  meep::volume *arg2 = (meep::volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:volume_list_v_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_list_v_set" "', argument " "1"" of type '" "meep::volume_list *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume_list * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "volume_list_v_set" "', argument " "2"" of type '" "meep::volume *""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  if (arg1) (arg1)->v = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_list_v_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume_list *arg1 = (meep::volume_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::volume *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:volume_list_v_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_list_v_get" "', argument " "1"" of type '" "meep::volume_list *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume_list * >(argp1);
  result = (meep::volume *)& ((arg1)->v);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__volume, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_list_c_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume_list *arg1 = (meep::volume_list *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:volume_list_c_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_list_c_set" "', argument " "1"" of type '" "meep::volume_list *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume_list * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "volume_list_c_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->c = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_list_c_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume_list *arg1 = (meep::volume_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:volume_list_c_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_list_c_get" "', argument " "1"" of type '" "meep::volume_list *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume_list * >(argp1);
  result = (int) ((arg1)->c);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_list_weight_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume_list *arg1 = (meep::volume_list *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:volume_list_weight_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_list_weight_set" "', argument " "1"" of type '" "meep::volume_list *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume_list * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "volume_list_weight_set" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  if (arg1) (arg1)->weight = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_list_weight_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume_list *arg1 = (meep::volume_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:volume_list_weight_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_list_weight_get" "', argument " "1"" of type '" "meep::volume_list *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume_list * >(argp1);
  result =  ((arg1)->weight);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_list_next_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume_list *arg1 = (meep::volume_list *) 0 ;
  meep::volume_list *arg2 = (meep::volume_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:volume_list_next_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_list_next_set" "', argument " "1"" of type '" "meep::volume_list *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume_list * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__volume_list, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "volume_list_next_set" "', argument " "2"" of type '" "meep::volume_list *""'"); 
  }
  arg2 = reinterpret_cast< meep::volume_list * >(argp2);
  if (arg1) (arg1)->next = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_volume_list_next_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::volume_list *arg1 = (meep::volume_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::volume_list *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:volume_list_next_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__volume_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "volume_list_next_get" "', argument " "1"" of type '" "meep::volume_list *""'"); 
  }
  arg1 = reinterpret_cast< meep::volume_list * >(argp1);
  result = (meep::volume_list *) ((arg1)->next);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__volume_list, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *volume_list_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__volume_list, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_quiet_set(PyObject *_val) {
  {
    bool val;
    int res = SWIG_AsVal_bool(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""meep::quiet""' of type '""bool""'");
    }
    meep::quiet = static_cast< bool >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_quiet_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_bool(static_cast< bool >(meep::quiet));
  return pyobj;
}


SWIGINTERN int Swig_var_pi_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable pi is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_pi_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(meep::pi));
  return pyobj;
}


SWIGINTERN int Swig_var_nan_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable nan is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_nan_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(meep::nan));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_susceptibility__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_susceptibility")) SWIG_fail;
  result = (meep::susceptibility *)new meep::susceptibility();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__susceptibility, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_susceptibility__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::susceptibility *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_susceptibility",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__susceptibility,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_susceptibility" "', argument " "1"" of type '" "meep::susceptibility const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_susceptibility" "', argument " "1"" of type '" "meep::susceptibility const &""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  result = (meep::susceptibility *)new meep::susceptibility((meep::susceptibility const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__susceptibility, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_susceptibility(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_susceptibility__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__susceptibility, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_susceptibility__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_susceptibility'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::susceptibility::susceptibility()\n"
    "    meep::susceptibility::susceptibility(meep::susceptibility const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_susceptibility_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = (meep::susceptibility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::susceptibility *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:susceptibility_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "susceptibility_clone" "', argument " "1"" of type '" "meep::susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  result = (meep::susceptibility *)((meep::susceptibility const *)arg1)->clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_susceptibility(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = (meep::susceptibility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_susceptibility",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__susceptibility, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_susceptibility" "', argument " "1"" of type '" "meep::susceptibility *""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_susceptibility_get_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = (meep::susceptibility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:susceptibility_get_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "susceptibility_get_id" "', argument " "1"" of type '" "meep::susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  result = (int)((meep::susceptibility const *)arg1)->get_id();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_susceptibility___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = (meep::susceptibility *) 0 ;
  meep::susceptibility *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:susceptibility___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "susceptibility___eq__" "', argument " "1"" of type '" "meep::susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__susceptibility,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "susceptibility___eq__" "', argument " "2"" of type '" "meep::susceptibility const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "susceptibility___eq__" "', argument " "2"" of type '" "meep::susceptibility const &""'"); 
  }
  arg2 = reinterpret_cast< meep::susceptibility * >(argp2);
  result = (bool)((meep::susceptibility const *)arg1)->operator ==((meep::susceptibility const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_susceptibility_update_P(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = (meep::susceptibility *) 0 ;
  meep::realnum *(*arg2)[2] ;
  meep::realnum *(*arg3)[2] ;
  double arg4 ;
  meep::grid_volume *arg5 = 0 ;
  void *arg6 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int res6 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:susceptibility_update_P",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "susceptibility_update_P" "', argument " "1"" of type '" "meep::susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "susceptibility_update_P" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *(*)[2] >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "susceptibility_update_P" "', argument " "3"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg3 = reinterpret_cast< meep::realnum *(*)[2] >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "susceptibility_update_P" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "susceptibility_update_P" "', argument " "5"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "susceptibility_update_P" "', argument " "5"" of type '" "meep::grid_volume const &""'"); 
  }
  arg5 = reinterpret_cast< meep::grid_volume * >(argp5);
  res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6), 0, 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "susceptibility_update_P" "', argument " "6"" of type '" "void *""'"); 
  }
  ((meep::susceptibility const *)arg1)->update_P((meep::realnum *(*)[2])arg2,(meep::realnum *(*)[2])arg3,arg4,(meep::grid_volume const &)*arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_susceptibility_subtract_P(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = (meep::susceptibility *) 0 ;
  meep::field_type arg2 ;
  meep::realnum *(*arg3)[2] ;
  void *arg4 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:susceptibility_subtract_P",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "susceptibility_subtract_P" "', argument " "1"" of type '" "meep::susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "susceptibility_subtract_P" "', argument " "2"" of type '" "meep::field_type""'");
  } 
  arg2 = static_cast< meep::field_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "susceptibility_subtract_P" "', argument " "3"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg3 = reinterpret_cast< meep::realnum *(*)[2] >(argp3);
  res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "susceptibility_subtract_P" "', argument " "4"" of type '" "void *""'"); 
  }
  ((meep::susceptibility const *)arg1)->subtract_P(arg2,(meep::realnum *(*)[2])arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_susceptibility_needs_P(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = (meep::susceptibility *) 0 ;
  meep::component arg2 ;
  int arg3 ;
  meep::realnum *(*arg4)[2] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:susceptibility_needs_P",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "susceptibility_needs_P" "', argument " "1"" of type '" "meep::susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "susceptibility_needs_P" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "susceptibility_needs_P" "', argument " "4"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg4 = reinterpret_cast< meep::realnum *(*)[2] >(argp4);
  result = (bool)((meep::susceptibility const *)arg1)->needs_P(arg2,arg3,(meep::realnum *(*)[2])arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_susceptibility_needs_W_notowned(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = (meep::susceptibility *) 0 ;
  meep::component arg2 ;
  meep::realnum *(*arg3)[2] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:susceptibility_needs_W_notowned",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "susceptibility_needs_W_notowned" "', argument " "1"" of type '" "meep::susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "susceptibility_needs_W_notowned" "', argument " "3"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg3 = reinterpret_cast< meep::realnum *(*)[2] >(argp3);
  result = (bool)((meep::susceptibility const *)arg1)->needs_W_notowned(arg2,(meep::realnum *(*)[2])arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_susceptibility_needs_W_prev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = (meep::susceptibility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:susceptibility_needs_W_prev",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "susceptibility_needs_W_prev" "', argument " "1"" of type '" "meep::susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  result = (bool)((meep::susceptibility const *)arg1)->needs_W_prev();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_susceptibility_new_internal_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = (meep::susceptibility *) 0 ;
  meep::realnum *(*arg2)[2] ;
  meep::grid_volume *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:susceptibility_new_internal_data",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "susceptibility_new_internal_data" "', argument " "1"" of type '" "meep::susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "susceptibility_new_internal_data" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *(*)[2] >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "susceptibility_new_internal_data" "', argument " "3"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "susceptibility_new_internal_data" "', argument " "3"" of type '" "meep::grid_volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::grid_volume * >(argp3);
  result = (void *)((meep::susceptibility const *)arg1)->new_internal_data((meep::realnum *(*)[2])arg2,(meep::grid_volume const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_susceptibility_delete_internal_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = (meep::susceptibility *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:susceptibility_delete_internal_data",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "susceptibility_delete_internal_data" "', argument " "1"" of type '" "meep::susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "susceptibility_delete_internal_data" "', argument " "2"" of type '" "void *""'"); 
  }
  ((meep::susceptibility const *)arg1)->delete_internal_data(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_susceptibility_init_internal_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = (meep::susceptibility *) 0 ;
  meep::realnum *(*arg2)[2] ;
  double arg3 ;
  meep::grid_volume *arg4 = 0 ;
  void *arg5 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:susceptibility_init_internal_data",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "susceptibility_init_internal_data" "', argument " "1"" of type '" "meep::susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "susceptibility_init_internal_data" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *(*)[2] >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "susceptibility_init_internal_data" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "susceptibility_init_internal_data" "', argument " "4"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "susceptibility_init_internal_data" "', argument " "4"" of type '" "meep::grid_volume const &""'"); 
  }
  arg4 = reinterpret_cast< meep::grid_volume * >(argp4);
  res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "susceptibility_init_internal_data" "', argument " "5"" of type '" "void *""'"); 
  }
  ((meep::susceptibility const *)arg1)->init_internal_data((meep::realnum *(*)[2])arg2,arg3,(meep::grid_volume const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_susceptibility_copy_internal_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = (meep::susceptibility *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:susceptibility_copy_internal_data",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "susceptibility_copy_internal_data" "', argument " "1"" of type '" "meep::susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "susceptibility_copy_internal_data" "', argument " "2"" of type '" "void *""'"); 
  }
  result = (void *)((meep::susceptibility const *)arg1)->copy_internal_data(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_susceptibility_num_internal_notowned_needed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = (meep::susceptibility *) 0 ;
  meep::component arg2 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:susceptibility_num_internal_notowned_needed",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "susceptibility_num_internal_notowned_needed" "', argument " "1"" of type '" "meep::susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "susceptibility_num_internal_notowned_needed" "', argument " "3"" of type '" "void *""'"); 
  }
  result = (int)((meep::susceptibility const *)arg1)->num_internal_notowned_needed(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_susceptibility_internal_notowned_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = (meep::susceptibility *) 0 ;
  int arg2 ;
  meep::component arg3 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  meep::realnum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:susceptibility_internal_notowned_ptr",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "susceptibility_internal_notowned_ptr" "', argument " "1"" of type '" "meep::susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "susceptibility_internal_notowned_ptr" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    arg3 = static_cast<meep::component>(PyInteger_AsLong(obj2));
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "susceptibility_internal_notowned_ptr" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "susceptibility_internal_notowned_ptr" "', argument " "5"" of type '" "void *""'"); 
  }
  result = (meep::realnum *)((meep::susceptibility const *)arg1)->internal_notowned_ptr(arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_susceptibility_num_cinternal_notowned_needed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = (meep::susceptibility *) 0 ;
  meep::component arg2 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:susceptibility_num_cinternal_notowned_needed",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "susceptibility_num_cinternal_notowned_needed" "', argument " "1"" of type '" "meep::susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "susceptibility_num_cinternal_notowned_needed" "', argument " "3"" of type '" "void *""'"); 
  }
  result = (int)((meep::susceptibility const *)arg1)->num_cinternal_notowned_needed(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_susceptibility_cinternal_notowned_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = (meep::susceptibility *) 0 ;
  int arg2 ;
  meep::component arg3 ;
  int arg4 ;
  int arg5 ;
  void *arg6 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  meep::realnum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:susceptibility_cinternal_notowned_ptr",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "susceptibility_cinternal_notowned_ptr" "', argument " "1"" of type '" "meep::susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "susceptibility_cinternal_notowned_ptr" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    arg3 = static_cast<meep::component>(PyInteger_AsLong(obj2));
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "susceptibility_cinternal_notowned_ptr" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "susceptibility_cinternal_notowned_ptr" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6), 0, 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "susceptibility_cinternal_notowned_ptr" "', argument " "6"" of type '" "void *""'"); 
  }
  result = (meep::realnum *)((meep::susceptibility const *)arg1)->cinternal_notowned_ptr(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_susceptibility_next_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = (meep::susceptibility *) 0 ;
  meep::susceptibility *arg2 = (meep::susceptibility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:susceptibility_next_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "susceptibility_next_set" "', argument " "1"" of type '" "meep::susceptibility *""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__susceptibility, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "susceptibility_next_set" "', argument " "2"" of type '" "meep::susceptibility *""'"); 
  }
  arg2 = reinterpret_cast< meep::susceptibility * >(argp2);
  if (arg1) (arg1)->next = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_susceptibility_next_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = (meep::susceptibility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::susceptibility *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:susceptibility_next_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "susceptibility_next_get" "', argument " "1"" of type '" "meep::susceptibility *""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  result = (meep::susceptibility *) ((arg1)->next);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_susceptibility_ntot_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = (meep::susceptibility *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:susceptibility_ntot_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "susceptibility_ntot_set" "', argument " "1"" of type '" "meep::susceptibility *""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "susceptibility_ntot_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->ntot = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_susceptibility_ntot_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = (meep::susceptibility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:susceptibility_ntot_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "susceptibility_ntot_get" "', argument " "1"" of type '" "meep::susceptibility *""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  result =  ((arg1)->ntot);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_susceptibility_sigma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = (meep::susceptibility *) 0 ;
  meep::realnum *(*arg2)[5] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:susceptibility_sigma_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "susceptibility_sigma_set" "', argument " "1"" of type '" "meep::susceptibility *""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_5__p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "susceptibility_sigma_set" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][5]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *(*)[5] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_COMPONENTS; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)5; ++jj) arg1->sigma[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""sigma""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][5]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""sigma""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][5]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_susceptibility_sigma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = (meep::susceptibility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::realnum *(*result)[5] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:susceptibility_sigma_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "susceptibility_sigma_get" "', argument " "1"" of type '" "meep::susceptibility *""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  result = (meep::realnum *(*)[5])(meep::realnum *(*)[5]) ((arg1)->sigma);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_5__p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_susceptibility_trivial_sigma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = (meep::susceptibility *) 0 ;
  bool (*arg2)[5] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:susceptibility_trivial_sigma_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "susceptibility_trivial_sigma_set" "', argument " "1"" of type '" "meep::susceptibility *""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_5__bool, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "susceptibility_trivial_sigma_set" "', argument " "2"" of type '" "bool [meep::NUM_FIELD_COMPONENTS][5]""'"); 
  } 
  arg2 = reinterpret_cast< bool (*)[5] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_COMPONENTS; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)5; ++jj) arg1->trivial_sigma[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""trivial_sigma""' of type '""bool [meep::NUM_FIELD_COMPONENTS][5]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""trivial_sigma""' of type '""bool [meep::NUM_FIELD_COMPONENTS][5]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_susceptibility_trivial_sigma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::susceptibility *arg1 = (meep::susceptibility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool (*result)[5] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:susceptibility_trivial_sigma_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "susceptibility_trivial_sigma_get" "', argument " "1"" of type '" "meep::susceptibility *""'"); 
  }
  arg1 = reinterpret_cast< meep::susceptibility * >(argp1);
  result = (bool (*)[5])(bool (*)[5]) ((arg1)->trivial_sigma);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_5__bool, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *susceptibility_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__susceptibility, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_lorentzian_susceptibility__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  bool arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::lorentzian_susceptibility *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_lorentzian_susceptibility",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_lorentzian_susceptibility" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_lorentzian_susceptibility" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_lorentzian_susceptibility" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (meep::lorentzian_susceptibility *)new meep::lorentzian_susceptibility(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__lorentzian_susceptibility, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_lorentzian_susceptibility__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::lorentzian_susceptibility *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_lorentzian_susceptibility",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_lorentzian_susceptibility" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_lorentzian_susceptibility" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (meep::lorentzian_susceptibility *)new meep::lorentzian_susceptibility(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__lorentzian_susceptibility, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_lorentzian_susceptibility(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_lorentzian_susceptibility__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_lorentzian_susceptibility__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_lorentzian_susceptibility'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::lorentzian_susceptibility::lorentzian_susceptibility(double,double,bool)\n"
    "    meep::lorentzian_susceptibility::lorentzian_susceptibility(double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_lorentzian_susceptibility_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::lorentzian_susceptibility *arg1 = (meep::lorentzian_susceptibility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::susceptibility *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:lorentzian_susceptibility_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__lorentzian_susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lorentzian_susceptibility_clone" "', argument " "1"" of type '" "meep::lorentzian_susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::lorentzian_susceptibility * >(argp1);
  result = (meep::susceptibility *)((meep::lorentzian_susceptibility const *)arg1)->clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_lorentzian_susceptibility(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::lorentzian_susceptibility *arg1 = (meep::lorentzian_susceptibility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_lorentzian_susceptibility",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__lorentzian_susceptibility, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_lorentzian_susceptibility" "', argument " "1"" of type '" "meep::lorentzian_susceptibility *""'"); 
  }
  arg1 = reinterpret_cast< meep::lorentzian_susceptibility * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lorentzian_susceptibility_update_P(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::lorentzian_susceptibility *arg1 = (meep::lorentzian_susceptibility *) 0 ;
  meep::realnum *(*arg2)[2] ;
  meep::realnum *(*arg3)[2] ;
  double arg4 ;
  meep::grid_volume *arg5 = 0 ;
  void *arg6 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int res6 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:lorentzian_susceptibility_update_P",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__lorentzian_susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lorentzian_susceptibility_update_P" "', argument " "1"" of type '" "meep::lorentzian_susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::lorentzian_susceptibility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lorentzian_susceptibility_update_P" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *(*)[2] >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lorentzian_susceptibility_update_P" "', argument " "3"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg3 = reinterpret_cast< meep::realnum *(*)[2] >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "lorentzian_susceptibility_update_P" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "lorentzian_susceptibility_update_P" "', argument " "5"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lorentzian_susceptibility_update_P" "', argument " "5"" of type '" "meep::grid_volume const &""'"); 
  }
  arg5 = reinterpret_cast< meep::grid_volume * >(argp5);
  res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6), 0, 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "lorentzian_susceptibility_update_P" "', argument " "6"" of type '" "void *""'"); 
  }
  ((meep::lorentzian_susceptibility const *)arg1)->update_P((meep::realnum *(*)[2])arg2,(meep::realnum *(*)[2])arg3,arg4,(meep::grid_volume const &)*arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lorentzian_susceptibility_subtract_P(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::lorentzian_susceptibility *arg1 = (meep::lorentzian_susceptibility *) 0 ;
  meep::field_type arg2 ;
  meep::realnum *(*arg3)[2] ;
  void *arg4 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:lorentzian_susceptibility_subtract_P",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__lorentzian_susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lorentzian_susceptibility_subtract_P" "', argument " "1"" of type '" "meep::lorentzian_susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::lorentzian_susceptibility * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lorentzian_susceptibility_subtract_P" "', argument " "2"" of type '" "meep::field_type""'");
  } 
  arg2 = static_cast< meep::field_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lorentzian_susceptibility_subtract_P" "', argument " "3"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg3 = reinterpret_cast< meep::realnum *(*)[2] >(argp3);
  res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lorentzian_susceptibility_subtract_P" "', argument " "4"" of type '" "void *""'"); 
  }
  ((meep::lorentzian_susceptibility const *)arg1)->subtract_P(arg2,(meep::realnum *(*)[2])arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lorentzian_susceptibility_new_internal_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::lorentzian_susceptibility *arg1 = (meep::lorentzian_susceptibility *) 0 ;
  meep::realnum *(*arg2)[2] ;
  meep::grid_volume *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:lorentzian_susceptibility_new_internal_data",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__lorentzian_susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lorentzian_susceptibility_new_internal_data" "', argument " "1"" of type '" "meep::lorentzian_susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::lorentzian_susceptibility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lorentzian_susceptibility_new_internal_data" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *(*)[2] >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lorentzian_susceptibility_new_internal_data" "', argument " "3"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lorentzian_susceptibility_new_internal_data" "', argument " "3"" of type '" "meep::grid_volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::grid_volume * >(argp3);
  result = (void *)((meep::lorentzian_susceptibility const *)arg1)->new_internal_data((meep::realnum *(*)[2])arg2,(meep::grid_volume const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lorentzian_susceptibility_init_internal_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::lorentzian_susceptibility *arg1 = (meep::lorentzian_susceptibility *) 0 ;
  meep::realnum *(*arg2)[2] ;
  double arg3 ;
  meep::grid_volume *arg4 = 0 ;
  void *arg5 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:lorentzian_susceptibility_init_internal_data",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__lorentzian_susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lorentzian_susceptibility_init_internal_data" "', argument " "1"" of type '" "meep::lorentzian_susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::lorentzian_susceptibility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lorentzian_susceptibility_init_internal_data" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *(*)[2] >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lorentzian_susceptibility_init_internal_data" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lorentzian_susceptibility_init_internal_data" "', argument " "4"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lorentzian_susceptibility_init_internal_data" "', argument " "4"" of type '" "meep::grid_volume const &""'"); 
  }
  arg4 = reinterpret_cast< meep::grid_volume * >(argp4);
  res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "lorentzian_susceptibility_init_internal_data" "', argument " "5"" of type '" "void *""'"); 
  }
  ((meep::lorentzian_susceptibility const *)arg1)->init_internal_data((meep::realnum *(*)[2])arg2,arg3,(meep::grid_volume const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lorentzian_susceptibility_copy_internal_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::lorentzian_susceptibility *arg1 = (meep::lorentzian_susceptibility *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:lorentzian_susceptibility_copy_internal_data",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__lorentzian_susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lorentzian_susceptibility_copy_internal_data" "', argument " "1"" of type '" "meep::lorentzian_susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::lorentzian_susceptibility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lorentzian_susceptibility_copy_internal_data" "', argument " "2"" of type '" "void *""'"); 
  }
  result = (void *)((meep::lorentzian_susceptibility const *)arg1)->copy_internal_data(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lorentzian_susceptibility_num_cinternal_notowned_needed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::lorentzian_susceptibility *arg1 = (meep::lorentzian_susceptibility *) 0 ;
  meep::component arg2 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:lorentzian_susceptibility_num_cinternal_notowned_needed",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__lorentzian_susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lorentzian_susceptibility_num_cinternal_notowned_needed" "', argument " "1"" of type '" "meep::lorentzian_susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::lorentzian_susceptibility * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lorentzian_susceptibility_num_cinternal_notowned_needed" "', argument " "3"" of type '" "void *""'"); 
  }
  result = (int)((meep::lorentzian_susceptibility const *)arg1)->num_cinternal_notowned_needed(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lorentzian_susceptibility_cinternal_notowned_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::lorentzian_susceptibility *arg1 = (meep::lorentzian_susceptibility *) 0 ;
  int arg2 ;
  meep::component arg3 ;
  int arg4 ;
  int arg5 ;
  void *arg6 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  meep::realnum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:lorentzian_susceptibility_cinternal_notowned_ptr",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__lorentzian_susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lorentzian_susceptibility_cinternal_notowned_ptr" "', argument " "1"" of type '" "meep::lorentzian_susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::lorentzian_susceptibility * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lorentzian_susceptibility_cinternal_notowned_ptr" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    arg3 = static_cast<meep::component>(PyInteger_AsLong(obj2));
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "lorentzian_susceptibility_cinternal_notowned_ptr" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "lorentzian_susceptibility_cinternal_notowned_ptr" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6), 0, 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "lorentzian_susceptibility_cinternal_notowned_ptr" "', argument " "6"" of type '" "void *""'"); 
  }
  result = (meep::realnum *)((meep::lorentzian_susceptibility const *)arg1)->cinternal_notowned_ptr(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *lorentzian_susceptibility_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__lorentzian_susceptibility, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_noisy_lorentzian_susceptibility__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  meep::noisy_lorentzian_susceptibility *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_noisy_lorentzian_susceptibility",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_noisy_lorentzian_susceptibility" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_noisy_lorentzian_susceptibility" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_noisy_lorentzian_susceptibility" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_noisy_lorentzian_susceptibility" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (meep::noisy_lorentzian_susceptibility *)new meep::noisy_lorentzian_susceptibility(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__noisy_lorentzian_susceptibility, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_noisy_lorentzian_susceptibility__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::noisy_lorentzian_susceptibility *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_noisy_lorentzian_susceptibility",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_noisy_lorentzian_susceptibility" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_noisy_lorentzian_susceptibility" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_noisy_lorentzian_susceptibility" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (meep::noisy_lorentzian_susceptibility *)new meep::noisy_lorentzian_susceptibility(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__noisy_lorentzian_susceptibility, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_noisy_lorentzian_susceptibility(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_noisy_lorentzian_susceptibility__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_noisy_lorentzian_susceptibility__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_noisy_lorentzian_susceptibility'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::noisy_lorentzian_susceptibility::noisy_lorentzian_susceptibility(double,double,double,bool)\n"
    "    meep::noisy_lorentzian_susceptibility::noisy_lorentzian_susceptibility(double,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_noisy_lorentzian_susceptibility_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::noisy_lorentzian_susceptibility *arg1 = (meep::noisy_lorentzian_susceptibility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::susceptibility *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:noisy_lorentzian_susceptibility_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__noisy_lorentzian_susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noisy_lorentzian_susceptibility_clone" "', argument " "1"" of type '" "meep::noisy_lorentzian_susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::noisy_lorentzian_susceptibility * >(argp1);
  result = (meep::susceptibility *)((meep::noisy_lorentzian_susceptibility const *)arg1)->clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noisy_lorentzian_susceptibility_update_P(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::noisy_lorentzian_susceptibility *arg1 = (meep::noisy_lorentzian_susceptibility *) 0 ;
  meep::realnum *(*arg2)[2] ;
  meep::realnum *(*arg3)[2] ;
  double arg4 ;
  meep::grid_volume *arg5 = 0 ;
  void *arg6 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int res6 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:noisy_lorentzian_susceptibility_update_P",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__noisy_lorentzian_susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noisy_lorentzian_susceptibility_update_P" "', argument " "1"" of type '" "meep::noisy_lorentzian_susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::noisy_lorentzian_susceptibility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "noisy_lorentzian_susceptibility_update_P" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *(*)[2] >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "noisy_lorentzian_susceptibility_update_P" "', argument " "3"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg3 = reinterpret_cast< meep::realnum *(*)[2] >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "noisy_lorentzian_susceptibility_update_P" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "noisy_lorentzian_susceptibility_update_P" "', argument " "5"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "noisy_lorentzian_susceptibility_update_P" "', argument " "5"" of type '" "meep::grid_volume const &""'"); 
  }
  arg5 = reinterpret_cast< meep::grid_volume * >(argp5);
  res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6), 0, 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "noisy_lorentzian_susceptibility_update_P" "', argument " "6"" of type '" "void *""'"); 
  }
  ((meep::noisy_lorentzian_susceptibility const *)arg1)->update_P((meep::realnum *(*)[2])arg2,(meep::realnum *(*)[2])arg3,arg4,(meep::grid_volume const &)*arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_noisy_lorentzian_susceptibility(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::noisy_lorentzian_susceptibility *arg1 = (meep::noisy_lorentzian_susceptibility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_noisy_lorentzian_susceptibility",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__noisy_lorentzian_susceptibility, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_noisy_lorentzian_susceptibility" "', argument " "1"" of type '" "meep::noisy_lorentzian_susceptibility *""'"); 
  }
  arg1 = reinterpret_cast< meep::noisy_lorentzian_susceptibility * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *noisy_lorentzian_susceptibility_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__noisy_lorentzian_susceptibility, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_multilevel_susceptibility__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::multilevel_susceptibility *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_multilevel_susceptibility")) SWIG_fail;
  result = (meep::multilevel_susceptibility *)new meep::multilevel_susceptibility();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__multilevel_susceptibility, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_multilevel_susceptibility__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  meep::realnum *arg3 = (meep::realnum *) 0 ;
  meep::realnum *arg4 = (meep::realnum *) 0 ;
  meep::realnum *arg5 = (meep::realnum *) 0 ;
  meep::realnum *arg6 = (meep::realnum *) 0 ;
  meep::realnum *arg7 = (meep::realnum *) 0 ;
  meep::realnum *arg8 = (meep::realnum *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  meep::multilevel_susceptibility *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_multilevel_susceptibility",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_multilevel_susceptibility" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_multilevel_susceptibility" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_multilevel_susceptibility" "', argument " "3"" of type '" "meep::realnum const *""'"); 
  }
  arg3 = reinterpret_cast< meep::realnum * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_multilevel_susceptibility" "', argument " "4"" of type '" "meep::realnum const *""'"); 
  }
  arg4 = reinterpret_cast< meep::realnum * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_multilevel_susceptibility" "', argument " "5"" of type '" "meep::realnum const *""'"); 
  }
  arg5 = reinterpret_cast< meep::realnum * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_multilevel_susceptibility" "', argument " "6"" of type '" "meep::realnum const *""'"); 
  }
  arg6 = reinterpret_cast< meep::realnum * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_multilevel_susceptibility" "', argument " "7"" of type '" "meep::realnum const *""'"); 
  }
  arg7 = reinterpret_cast< meep::realnum * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_multilevel_susceptibility" "', argument " "8"" of type '" "meep::realnum const *""'"); 
  }
  arg8 = reinterpret_cast< meep::realnum * >(argp8);
  result = (meep::multilevel_susceptibility *)new meep::multilevel_susceptibility(arg1,arg2,(meep::realnum const *)arg3,(meep::realnum const *)arg4,(meep::realnum const *)arg5,(meep::realnum const *)arg6,(meep::realnum const *)arg7,(meep::realnum const *)arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__multilevel_susceptibility, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_multilevel_susceptibility__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::multilevel_susceptibility *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::multilevel_susceptibility *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_multilevel_susceptibility",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__multilevel_susceptibility,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_multilevel_susceptibility" "', argument " "1"" of type '" "meep::multilevel_susceptibility const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_multilevel_susceptibility" "', argument " "1"" of type '" "meep::multilevel_susceptibility const &""'"); 
  }
  arg1 = reinterpret_cast< meep::multilevel_susceptibility * >(argp1);
  result = (meep::multilevel_susceptibility *)new meep::multilevel_susceptibility((meep::multilevel_susceptibility const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__multilevel_susceptibility, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_multilevel_susceptibility(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_multilevel_susceptibility__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__multilevel_susceptibility, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_multilevel_susceptibility__SWIG_2(self, args);
    }
  }
  if (argc == 8) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_new_multilevel_susceptibility__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_multilevel_susceptibility'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::multilevel_susceptibility::multilevel_susceptibility()\n"
    "    meep::multilevel_susceptibility::multilevel_susceptibility(int,int,meep::realnum const *,meep::realnum const *,meep::realnum const *,meep::realnum const *,meep::realnum const *,meep::realnum const *)\n"
    "    meep::multilevel_susceptibility::multilevel_susceptibility(meep::multilevel_susceptibility const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_multilevel_susceptibility_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::multilevel_susceptibility *arg1 = (meep::multilevel_susceptibility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::susceptibility *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:multilevel_susceptibility_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__multilevel_susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multilevel_susceptibility_clone" "', argument " "1"" of type '" "meep::multilevel_susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::multilevel_susceptibility * >(argp1);
  result = (meep::susceptibility *)((meep::multilevel_susceptibility const *)arg1)->clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_multilevel_susceptibility(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::multilevel_susceptibility *arg1 = (meep::multilevel_susceptibility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_multilevel_susceptibility",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__multilevel_susceptibility, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_multilevel_susceptibility" "', argument " "1"" of type '" "meep::multilevel_susceptibility *""'"); 
  }
  arg1 = reinterpret_cast< meep::multilevel_susceptibility * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multilevel_susceptibility_update_P(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::multilevel_susceptibility *arg1 = (meep::multilevel_susceptibility *) 0 ;
  meep::realnum *(*arg2)[2] ;
  meep::realnum *(*arg3)[2] ;
  double arg4 ;
  meep::grid_volume *arg5 = 0 ;
  void *arg6 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int res6 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:multilevel_susceptibility_update_P",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__multilevel_susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multilevel_susceptibility_update_P" "', argument " "1"" of type '" "meep::multilevel_susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::multilevel_susceptibility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "multilevel_susceptibility_update_P" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *(*)[2] >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "multilevel_susceptibility_update_P" "', argument " "3"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg3 = reinterpret_cast< meep::realnum *(*)[2] >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "multilevel_susceptibility_update_P" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "multilevel_susceptibility_update_P" "', argument " "5"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "multilevel_susceptibility_update_P" "', argument " "5"" of type '" "meep::grid_volume const &""'"); 
  }
  arg5 = reinterpret_cast< meep::grid_volume * >(argp5);
  res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6), 0, 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "multilevel_susceptibility_update_P" "', argument " "6"" of type '" "void *""'"); 
  }
  ((meep::multilevel_susceptibility const *)arg1)->update_P((meep::realnum *(*)[2])arg2,(meep::realnum *(*)[2])arg3,arg4,(meep::grid_volume const &)*arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multilevel_susceptibility_subtract_P(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::multilevel_susceptibility *arg1 = (meep::multilevel_susceptibility *) 0 ;
  meep::field_type arg2 ;
  meep::realnum *(*arg3)[2] ;
  void *arg4 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:multilevel_susceptibility_subtract_P",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__multilevel_susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multilevel_susceptibility_subtract_P" "', argument " "1"" of type '" "meep::multilevel_susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::multilevel_susceptibility * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "multilevel_susceptibility_subtract_P" "', argument " "2"" of type '" "meep::field_type""'");
  } 
  arg2 = static_cast< meep::field_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "multilevel_susceptibility_subtract_P" "', argument " "3"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg3 = reinterpret_cast< meep::realnum *(*)[2] >(argp3);
  res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "multilevel_susceptibility_subtract_P" "', argument " "4"" of type '" "void *""'"); 
  }
  ((meep::multilevel_susceptibility const *)arg1)->subtract_P(arg2,(meep::realnum *(*)[2])arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multilevel_susceptibility_new_internal_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::multilevel_susceptibility *arg1 = (meep::multilevel_susceptibility *) 0 ;
  meep::realnum *(*arg2)[2] ;
  meep::grid_volume *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:multilevel_susceptibility_new_internal_data",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__multilevel_susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multilevel_susceptibility_new_internal_data" "', argument " "1"" of type '" "meep::multilevel_susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::multilevel_susceptibility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "multilevel_susceptibility_new_internal_data" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *(*)[2] >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "multilevel_susceptibility_new_internal_data" "', argument " "3"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "multilevel_susceptibility_new_internal_data" "', argument " "3"" of type '" "meep::grid_volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::grid_volume * >(argp3);
  result = (void *)((meep::multilevel_susceptibility const *)arg1)->new_internal_data((meep::realnum *(*)[2])arg2,(meep::grid_volume const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multilevel_susceptibility_init_internal_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::multilevel_susceptibility *arg1 = (meep::multilevel_susceptibility *) 0 ;
  meep::realnum *(*arg2)[2] ;
  double arg3 ;
  meep::grid_volume *arg4 = 0 ;
  void *arg5 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:multilevel_susceptibility_init_internal_data",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__multilevel_susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multilevel_susceptibility_init_internal_data" "', argument " "1"" of type '" "meep::multilevel_susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::multilevel_susceptibility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "multilevel_susceptibility_init_internal_data" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *(*)[2] >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "multilevel_susceptibility_init_internal_data" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "multilevel_susceptibility_init_internal_data" "', argument " "4"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "multilevel_susceptibility_init_internal_data" "', argument " "4"" of type '" "meep::grid_volume const &""'"); 
  }
  arg4 = reinterpret_cast< meep::grid_volume * >(argp4);
  res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "multilevel_susceptibility_init_internal_data" "', argument " "5"" of type '" "void *""'"); 
  }
  ((meep::multilevel_susceptibility const *)arg1)->init_internal_data((meep::realnum *(*)[2])arg2,arg3,(meep::grid_volume const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multilevel_susceptibility_copy_internal_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::multilevel_susceptibility *arg1 = (meep::multilevel_susceptibility *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:multilevel_susceptibility_copy_internal_data",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__multilevel_susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multilevel_susceptibility_copy_internal_data" "', argument " "1"" of type '" "meep::multilevel_susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::multilevel_susceptibility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "multilevel_susceptibility_copy_internal_data" "', argument " "2"" of type '" "void *""'"); 
  }
  result = (void *)((meep::multilevel_susceptibility const *)arg1)->copy_internal_data(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multilevel_susceptibility_delete_internal_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::multilevel_susceptibility *arg1 = (meep::multilevel_susceptibility *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:multilevel_susceptibility_delete_internal_data",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__multilevel_susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multilevel_susceptibility_delete_internal_data" "', argument " "1"" of type '" "meep::multilevel_susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::multilevel_susceptibility * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "multilevel_susceptibility_delete_internal_data" "', argument " "2"" of type '" "void *""'"); 
  }
  ((meep::multilevel_susceptibility const *)arg1)->delete_internal_data(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multilevel_susceptibility_num_cinternal_notowned_needed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::multilevel_susceptibility *arg1 = (meep::multilevel_susceptibility *) 0 ;
  meep::component arg2 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:multilevel_susceptibility_num_cinternal_notowned_needed",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__multilevel_susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multilevel_susceptibility_num_cinternal_notowned_needed" "', argument " "1"" of type '" "meep::multilevel_susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::multilevel_susceptibility * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "multilevel_susceptibility_num_cinternal_notowned_needed" "', argument " "3"" of type '" "void *""'"); 
  }
  result = (int)((meep::multilevel_susceptibility const *)arg1)->num_cinternal_notowned_needed(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multilevel_susceptibility_cinternal_notowned_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::multilevel_susceptibility *arg1 = (meep::multilevel_susceptibility *) 0 ;
  int arg2 ;
  meep::component arg3 ;
  int arg4 ;
  int arg5 ;
  void *arg6 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  meep::realnum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:multilevel_susceptibility_cinternal_notowned_ptr",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__multilevel_susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multilevel_susceptibility_cinternal_notowned_ptr" "', argument " "1"" of type '" "meep::multilevel_susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::multilevel_susceptibility * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "multilevel_susceptibility_cinternal_notowned_ptr" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    arg3 = static_cast<meep::component>(PyInteger_AsLong(obj2));
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "multilevel_susceptibility_cinternal_notowned_ptr" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "multilevel_susceptibility_cinternal_notowned_ptr" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6), 0, 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "multilevel_susceptibility_cinternal_notowned_ptr" "', argument " "6"" of type '" "void *""'"); 
  }
  result = (meep::realnum *)((meep::multilevel_susceptibility const *)arg1)->cinternal_notowned_ptr(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multilevel_susceptibility_needs_W_notowned(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::multilevel_susceptibility *arg1 = (meep::multilevel_susceptibility *) 0 ;
  meep::component arg2 ;
  meep::realnum *(*arg3)[2] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:multilevel_susceptibility_needs_W_notowned",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__multilevel_susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multilevel_susceptibility_needs_W_notowned" "', argument " "1"" of type '" "meep::multilevel_susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::multilevel_susceptibility * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "multilevel_susceptibility_needs_W_notowned" "', argument " "3"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg3 = reinterpret_cast< meep::realnum *(*)[2] >(argp3);
  result = (bool)((meep::multilevel_susceptibility const *)arg1)->needs_W_notowned(arg2,(meep::realnum *(*)[2])arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multilevel_susceptibility_needs_W_prev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::multilevel_susceptibility *arg1 = (meep::multilevel_susceptibility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:multilevel_susceptibility_needs_W_prev",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__multilevel_susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multilevel_susceptibility_needs_W_prev" "', argument " "1"" of type '" "meep::multilevel_susceptibility const *""'"); 
  }
  arg1 = reinterpret_cast< meep::multilevel_susceptibility * >(argp1);
  result = (bool)((meep::multilevel_susceptibility const *)arg1)->needs_W_prev();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *multilevel_susceptibility_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__multilevel_susceptibility, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_h5file__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  meep::h5file::access_mode arg2 ;
  bool arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::h5file *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_h5file",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_h5file" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_h5file" "', argument " "2"" of type '" "meep::h5file::access_mode""'");
  } 
  arg2 = static_cast< meep::h5file::access_mode >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_h5file" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (meep::h5file *)new meep::h5file((char const *)arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__h5file, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_h5file__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  meep::h5file::access_mode arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::h5file *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_h5file",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_h5file" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_h5file" "', argument " "2"" of type '" "meep::h5file::access_mode""'");
  } 
  arg2 = static_cast< meep::h5file::access_mode >(val2);
  result = (meep::h5file *)new meep::h5file((char const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__h5file, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_h5file__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::h5file *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_h5file",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_h5file" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (meep::h5file *)new meep::h5file((char const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__h5file, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_h5file(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_h5file__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_h5file__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_h5file__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_h5file'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::h5file::h5file(char const *,meep::h5file::access_mode,bool)\n"
    "    meep::h5file::h5file(char const *,meep::h5file::access_mode)\n"
    "    meep::h5file::h5file(char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_h5file(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::h5file *arg1 = (meep::h5file *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_h5file",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__h5file, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_h5file" "', argument " "1"" of type '" "meep::h5file *""'"); 
  }
  arg1 = reinterpret_cast< meep::h5file * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_h5file_ok(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::h5file *arg1 = (meep::h5file *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:h5file_ok",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "h5file_ok" "', argument " "1"" of type '" "meep::h5file *""'"); 
  }
  arg1 = reinterpret_cast< meep::h5file * >(argp1);
  result = (bool)(arg1)->ok();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_h5file_read__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::h5file *arg1 = (meep::h5file *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  size_t *arg4 = (size_t *) 0 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  meep::realnum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:h5file_read",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "h5file_read" "', argument " "1"" of type '" "meep::h5file *""'"); 
  }
  arg1 = reinterpret_cast< meep::h5file * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "h5file_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "h5file_read" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "h5file_read" "', argument " "4"" of type '" "size_t *""'"); 
  }
  arg4 = reinterpret_cast< size_t * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "h5file_read" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (meep::realnum *)(arg1)->read((char const *)arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_h5file_write__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::h5file *arg1 = (meep::h5file *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  size_t *arg4 = (size_t *) 0 ;
  meep::realnum *arg5 = (meep::realnum *) 0 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:h5file_write",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "h5file_write" "', argument " "1"" of type '" "meep::h5file *""'"); 
  }
  arg1 = reinterpret_cast< meep::h5file * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "h5file_write" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "h5file_write" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "h5file_write" "', argument " "4"" of type '" "size_t const *""'"); 
  }
  arg4 = reinterpret_cast< size_t * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "h5file_write" "', argument " "5"" of type '" "meep::realnum *""'"); 
  }
  arg5 = reinterpret_cast< meep::realnum * >(argp5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "h5file_write" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  (arg1)->write((char const *)arg2,arg3,(size_t const *)arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_h5file_write__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::h5file *arg1 = (meep::h5file *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  size_t *arg4 = (size_t *) 0 ;
  meep::realnum *arg5 = (meep::realnum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:h5file_write",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "h5file_write" "', argument " "1"" of type '" "meep::h5file *""'"); 
  }
  arg1 = reinterpret_cast< meep::h5file * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "h5file_write" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "h5file_write" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "h5file_write" "', argument " "4"" of type '" "size_t const *""'"); 
  }
  arg4 = reinterpret_cast< size_t * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "h5file_write" "', argument " "5"" of type '" "meep::realnum *""'"); 
  }
  arg5 = reinterpret_cast< meep::realnum * >(argp5);
  (arg1)->write((char const *)arg2,arg3,(size_t const *)arg4,arg5);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_h5file_read__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::h5file *arg1 = (meep::h5file *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:h5file_read",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "h5file_read" "', argument " "1"" of type '" "meep::h5file *""'"); 
  }
  arg1 = reinterpret_cast< meep::h5file * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "h5file_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (char *)(arg1)->read((char const *)arg2);
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_h5file_read(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__h5file, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_h5file_read__SWIG_1(self, args);
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__h5file, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_int, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_size_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_h5file_read__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'h5file_read'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::h5file::read(char const *,int *,size_t *,int)\n"
    "    meep::h5file::read(char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_h5file_write__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::h5file *arg1 = (meep::h5file *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:h5file_write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "h5file_write" "', argument " "1"" of type '" "meep::h5file *""'"); 
  }
  arg1 = reinterpret_cast< meep::h5file * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "h5file_write" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "h5file_write" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->write((char const *)arg2,(char const *)arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_h5file_write(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__h5file, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_h5file_write__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__h5file, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_size_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_h5file_write__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__h5file, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_size_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_h5file_write__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'h5file_write'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::h5file::write(char const *,int,size_t const *,meep::realnum *,bool)\n"
    "    meep::h5file::write(char const *,int,size_t const *,meep::realnum *)\n"
    "    meep::h5file::write(char const *,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_h5file_create_data__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::h5file *arg1 = (meep::h5file *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  size_t *arg4 = (size_t *) 0 ;
  bool arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:h5file_create_data",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "h5file_create_data" "', argument " "1"" of type '" "meep::h5file *""'"); 
  }
  arg1 = reinterpret_cast< meep::h5file * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "h5file_create_data" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "h5file_create_data" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "h5file_create_data" "', argument " "4"" of type '" "size_t const *""'"); 
  }
  arg4 = reinterpret_cast< size_t * >(argp4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "h5file_create_data" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "h5file_create_data" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  (arg1)->create_data((char const *)arg2,arg3,(size_t const *)arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_h5file_create_data__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::h5file *arg1 = (meep::h5file *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  size_t *arg4 = (size_t *) 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:h5file_create_data",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "h5file_create_data" "', argument " "1"" of type '" "meep::h5file *""'"); 
  }
  arg1 = reinterpret_cast< meep::h5file * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "h5file_create_data" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "h5file_create_data" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "h5file_create_data" "', argument " "4"" of type '" "size_t const *""'"); 
  }
  arg4 = reinterpret_cast< size_t * >(argp4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "h5file_create_data" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  (arg1)->create_data((char const *)arg2,arg3,(size_t const *)arg4,arg5);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_h5file_create_data__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::h5file *arg1 = (meep::h5file *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  size_t *arg4 = (size_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:h5file_create_data",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "h5file_create_data" "', argument " "1"" of type '" "meep::h5file *""'"); 
  }
  arg1 = reinterpret_cast< meep::h5file * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "h5file_create_data" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "h5file_create_data" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "h5file_create_data" "', argument " "4"" of type '" "size_t const *""'"); 
  }
  arg4 = reinterpret_cast< size_t * >(argp4);
  (arg1)->create_data((char const *)arg2,arg3,(size_t const *)arg4);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_h5file_create_data(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__h5file, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_size_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_h5file_create_data__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__h5file, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_size_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_h5file_create_data__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__h5file, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_size_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_h5file_create_data__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'h5file_create_data'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::h5file::create_data(char const *,int,size_t const *,bool,bool)\n"
    "    meep::h5file::create_data(char const *,int,size_t const *,bool)\n"
    "    meep::h5file::create_data(char const *,int,size_t const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_h5file_extend_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::h5file *arg1 = (meep::h5file *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  size_t *arg4 = (size_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:h5file_extend_data",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "h5file_extend_data" "', argument " "1"" of type '" "meep::h5file *""'"); 
  }
  arg1 = reinterpret_cast< meep::h5file * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "h5file_extend_data" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "h5file_extend_data" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "h5file_extend_data" "', argument " "4"" of type '" "size_t const *""'"); 
  }
  arg4 = reinterpret_cast< size_t * >(argp4);
  (arg1)->extend_data((char const *)arg2,arg3,(size_t const *)arg4);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_h5file_create_or_extend_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::h5file *arg1 = (meep::h5file *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  size_t *arg4 = (size_t *) 0 ;
  bool arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:h5file_create_or_extend_data",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "h5file_create_or_extend_data" "', argument " "1"" of type '" "meep::h5file *""'"); 
  }
  arg1 = reinterpret_cast< meep::h5file * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "h5file_create_or_extend_data" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "h5file_create_or_extend_data" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "h5file_create_or_extend_data" "', argument " "4"" of type '" "size_t const *""'"); 
  }
  arg4 = reinterpret_cast< size_t * >(argp4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "h5file_create_or_extend_data" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "h5file_create_or_extend_data" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  (arg1)->create_or_extend_data((char const *)arg2,arg3,(size_t const *)arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_h5file_write_chunk__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::h5file *arg1 = (meep::h5file *) 0 ;
  int arg2 ;
  size_t *arg3 = (size_t *) 0 ;
  size_t *arg4 = (size_t *) 0 ;
  meep::realnum *arg5 = (meep::realnum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:h5file_write_chunk",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "h5file_write_chunk" "', argument " "1"" of type '" "meep::h5file *""'"); 
  }
  arg1 = reinterpret_cast< meep::h5file * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "h5file_write_chunk" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "h5file_write_chunk" "', argument " "3"" of type '" "size_t const *""'"); 
  }
  arg3 = reinterpret_cast< size_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "h5file_write_chunk" "', argument " "4"" of type '" "size_t const *""'"); 
  }
  arg4 = reinterpret_cast< size_t * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "h5file_write_chunk" "', argument " "5"" of type '" "meep::realnum *""'"); 
  }
  arg5 = reinterpret_cast< meep::realnum * >(argp5);
  (arg1)->write_chunk(arg2,(size_t const *)arg3,(size_t const *)arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_h5file_write_chunk__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::h5file *arg1 = (meep::h5file *) 0 ;
  int arg2 ;
  size_t *arg3 = (size_t *) 0 ;
  size_t *arg4 = (size_t *) 0 ;
  size_t *arg5 = (size_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:h5file_write_chunk",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "h5file_write_chunk" "', argument " "1"" of type '" "meep::h5file *""'"); 
  }
  arg1 = reinterpret_cast< meep::h5file * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "h5file_write_chunk" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "h5file_write_chunk" "', argument " "3"" of type '" "size_t const *""'"); 
  }
  arg3 = reinterpret_cast< size_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "h5file_write_chunk" "', argument " "4"" of type '" "size_t const *""'"); 
  }
  arg4 = reinterpret_cast< size_t * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "h5file_write_chunk" "', argument " "5"" of type '" "size_t *""'"); 
  }
  arg5 = reinterpret_cast< size_t * >(argp5);
  (arg1)->write_chunk(arg2,(size_t const *)arg3,(size_t const *)arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_h5file_write_chunk(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__h5file, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_size_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_size_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_h5file_write_chunk__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__h5file, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_size_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_size_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_size_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_h5file_write_chunk__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'h5file_write_chunk'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::h5file::write_chunk(int,size_t const *,size_t const *,meep::realnum *)\n"
    "    meep::h5file::write_chunk(int,size_t const *,size_t const *,size_t *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_h5file_done_writing_chunks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::h5file *arg1 = (meep::h5file *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:h5file_done_writing_chunks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "h5file_done_writing_chunks" "', argument " "1"" of type '" "meep::h5file *""'"); 
  }
  arg1 = reinterpret_cast< meep::h5file * >(argp1);
  (arg1)->done_writing_chunks();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_h5file_read_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::h5file *arg1 = (meep::h5file *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  size_t *arg4 = (size_t *) 0 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:h5file_read_size",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "h5file_read_size" "', argument " "1"" of type '" "meep::h5file *""'"); 
  }
  arg1 = reinterpret_cast< meep::h5file * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "h5file_read_size" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "h5file_read_size" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "h5file_read_size" "', argument " "4"" of type '" "size_t *""'"); 
  }
  arg4 = reinterpret_cast< size_t * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "h5file_read_size" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  (arg1)->read_size((char const *)arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_h5file_read_chunk__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::h5file *arg1 = (meep::h5file *) 0 ;
  int arg2 ;
  size_t *arg3 = (size_t *) 0 ;
  size_t *arg4 = (size_t *) 0 ;
  meep::realnum *arg5 = (meep::realnum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:h5file_read_chunk",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "h5file_read_chunk" "', argument " "1"" of type '" "meep::h5file *""'"); 
  }
  arg1 = reinterpret_cast< meep::h5file * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "h5file_read_chunk" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "h5file_read_chunk" "', argument " "3"" of type '" "size_t const *""'"); 
  }
  arg3 = reinterpret_cast< size_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "h5file_read_chunk" "', argument " "4"" of type '" "size_t const *""'"); 
  }
  arg4 = reinterpret_cast< size_t * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "h5file_read_chunk" "', argument " "5"" of type '" "meep::realnum *""'"); 
  }
  arg5 = reinterpret_cast< meep::realnum * >(argp5);
  (arg1)->read_chunk(arg2,(size_t const *)arg3,(size_t const *)arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_h5file_read_chunk__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::h5file *arg1 = (meep::h5file *) 0 ;
  int arg2 ;
  size_t *arg3 = (size_t *) 0 ;
  size_t *arg4 = (size_t *) 0 ;
  size_t *arg5 = (size_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:h5file_read_chunk",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "h5file_read_chunk" "', argument " "1"" of type '" "meep::h5file *""'"); 
  }
  arg1 = reinterpret_cast< meep::h5file * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "h5file_read_chunk" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "h5file_read_chunk" "', argument " "3"" of type '" "size_t const *""'"); 
  }
  arg3 = reinterpret_cast< size_t * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "h5file_read_chunk" "', argument " "4"" of type '" "size_t const *""'"); 
  }
  arg4 = reinterpret_cast< size_t * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "h5file_read_chunk" "', argument " "5"" of type '" "size_t *""'"); 
  }
  arg5 = reinterpret_cast< size_t * >(argp5);
  (arg1)->read_chunk(arg2,(size_t const *)arg3,(size_t const *)arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_h5file_read_chunk(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__h5file, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_size_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_size_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_h5file_read_chunk__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__h5file, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_size_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_size_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_size_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_h5file_read_chunk__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'h5file_read_chunk'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::h5file::read_chunk(int,size_t const *,size_t const *,meep::realnum *)\n"
    "    meep::h5file::read_chunk(int,size_t const *,size_t const *,size_t *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_h5file_remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::h5file *arg1 = (meep::h5file *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:h5file_remove",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "h5file_remove" "', argument " "1"" of type '" "meep::h5file *""'"); 
  }
  arg1 = reinterpret_cast< meep::h5file * >(argp1);
  (arg1)->remove();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_h5file_remove_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::h5file *arg1 = (meep::h5file *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:h5file_remove_data",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "h5file_remove_data" "', argument " "1"" of type '" "meep::h5file *""'"); 
  }
  arg1 = reinterpret_cast< meep::h5file * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "h5file_remove_data" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->remove_data((char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_h5file_file_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::h5file *arg1 = (meep::h5file *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:h5file_file_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "h5file_file_name" "', argument " "1"" of type '" "meep::h5file const *""'"); 
  }
  arg1 = reinterpret_cast< meep::h5file * >(argp1);
  result = (char *)((meep::h5file const *)arg1)->file_name();
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_h5file_prevent_deadlock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::h5file *arg1 = (meep::h5file *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:h5file_prevent_deadlock",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "h5file_prevent_deadlock" "', argument " "1"" of type '" "meep::h5file *""'"); 
  }
  arg1 = reinterpret_cast< meep::h5file * >(argp1);
  (arg1)->prevent_deadlock();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_h5file_extending_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::h5file *arg1 = (meep::h5file *) 0 ;
  meep::h5file::extending_s *arg2 = (meep::h5file::extending_s *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:h5file_extending_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "h5file_extending_set" "', argument " "1"" of type '" "meep::h5file *""'"); 
  }
  arg1 = reinterpret_cast< meep::h5file * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__h5file__extending_s, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "h5file_extending_set" "', argument " "2"" of type '" "meep::h5file::extending_s *""'"); 
  }
  arg2 = reinterpret_cast< meep::h5file::extending_s * >(argp2);
  if (arg1) (arg1)->extending = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_h5file_extending_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::h5file *arg1 = (meep::h5file *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::h5file::extending_s *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:h5file_extending_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "h5file_extending_get" "', argument " "1"" of type '" "meep::h5file *""'"); 
  }
  arg1 = reinterpret_cast< meep::h5file * >(argp1);
  result = (meep::h5file::extending_s *) ((arg1)->extending);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__h5file__extending_s, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_h5file_get_extending(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::h5file *arg1 = (meep::h5file *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::h5file::extending_s *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:h5file_get_extending",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "h5file_get_extending" "', argument " "1"" of type '" "meep::h5file const *""'"); 
  }
  arg1 = reinterpret_cast< meep::h5file * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "h5file_get_extending" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (meep::h5file::extending_s *)((meep::h5file const *)arg1)->get_extending((char const *)arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__h5file__extending_s, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *h5file_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__h5file, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_material_function(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::material_function *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_material_function")) SWIG_fail;
  result = (meep::material_function *)new meep::material_function();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__material_function, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_material_function(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::material_function *arg1 = (meep::material_function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_material_function",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__material_function, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_material_function" "', argument " "1"" of type '" "meep::material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::material_function * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_material_function_set_volume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::material_function *arg1 = (meep::material_function *) 0 ;
  meep::volume *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:material_function_set_volume",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__material_function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "material_function_set_volume" "', argument " "1"" of type '" "meep::material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::material_function * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "material_function_set_volume" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "material_function_set_volume" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  (arg1)->set_volume((meep::volume const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_material_function_unset_volume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::material_function *arg1 = (meep::material_function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:material_function_unset_volume",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__material_function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "material_function_unset_volume" "', argument " "1"" of type '" "meep::material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::material_function * >(argp1);
  (arg1)->unset_volume();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_material_function_chi1p1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::material_function *arg1 = (meep::material_function *) 0 ;
  meep::field_type arg2 ;
  meep::vec *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:material_function_chi1p1",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__material_function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "material_function_chi1p1" "', argument " "1"" of type '" "meep::material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::material_function * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "material_function_chi1p1" "', argument " "2"" of type '" "meep::field_type""'");
  } 
  arg2 = static_cast< meep::field_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "material_function_chi1p1" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "material_function_chi1p1" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  arg3 = reinterpret_cast< meep::vec * >(argp3);
  result = (double)(arg1)->chi1p1(arg2,(meep::vec const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_material_function_eps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::material_function *arg1 = (meep::material_function *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:material_function_eps",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__material_function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "material_function_eps" "', argument " "1"" of type '" "meep::material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::material_function * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "material_function_eps" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "material_function_eps" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = (double)(arg1)->eps((meep::vec const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_material_function_has_mu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::material_function *arg1 = (meep::material_function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:material_function_has_mu",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__material_function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "material_function_has_mu" "', argument " "1"" of type '" "meep::material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::material_function * >(argp1);
  result = (bool)(arg1)->has_mu();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_material_function_mu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::material_function *arg1 = (meep::material_function *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:material_function_mu",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__material_function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "material_function_mu" "', argument " "1"" of type '" "meep::material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::material_function * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "material_function_mu" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "material_function_mu" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = (double)(arg1)->mu((meep::vec const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_material_function_has_conductivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::material_function *arg1 = (meep::material_function *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:material_function_has_conductivity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__material_function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "material_function_has_conductivity" "', argument " "1"" of type '" "meep::material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::material_function * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  result = (bool)(arg1)->has_conductivity(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_material_function_conductivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::material_function *arg1 = (meep::material_function *) 0 ;
  meep::component arg2 ;
  meep::vec *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:material_function_conductivity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__material_function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "material_function_conductivity" "', argument " "1"" of type '" "meep::material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::material_function * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "material_function_conductivity" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "material_function_conductivity" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  arg3 = reinterpret_cast< meep::vec * >(argp3);
  result = (double)(arg1)->conductivity(arg2,(meep::vec const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_material_function_normal_vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::material_function *arg1 = (meep::material_function *) 0 ;
  meep::field_type arg2 ;
  meep::volume *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:material_function_normal_vector",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__material_function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "material_function_normal_vector" "', argument " "1"" of type '" "meep::material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::material_function * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "material_function_normal_vector" "', argument " "2"" of type '" "meep::field_type""'");
  } 
  arg2 = static_cast< meep::field_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "material_function_normal_vector" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "material_function_normal_vector" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  result = (arg1)->normal_vector(arg2,(meep::volume const &)*arg3);
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_material_function_eff_chi1inv_row__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::material_function *arg1 = (meep::material_function *) 0 ;
  meep::component arg2 ;
  double *arg3 ;
  meep::volume *arg4 = 0 ;
  double arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:material_function_eff_chi1inv_row",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__material_function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "material_function_eff_chi1inv_row" "', argument " "1"" of type '" "meep::material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::material_function * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "material_function_eff_chi1inv_row" "', argument " "3"" of type '" "double [3]""'"); 
  } 
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "material_function_eff_chi1inv_row" "', argument " "4"" of type '" "meep::volume const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "material_function_eff_chi1inv_row" "', argument " "4"" of type '" "meep::volume const &""'"); 
  }
  arg4 = reinterpret_cast< meep::volume * >(argp4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "material_function_eff_chi1inv_row" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "material_function_eff_chi1inv_row" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  (arg1)->eff_chi1inv_row(arg2,arg3,(meep::volume const &)*arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_material_function_eff_chi1inv_row__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::material_function *arg1 = (meep::material_function *) 0 ;
  meep::component arg2 ;
  double *arg3 ;
  meep::volume *arg4 = 0 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:material_function_eff_chi1inv_row",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__material_function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "material_function_eff_chi1inv_row" "', argument " "1"" of type '" "meep::material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::material_function * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "material_function_eff_chi1inv_row" "', argument " "3"" of type '" "double [3]""'"); 
  } 
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "material_function_eff_chi1inv_row" "', argument " "4"" of type '" "meep::volume const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "material_function_eff_chi1inv_row" "', argument " "4"" of type '" "meep::volume const &""'"); 
  }
  arg4 = reinterpret_cast< meep::volume * >(argp4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "material_function_eff_chi1inv_row" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->eff_chi1inv_row(arg2,arg3,(meep::volume const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_material_function_eff_chi1inv_row__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::material_function *arg1 = (meep::material_function *) 0 ;
  meep::component arg2 ;
  double *arg3 ;
  meep::volume *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:material_function_eff_chi1inv_row",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__material_function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "material_function_eff_chi1inv_row" "', argument " "1"" of type '" "meep::material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::material_function * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "material_function_eff_chi1inv_row" "', argument " "3"" of type '" "double [3]""'"); 
  } 
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "material_function_eff_chi1inv_row" "', argument " "4"" of type '" "meep::volume const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "material_function_eff_chi1inv_row" "', argument " "4"" of type '" "meep::volume const &""'"); 
  }
  arg4 = reinterpret_cast< meep::volume * >(argp4);
  (arg1)->eff_chi1inv_row(arg2,arg3,(meep::volume const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_material_function_eff_chi1inv_row(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__material_function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__volume, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_material_function_eff_chi1inv_row__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__material_function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__volume, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_material_function_eff_chi1inv_row__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__material_function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__volume, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_material_function_eff_chi1inv_row__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'material_function_eff_chi1inv_row'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::material_function::eff_chi1inv_row(meep::component,double [3],meep::volume const &,double,int)\n"
    "    meep::material_function::eff_chi1inv_row(meep::component,double [3],meep::volume const &,double)\n"
    "    meep::material_function::eff_chi1inv_row(meep::component,double [3],meep::volume const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_material_function_sigma_row(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::material_function *arg1 = (meep::material_function *) 0 ;
  meep::component arg2 ;
  double *arg3 ;
  meep::vec *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:material_function_sigma_row",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__material_function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "material_function_sigma_row" "', argument " "1"" of type '" "meep::material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::material_function * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "material_function_sigma_row" "', argument " "3"" of type '" "double [3]""'"); 
  } 
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "material_function_sigma_row" "', argument " "4"" of type '" "meep::vec const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "material_function_sigma_row" "', argument " "4"" of type '" "meep::vec const &""'"); 
  }
  arg4 = reinterpret_cast< meep::vec * >(argp4);
  (arg1)->sigma_row(arg2,arg3,(meep::vec const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_material_function_has_chi3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::material_function *arg1 = (meep::material_function *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:material_function_has_chi3",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__material_function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "material_function_has_chi3" "', argument " "1"" of type '" "meep::material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::material_function * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  result = (bool)(arg1)->has_chi3(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_material_function_chi3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::material_function *arg1 = (meep::material_function *) 0 ;
  meep::component arg2 ;
  meep::vec *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:material_function_chi3",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__material_function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "material_function_chi3" "', argument " "1"" of type '" "meep::material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::material_function * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "material_function_chi3" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "material_function_chi3" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  arg3 = reinterpret_cast< meep::vec * >(argp3);
  result = (double)(arg1)->chi3(arg2,(meep::vec const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_material_function_has_chi2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::material_function *arg1 = (meep::material_function *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:material_function_has_chi2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__material_function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "material_function_has_chi2" "', argument " "1"" of type '" "meep::material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::material_function * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  result = (bool)(arg1)->has_chi2(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_material_function_chi2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::material_function *arg1 = (meep::material_function *) 0 ;
  meep::component arg2 ;
  meep::vec *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:material_function_chi2",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__material_function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "material_function_chi2" "', argument " "1"" of type '" "meep::material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::material_function * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "material_function_chi2" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "material_function_chi2" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  arg3 = reinterpret_cast< meep::vec * >(argp3);
  result = (double)(arg1)->chi2(arg2,(meep::vec const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *material_function_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__material_function, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_simple_material_function(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double (*arg1)(meep::vec const &) = (double (*)(meep::vec const &)) 0 ;
  PyObject * obj0 = 0 ;
  meep::simple_material_function *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_simple_material_function",&obj0)) SWIG_fail;
  {
    if (obj0 == Py_None) {
      arg1 = NULL;
      py_callback = NULL;
    } else {
      arg1 = py_callback_wrap;
      py_callback = obj0;
      Py_INCREF(py_callback);
    }
  }
  result = (meep::simple_material_function *)new meep::simple_material_function(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__simple_material_function, SWIG_POINTER_NEW |  0 );
  {
    Py_XDECREF(py_callback);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_callback);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_simple_material_function(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::simple_material_function *arg1 = (meep::simple_material_function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_simple_material_function",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__simple_material_function, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_simple_material_function" "', argument " "1"" of type '" "meep::simple_material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::simple_material_function * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_material_function_chi1p1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::simple_material_function *arg1 = (meep::simple_material_function *) 0 ;
  meep::field_type arg2 ;
  meep::vec *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:simple_material_function_chi1p1",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__simple_material_function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_material_function_chi1p1" "', argument " "1"" of type '" "meep::simple_material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::simple_material_function * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "simple_material_function_chi1p1" "', argument " "2"" of type '" "meep::field_type""'");
  } 
  arg2 = static_cast< meep::field_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "simple_material_function_chi1p1" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "simple_material_function_chi1p1" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  arg3 = reinterpret_cast< meep::vec * >(argp3);
  result = (double)(arg1)->chi1p1(arg2,(meep::vec const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_material_function_eps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::simple_material_function *arg1 = (meep::simple_material_function *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:simple_material_function_eps",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__simple_material_function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_material_function_eps" "', argument " "1"" of type '" "meep::simple_material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::simple_material_function * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "simple_material_function_eps" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "simple_material_function_eps" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = (double)(arg1)->eps((meep::vec const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_material_function_mu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::simple_material_function *arg1 = (meep::simple_material_function *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:simple_material_function_mu",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__simple_material_function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_material_function_mu" "', argument " "1"" of type '" "meep::simple_material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::simple_material_function * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "simple_material_function_mu" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "simple_material_function_mu" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = (double)(arg1)->mu((meep::vec const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_material_function_conductivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::simple_material_function *arg1 = (meep::simple_material_function *) 0 ;
  meep::component arg2 ;
  meep::vec *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:simple_material_function_conductivity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__simple_material_function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_material_function_conductivity" "', argument " "1"" of type '" "meep::simple_material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::simple_material_function * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "simple_material_function_conductivity" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "simple_material_function_conductivity" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  arg3 = reinterpret_cast< meep::vec * >(argp3);
  result = (double)(arg1)->conductivity(arg2,(meep::vec const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_material_function_sigma_row(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::simple_material_function *arg1 = (meep::simple_material_function *) 0 ;
  meep::component arg2 ;
  double *arg3 ;
  meep::vec *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:simple_material_function_sigma_row",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__simple_material_function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_material_function_sigma_row" "', argument " "1"" of type '" "meep::simple_material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::simple_material_function * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "simple_material_function_sigma_row" "', argument " "3"" of type '" "double [3]""'"); 
  } 
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "simple_material_function_sigma_row" "', argument " "4"" of type '" "meep::vec const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "simple_material_function_sigma_row" "', argument " "4"" of type '" "meep::vec const &""'"); 
  }
  arg4 = reinterpret_cast< meep::vec * >(argp4);
  (arg1)->sigma_row(arg2,arg3,(meep::vec const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_material_function_chi3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::simple_material_function *arg1 = (meep::simple_material_function *) 0 ;
  meep::component arg2 ;
  meep::vec *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:simple_material_function_chi3",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__simple_material_function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_material_function_chi3" "', argument " "1"" of type '" "meep::simple_material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::simple_material_function * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "simple_material_function_chi3" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "simple_material_function_chi3" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  arg3 = reinterpret_cast< meep::vec * >(argp3);
  result = (double)(arg1)->chi3(arg2,(meep::vec const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_material_function_chi2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::simple_material_function *arg1 = (meep::simple_material_function *) 0 ;
  meep::component arg2 ;
  meep::vec *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:simple_material_function_chi2",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__simple_material_function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_material_function_chi2" "', argument " "1"" of type '" "meep::simple_material_function *""'"); 
  }
  arg1 = reinterpret_cast< meep::simple_material_function * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "simple_material_function_chi2" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "simple_material_function_chi2" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  arg3 = reinterpret_cast< meep::vec * >(argp3);
  result = (double)(arg1)->chi2(arg2,(meep::vec const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *simple_material_function_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__simple_material_function, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_structure_chunk_a_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_chunk_a_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_a_set" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "structure_chunk_a_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->a = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_a_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_chunk_a_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_a_get" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  result = (double) ((arg1)->a);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_Courant_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_chunk_Courant_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_Courant_set" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "structure_chunk_Courant_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->Courant = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_Courant_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_chunk_Courant_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_Courant_get" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  result = (double) ((arg1)->Courant);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_dt_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_chunk_dt_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_dt_set" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "structure_chunk_dt_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->dt = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_dt_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_chunk_dt_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_dt_get" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  result = (double) ((arg1)->dt);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_chi3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  meep::realnum **arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_chunk_chi3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_chi3_set" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_chunk_chi3_set" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum ** >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_COMPONENTS; ++ii) *(meep::realnum * *)&arg1->chi3[ii] = *((meep::realnum * *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""chi3""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_chi3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::realnum **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_chunk_chi3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_chi3_get" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  result = (meep::realnum **)(meep::realnum **) ((arg1)->chi3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_chi2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  meep::realnum **arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_chunk_chi2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_chi2_set" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_chunk_chi2_set" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum ** >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_COMPONENTS; ++ii) *(meep::realnum * *)&arg1->chi2[ii] = *((meep::realnum * *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""chi2""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_chi2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::realnum **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_chunk_chi2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_chi2_get" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  result = (meep::realnum **)(meep::realnum **) ((arg1)->chi2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_chi1inv_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  meep::realnum *(*arg2)[5] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_chunk_chi1inv_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_chi1inv_set" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_5__p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_chunk_chi1inv_set" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][5]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *(*)[5] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_COMPONENTS; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)5; ++jj) arg1->chi1inv[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""chi1inv""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][5]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""chi1inv""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][5]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_chi1inv_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::realnum *(*result)[5] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_chunk_chi1inv_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_chi1inv_get" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  result = (meep::realnum *(*)[5])(meep::realnum *(*)[5]) ((arg1)->chi1inv);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_5__p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_trivial_chi1inv_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  bool (*arg2)[5] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_chunk_trivial_chi1inv_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_trivial_chi1inv_set" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_5__bool, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_chunk_trivial_chi1inv_set" "', argument " "2"" of type '" "bool [meep::NUM_FIELD_COMPONENTS][5]""'"); 
  } 
  arg2 = reinterpret_cast< bool (*)[5] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_COMPONENTS; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)5; ++jj) arg1->trivial_chi1inv[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""trivial_chi1inv""' of type '""bool [meep::NUM_FIELD_COMPONENTS][5]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""trivial_chi1inv""' of type '""bool [meep::NUM_FIELD_COMPONENTS][5]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_trivial_chi1inv_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool (*result)[5] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_chunk_trivial_chi1inv_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_trivial_chi1inv_get" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  result = (bool (*)[5])(bool (*)[5]) ((arg1)->trivial_chi1inv);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_5__bool, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_conductivity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  meep::realnum *(*arg2)[5] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_chunk_conductivity_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_conductivity_set" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_5__p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_chunk_conductivity_set" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][5]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *(*)[5] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_COMPONENTS; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)5; ++jj) arg1->conductivity[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""conductivity""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][5]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""conductivity""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][5]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_conductivity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::realnum *(*result)[5] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_chunk_conductivity_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_conductivity_get" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  result = (meep::realnum *(*)[5])(meep::realnum *(*)[5]) ((arg1)->conductivity);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_5__p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_condinv_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  meep::realnum *(*arg2)[5] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_chunk_condinv_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_condinv_set" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_5__p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_chunk_condinv_set" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][5]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *(*)[5] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_COMPONENTS; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)5; ++jj) arg1->condinv[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""condinv""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][5]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""condinv""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][5]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_condinv_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::realnum *(*result)[5] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_chunk_condinv_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_condinv_get" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  result = (meep::realnum *(*)[5])(meep::realnum *(*)[5]) ((arg1)->condinv);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_5__p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_condinv_stale_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_chunk_condinv_stale_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_condinv_stale_set" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "structure_chunk_condinv_stale_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->condinv_stale = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_condinv_stale_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_chunk_condinv_stale_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_condinv_stale_get" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  result = (bool) ((arg1)->condinv_stale);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_sig_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  double **arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_chunk_sig_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_sig_set" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_chunk_sig_set" "', argument " "2"" of type '" "double *[5]""'"); 
  } 
  arg2 = reinterpret_cast< double ** >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)5; ++ii) *(double * *)&arg1->sig[ii] = *((double * *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""sig""' of type '""double *[5]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_sig_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_chunk_sig_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_sig_get" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  result = (double **)(double **) ((arg1)->sig);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_kap_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  double **arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_chunk_kap_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_kap_set" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_chunk_kap_set" "', argument " "2"" of type '" "double *[5]""'"); 
  } 
  arg2 = reinterpret_cast< double ** >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)5; ++ii) *(double * *)&arg1->kap[ii] = *((double * *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""kap""' of type '""double *[5]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_kap_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_chunk_kap_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_kap_get" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  result = (double **)(double **) ((arg1)->kap);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_siginv_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  double **arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_chunk_siginv_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_siginv_set" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_chunk_siginv_set" "', argument " "2"" of type '" "double *[5]""'"); 
  } 
  arg2 = reinterpret_cast< double ** >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)5; ++ii) *(double * *)&arg1->siginv[ii] = *((double * *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""siginv""' of type '""double *[5]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_siginv_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_chunk_siginv_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_siginv_get" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  result = (double **)(double **) ((arg1)->siginv);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_sigsize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  int *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_chunk_sigsize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_sigsize_set" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_chunk_sigsize_set" "', argument " "2"" of type '" "int [5]""'"); 
  } 
  arg2 = reinterpret_cast< int * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)5; ++ii) *(int *)&arg1->sigsize[ii] = *((int *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""sigsize""' of type '""int [5]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_sigsize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_chunk_sigsize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_sigsize_get" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  result = (int *)(int *) ((arg1)->sigsize);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_gv_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  meep::grid_volume *arg2 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_chunk_gv_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_gv_set" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_chunk_gv_set" "', argument " "2"" of type '" "meep::grid_volume *""'"); 
  }
  arg2 = reinterpret_cast< meep::grid_volume * >(argp2);
  if (arg1) (arg1)->gv = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_gv_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::grid_volume *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_chunk_gv_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_gv_get" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  result = (meep::grid_volume *)& ((arg1)->gv);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_v_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  meep::volume *arg2 = (meep::volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_chunk_v_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_v_set" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_chunk_v_set" "', argument " "2"" of type '" "meep::volume *""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  if (arg1) (arg1)->v = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_v_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::volume *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_chunk_v_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_v_get" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  result = (meep::volume *)& ((arg1)->v);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__volume, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_chiP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  meep::susceptibility **arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_chunk_chiP_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_chiP_set" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_meep__susceptibility, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_chunk_chiP_set" "', argument " "2"" of type '" "meep::susceptibility *[meep::NUM_FIELD_TYPES]""'"); 
  } 
  arg2 = reinterpret_cast< meep::susceptibility ** >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_TYPES; ++ii) *(meep::susceptibility * *)&arg1->chiP[ii] = *((meep::susceptibility * *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""chiP""' of type '""meep::susceptibility *[meep::NUM_FIELD_TYPES]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_chiP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::susceptibility **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_chunk_chiP_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_chiP_get" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  result = (meep::susceptibility **)(meep::susceptibility **) ((arg1)->chiP);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_meep__susceptibility, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_refcount_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_chunk_refcount_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_refcount_set" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "structure_chunk_refcount_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->refcount = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_refcount_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_chunk_refcount_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_refcount_get" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  result = (int) ((arg1)->refcount);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_structure_chunk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_structure_chunk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_structure_chunk" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_structure_chunk__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = 0 ;
  meep::volume *arg2 = 0 ;
  double arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  meep::structure_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_structure_chunk",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_structure_chunk" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure_chunk" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_structure_chunk" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure_chunk" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_structure_chunk" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_structure_chunk" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (meep::structure_chunk *)new meep::structure_chunk((meep::grid_volume const &)*arg1,(meep::volume const &)*arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__structure_chunk, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_structure_chunk__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::structure_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_structure_chunk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_structure_chunk" "', argument " "1"" of type '" "meep::structure_chunk const *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  result = (meep::structure_chunk *)new meep::structure_chunk((meep::structure_chunk const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__structure_chunk, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_structure_chunk(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure_chunk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_structure_chunk__SWIG_1(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__volume, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_structure_chunk__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_structure_chunk'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::structure_chunk::structure_chunk(meep::grid_volume const &,meep::volume const &,double,int)\n"
    "    meep::structure_chunk::structure_chunk(meep::structure_chunk const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_structure_chunk_set_chi1inv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  meep::component arg2 ;
  meep::material_function *arg3 = 0 ;
  bool arg4 ;
  double arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:structure_chunk_set_chi1inv",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_set_chi1inv" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "structure_chunk_set_chi1inv" "', argument " "3"" of type '" "meep::material_function &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_chunk_set_chi1inv" "', argument " "3"" of type '" "meep::material_function &""'"); 
  }
  arg3 = reinterpret_cast< meep::material_function * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "structure_chunk_set_chi1inv" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "structure_chunk_set_chi1inv" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "structure_chunk_set_chi1inv" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  (arg1)->set_chi1inv(arg2,*arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_has_chi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  meep::component arg2 ;
  meep::direction arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:structure_chunk_has_chi",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_has_chi" "', argument " "1"" of type '" "meep::structure_chunk const *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_chunk_has_chi" "', argument " "3"" of type '" "meep::direction""'");
  } 
  arg3 = static_cast< meep::direction >(val3);
  result = (bool)((meep::structure_chunk const *)arg1)->has_chi(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_has_chisigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  meep::component arg2 ;
  meep::direction arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:structure_chunk_has_chisigma",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_has_chisigma" "', argument " "1"" of type '" "meep::structure_chunk const *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_chunk_has_chisigma" "', argument " "3"" of type '" "meep::direction""'");
  } 
  arg3 = static_cast< meep::direction >(val3);
  result = (bool)((meep::structure_chunk const *)arg1)->has_chisigma(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_has_chi1inv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  meep::component arg2 ;
  meep::direction arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:structure_chunk_has_chi1inv",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_has_chi1inv" "', argument " "1"" of type '" "meep::structure_chunk const *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_chunk_has_chi1inv" "', argument " "3"" of type '" "meep::direction""'");
  } 
  arg3 = static_cast< meep::direction >(val3);
  result = (bool)((meep::structure_chunk const *)arg1)->has_chi1inv(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_set_conductivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  meep::component arg2 ;
  meep::material_function *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:structure_chunk_set_conductivity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_set_conductivity" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "structure_chunk_set_conductivity" "', argument " "3"" of type '" "meep::material_function &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_chunk_set_conductivity" "', argument " "3"" of type '" "meep::material_function &""'"); 
  }
  arg3 = reinterpret_cast< meep::material_function * >(argp3);
  (arg1)->set_conductivity(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_update_condinv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_chunk_update_condinv",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_update_condinv" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  (arg1)->update_condinv();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_set_chi3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  meep::component arg2 ;
  meep::material_function *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:structure_chunk_set_chi3",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_set_chi3" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "structure_chunk_set_chi3" "', argument " "3"" of type '" "meep::material_function &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_chunk_set_chi3" "', argument " "3"" of type '" "meep::material_function &""'"); 
  }
  arg3 = reinterpret_cast< meep::material_function * >(argp3);
  (arg1)->set_chi3(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_set_chi2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  meep::component arg2 ;
  meep::material_function *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:structure_chunk_set_chi2",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_set_chi2" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "structure_chunk_set_chi2" "', argument " "3"" of type '" "meep::material_function &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_chunk_set_chi2" "', argument " "3"" of type '" "meep::material_function &""'"); 
  }
  arg3 = reinterpret_cast< meep::material_function * >(argp3);
  (arg1)->set_chi2(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_use_pml(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  meep::direction arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  meep::pml_profile_func arg7 = (meep::pml_profile_func) 0 ;
  void *arg8 = (void *) 0 ;
  double arg9 ;
  double arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:structure_chunk_use_pml",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_use_pml" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "structure_chunk_use_pml" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_chunk_use_pml" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "structure_chunk_use_pml" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "structure_chunk_use_pml" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "structure_chunk_use_pml" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    int res = SWIG_ConvertFunctionPtr(obj6, (void**)(&arg7), SWIGTYPE_p_f_double_p_void__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "structure_chunk_use_pml" "', argument " "7"" of type '" "meep::pml_profile_func""'"); 
    }
  }
  {
    arg8 = (void*)obj7;
  }
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "structure_chunk_use_pml" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "structure_chunk_use_pml" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  (arg1)->use_pml(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_add_susceptibility(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  meep::material_function *arg2 = 0 ;
  meep::field_type arg3 ;
  meep::susceptibility *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:structure_chunk_add_susceptibility",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_add_susceptibility" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_chunk_add_susceptibility" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_chunk_add_susceptibility" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  arg2 = reinterpret_cast< meep::material_function * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_chunk_add_susceptibility" "', argument " "3"" of type '" "meep::field_type""'");
  } 
  arg3 = static_cast< meep::field_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__susceptibility,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "structure_chunk_add_susceptibility" "', argument " "4"" of type '" "meep::susceptibility const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_chunk_add_susceptibility" "', argument " "4"" of type '" "meep::susceptibility const &""'"); 
  }
  arg4 = reinterpret_cast< meep::susceptibility * >(argp4);
  (arg1)->add_susceptibility(*arg2,arg3,(meep::susceptibility const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_mix_with(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  meep::structure_chunk *arg2 = (meep::structure_chunk *) 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:structure_chunk_mix_with",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_mix_with" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_chunk_mix_with" "', argument " "2"" of type '" "meep::structure_chunk const *""'"); 
  }
  arg2 = reinterpret_cast< meep::structure_chunk * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_chunk_mix_with" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->mix_with((meep::structure_chunk const *)arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_n_proc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_chunk_n_proc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_n_proc" "', argument " "1"" of type '" "meep::structure_chunk const *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  result = (int)((meep::structure_chunk const *)arg1)->n_proc();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_is_mine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_chunk_is_mine",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_is_mine" "', argument " "1"" of type '" "meep::structure_chunk const *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  result = (int)((meep::structure_chunk const *)arg1)->is_mine();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_remove_susceptibilities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_chunk_remove_susceptibilities",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_remove_susceptibilities" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  (arg1)->remove_susceptibilities();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_get_chi1inv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  meep::component arg2 ;
  meep::direction arg3 ;
  meep::ivec *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:structure_chunk_get_chi1inv",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_get_chi1inv" "', argument " "1"" of type '" "meep::structure_chunk const *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_chunk_get_chi1inv" "', argument " "3"" of type '" "meep::direction""'");
  } 
  arg3 = static_cast< meep::direction >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "structure_chunk_get_chi1inv" "', argument " "4"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_chunk_get_chi1inv" "', argument " "4"" of type '" "meep::ivec const &""'"); 
  }
  arg4 = reinterpret_cast< meep::ivec * >(argp4);
  result = (double)((meep::structure_chunk const *)arg1)->get_chi1inv(arg2,arg3,(meep::ivec const &)*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_get_inveps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  meep::component arg2 ;
  meep::direction arg3 ;
  meep::ivec *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:structure_chunk_get_inveps",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_get_inveps" "', argument " "1"" of type '" "meep::structure_chunk const *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_chunk_get_inveps" "', argument " "3"" of type '" "meep::direction""'");
  } 
  arg3 = static_cast< meep::direction >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "structure_chunk_get_inveps" "', argument " "4"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_chunk_get_inveps" "', argument " "4"" of type '" "meep::ivec const &""'"); 
  }
  arg4 = reinterpret_cast< meep::ivec * >(argp4);
  result = (double)((meep::structure_chunk const *)arg1)->get_inveps(arg2,arg3,(meep::ivec const &)*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunk_max_eps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_chunk_max_eps",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunk_max_eps" "', argument " "1"" of type '" "meep::structure_chunk const *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  result = (double)((meep::structure_chunk const *)arg1)->max_eps();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *structure_chunk_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__structure_chunk, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_pml_quadratic_profile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  void *arg2 = (void *) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pml_quadratic_profile",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pml_quadratic_profile" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pml_quadratic_profile" "', argument " "2"" of type '" "void *""'"); 
  }
  result = (double)meep::pml_quadratic_profile(arg1,arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_boundary_region__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::boundary_region *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_boundary_region")) SWIG_fail;
  result = (meep::boundary_region *)new meep::boundary_region();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__boundary_region, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_boundary_region__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::boundary_region::boundary_region_kind arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  meep::pml_profile_func arg5 = (meep::pml_profile_func) 0 ;
  void *arg6 = (void *) 0 ;
  double arg7 ;
  double arg8 ;
  meep::direction arg9 ;
  meep::boundary_side arg10 ;
  meep::boundary_region *arg11 = (meep::boundary_region *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  meep::boundary_region *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:new_boundary_region",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_boundary_region" "', argument " "1"" of type '" "meep::boundary_region::boundary_region_kind""'");
  } 
  arg1 = static_cast< meep::boundary_region::boundary_region_kind >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_boundary_region" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_boundary_region" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_boundary_region" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    int res = SWIG_ConvertFunctionPtr(obj4, (void**)(&arg5), SWIGTYPE_p_f_double_p_void__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_boundary_region" "', argument " "5"" of type '" "meep::pml_profile_func""'"); 
    }
  }
  {
    arg6 = (void*)obj5;
  }
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_boundary_region" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_boundary_region" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_int(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_boundary_region" "', argument " "9"" of type '" "meep::direction""'");
  } 
  arg9 = static_cast< meep::direction >(val9);
  ecode10 = SWIG_AsVal_int(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_boundary_region" "', argument " "10"" of type '" "meep::boundary_side""'");
  } 
  arg10 = static_cast< meep::boundary_side >(val10);
  res11 = SWIG_ConvertPtr(obj10, &argp11,SWIGTYPE_p_meep__boundary_region, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "new_boundary_region" "', argument " "11"" of type '" "meep::boundary_region *""'"); 
  }
  arg11 = reinterpret_cast< meep::boundary_region * >(argp11);
  result = (meep::boundary_region *)new meep::boundary_region(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__boundary_region, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_boundary_region__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::boundary_region::boundary_region_kind arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  meep::pml_profile_func arg5 = (meep::pml_profile_func) 0 ;
  void *arg6 = (void *) 0 ;
  double arg7 ;
  double arg8 ;
  meep::direction arg9 ;
  meep::boundary_side arg10 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  meep::boundary_region *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:new_boundary_region",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_boundary_region" "', argument " "1"" of type '" "meep::boundary_region::boundary_region_kind""'");
  } 
  arg1 = static_cast< meep::boundary_region::boundary_region_kind >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_boundary_region" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_boundary_region" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_boundary_region" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    int res = SWIG_ConvertFunctionPtr(obj4, (void**)(&arg5), SWIGTYPE_p_f_double_p_void__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_boundary_region" "', argument " "5"" of type '" "meep::pml_profile_func""'"); 
    }
  }
  {
    arg6 = (void*)obj5;
  }
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_boundary_region" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_boundary_region" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_int(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_boundary_region" "', argument " "9"" of type '" "meep::direction""'");
  } 
  arg9 = static_cast< meep::direction >(val9);
  ecode10 = SWIG_AsVal_int(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_boundary_region" "', argument " "10"" of type '" "meep::boundary_side""'");
  } 
  arg10 = static_cast< meep::boundary_side >(val10);
  result = (meep::boundary_region *)new meep::boundary_region(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__boundary_region, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_boundary_region__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::boundary_region *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::boundary_region *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_boundary_region",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__boundary_region,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_boundary_region" "', argument " "1"" of type '" "meep::boundary_region const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_boundary_region" "', argument " "1"" of type '" "meep::boundary_region const &""'"); 
  }
  arg1 = reinterpret_cast< meep::boundary_region * >(argp1);
  result = (meep::boundary_region *)new meep::boundary_region((meep::boundary_region const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__boundary_region, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_boundary_region(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[12] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 11) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_boundary_region__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__boundary_region, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_boundary_region__SWIG_3(self, args);
    }
  }
  if (argc == 10) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *ptr = 0;
            int res = SWIG_ConvertFunctionPtr(argv[4], &ptr, SWIGTYPE_p_f_double_p_void__double);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                _v = PyCallable_Check(argv[5]);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_int(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_int(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        return _wrap_new_boundary_region__SWIG_2(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *ptr = 0;
            int res = SWIG_ConvertFunctionPtr(argv[4], &ptr, SWIGTYPE_p_f_double_p_void__double);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                _v = PyCallable_Check(argv[5]);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_int(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_int(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        void *vptr = 0;
                        int res = SWIG_ConvertPtr(argv[10], &vptr, SWIGTYPE_p_meep__boundary_region, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          return _wrap_new_boundary_region__SWIG_1(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_boundary_region'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::boundary_region::boundary_region()\n"
    "    meep::boundary_region::boundary_region(meep::boundary_region::boundary_region_kind,double,double,double,meep::pml_profile_func,void *,double,double,meep::direction,meep::boundary_side,meep::boundary_region *)\n"
    "    meep::boundary_region::boundary_region(meep::boundary_region::boundary_region_kind,double,double,double,meep::pml_profile_func,void *,double,double,meep::direction,meep::boundary_side)\n"
    "    meep::boundary_region::boundary_region(meep::boundary_region const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_boundary_region(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::boundary_region *arg1 = (meep::boundary_region *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_boundary_region",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__boundary_region, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_boundary_region" "', argument " "1"" of type '" "meep::boundary_region *""'"); 
  }
  arg1 = reinterpret_cast< meep::boundary_region * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boundary_region_boundary_region_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::boundary_region *arg1 = (meep::boundary_region *) 0 ;
  meep::boundary_region *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:boundary_region_boundary_region_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__boundary_region, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundary_region_boundary_region_assign" "', argument " "1"" of type '" "meep::boundary_region *""'"); 
  }
  arg1 = reinterpret_cast< meep::boundary_region * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__boundary_region,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "boundary_region_boundary_region_assign" "', argument " "2"" of type '" "meep::boundary_region const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boundary_region_boundary_region_assign" "', argument " "2"" of type '" "meep::boundary_region const &""'"); 
  }
  arg2 = reinterpret_cast< meep::boundary_region * >(argp2);
  (arg1)->operator =((meep::boundary_region const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boundary_region___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::boundary_region *arg1 = (meep::boundary_region *) 0 ;
  meep::boundary_region *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::boundary_region result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:boundary_region___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__boundary_region, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundary_region___add__" "', argument " "1"" of type '" "meep::boundary_region const *""'"); 
  }
  arg1 = reinterpret_cast< meep::boundary_region * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__boundary_region,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "boundary_region___add__" "', argument " "2"" of type '" "meep::boundary_region const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boundary_region___add__" "', argument " "2"" of type '" "meep::boundary_region const &""'"); 
  }
  arg2 = reinterpret_cast< meep::boundary_region * >(argp2);
  result = ((meep::boundary_region const *)arg1)->operator +((meep::boundary_region const &)*arg2);
  resultobj = SWIG_NewPointerObj((new meep::boundary_region(static_cast< const meep::boundary_region& >(result))), SWIGTYPE_p_meep__boundary_region, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boundary_region___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::boundary_region *arg1 = (meep::boundary_region *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::boundary_region result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:boundary_region___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__boundary_region, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundary_region___mul__" "', argument " "1"" of type '" "meep::boundary_region const *""'"); 
  }
  arg1 = reinterpret_cast< meep::boundary_region * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "boundary_region___mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((meep::boundary_region const *)arg1)->operator *(arg2);
  resultobj = SWIG_NewPointerObj((new meep::boundary_region(static_cast< const meep::boundary_region& >(result))), SWIGTYPE_p_meep__boundary_region, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boundary_region_br_apply__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::boundary_region *arg1 = (meep::boundary_region *) 0 ;
  meep::structure *arg2 = (meep::structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:boundary_region_br_apply",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__boundary_region, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundary_region_br_apply" "', argument " "1"" of type '" "meep::boundary_region const *""'"); 
  }
  arg1 = reinterpret_cast< meep::boundary_region * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "boundary_region_br_apply" "', argument " "2"" of type '" "meep::structure *""'"); 
  }
  arg2 = reinterpret_cast< meep::structure * >(argp2);
  ((meep::boundary_region const *)arg1)->apply(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boundary_region_br_apply__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::boundary_region *arg1 = (meep::boundary_region *) 0 ;
  meep::structure *arg2 = (meep::structure *) 0 ;
  meep::structure_chunk *arg3 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:boundary_region_br_apply",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__boundary_region, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundary_region_br_apply" "', argument " "1"" of type '" "meep::boundary_region const *""'"); 
  }
  arg1 = reinterpret_cast< meep::boundary_region * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "boundary_region_br_apply" "', argument " "2"" of type '" "meep::structure const *""'"); 
  }
  arg2 = reinterpret_cast< meep::structure * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "boundary_region_br_apply" "', argument " "3"" of type '" "meep::structure_chunk *""'"); 
  }
  arg3 = reinterpret_cast< meep::structure_chunk * >(argp3);
  ((meep::boundary_region const *)arg1)->apply((meep::structure const *)arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_boundary_region_br_apply(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__boundary_region, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__structure, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_boundary_region_br_apply__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__boundary_region, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__structure, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_meep__structure_chunk, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_boundary_region_br_apply__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'boundary_region_br_apply'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::boundary_region::apply(meep::structure *) const\n"
    "    meep::boundary_region::apply(meep::structure const *,meep::structure_chunk *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_boundary_region_check_ok(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::boundary_region *arg1 = (meep::boundary_region *) 0 ;
  meep::grid_volume *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:boundary_region_check_ok",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__boundary_region, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boundary_region_check_ok" "', argument " "1"" of type '" "meep::boundary_region const *""'"); 
  }
  arg1 = reinterpret_cast< meep::boundary_region * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "boundary_region_check_ok" "', argument " "2"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boundary_region_check_ok" "', argument " "2"" of type '" "meep::grid_volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::grid_volume * >(argp2);
  result = (bool)((meep::boundary_region const *)arg1)->check_ok((meep::grid_volume const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *boundary_region_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__boundary_region, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_pml__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  meep::direction arg2 ;
  meep::boundary_side arg3 ;
  double arg4 ;
  double arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  meep::boundary_region result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:pml",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pml" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pml" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pml" "', argument " "3"" of type '" "meep::boundary_side""'");
  } 
  arg3 = static_cast< meep::boundary_side >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pml" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "pml" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  result = meep::pml(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new meep::boundary_region(static_cast< const meep::boundary_region& >(result))), SWIGTYPE_p_meep__boundary_region, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pml__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  meep::direction arg2 ;
  meep::boundary_side arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  meep::boundary_region result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:pml",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pml" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pml" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pml" "', argument " "3"" of type '" "meep::boundary_side""'");
  } 
  arg3 = static_cast< meep::boundary_side >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pml" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = meep::pml(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new meep::boundary_region(static_cast< const meep::boundary_region& >(result))), SWIGTYPE_p_meep__boundary_region, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pml__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  meep::direction arg2 ;
  meep::boundary_side arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::boundary_region result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:pml",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pml" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pml" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pml" "', argument " "3"" of type '" "meep::boundary_side""'");
  } 
  arg3 = static_cast< meep::boundary_side >(val3);
  result = meep::pml(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new meep::boundary_region(static_cast< const meep::boundary_region& >(result))), SWIGTYPE_p_meep__boundary_region, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pml__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  meep::direction arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  meep::boundary_region result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:pml",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pml" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pml" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pml" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pml" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = meep::pml(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new meep::boundary_region(static_cast< const meep::boundary_region& >(result))), SWIGTYPE_p_meep__boundary_region, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pml__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  meep::direction arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::boundary_region result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:pml",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pml" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pml" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pml" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = meep::pml(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new meep::boundary_region(static_cast< const meep::boundary_region& >(result))), SWIGTYPE_p_meep__boundary_region, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pml__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  meep::direction arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::boundary_region result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pml",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pml" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pml" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  result = meep::pml(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new meep::boundary_region(static_cast< const meep::boundary_region& >(result))), SWIGTYPE_p_meep__boundary_region, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pml__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::boundary_region result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:pml",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pml" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pml" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pml" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = meep::pml(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new meep::boundary_region(static_cast< const meep::boundary_region& >(result))), SWIGTYPE_p_meep__boundary_region, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pml__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::boundary_region result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pml",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pml" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pml" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = meep::pml(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new meep::boundary_region(static_cast< const meep::boundary_region& >(result))), SWIGTYPE_p_meep__boundary_region, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pml__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::boundary_region result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pml",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pml" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = meep::pml(arg1);
  resultobj = SWIG_NewPointerObj((new meep::boundary_region(static_cast< const meep::boundary_region& >(result))), SWIGTYPE_p_meep__boundary_region, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pml(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_pml__SWIG_8(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_pml__SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_pml__SWIG_7(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_pml__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_pml__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_pml__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_pml__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_pml__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_pml__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'pml'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::pml(double,meep::direction,meep::boundary_side,double,double)\n"
    "    meep::pml(double,meep::direction,meep::boundary_side,double)\n"
    "    meep::pml(double,meep::direction,meep::boundary_side)\n"
    "    meep::pml(double,meep::direction,double,double)\n"
    "    meep::pml(double,meep::direction,double)\n"
    "    meep::pml(double,meep::direction)\n"
    "    meep::pml(double,double,double)\n"
    "    meep::pml(double,double)\n"
    "    meep::pml(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_structure_chunks_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::structure_chunk **arg2 = (meep::structure_chunk **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_chunks_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunks_set" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_chunks_set" "', argument " "2"" of type '" "meep::structure_chunk **""'"); 
  }
  arg2 = reinterpret_cast< meep::structure_chunk ** >(argp2);
  if (arg1) (arg1)->chunks = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_chunks_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::structure_chunk **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_chunks_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_chunks_get" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  result = (meep::structure_chunk **) ((arg1)->chunks);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_meep__structure_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_num_chunks_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_num_chunks_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_num_chunks_set" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "structure_num_chunks_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->num_chunks = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_num_chunks_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_num_chunks_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_num_chunks_get" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  result = (int) ((arg1)->num_chunks);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_shared_chunks_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_shared_chunks_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_shared_chunks_set" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "structure_shared_chunks_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->shared_chunks = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_shared_chunks_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_shared_chunks_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_shared_chunks_get" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  result = (bool) ((arg1)->shared_chunks);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_gv_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::grid_volume *arg2 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_gv_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_gv_set" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_gv_set" "', argument " "2"" of type '" "meep::grid_volume *""'"); 
  }
  arg2 = reinterpret_cast< meep::grid_volume * >(argp2);
  if (arg1) (arg1)->gv = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_gv_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::grid_volume *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_gv_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_gv_get" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  result = (meep::grid_volume *)& ((arg1)->gv);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_user_volume_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::grid_volume *arg2 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_user_volume_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_user_volume_set" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_user_volume_set" "', argument " "2"" of type '" "meep::grid_volume *""'"); 
  }
  arg2 = reinterpret_cast< meep::grid_volume * >(argp2);
  if (arg1) (arg1)->user_volume = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_user_volume_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::grid_volume *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_user_volume_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_user_volume_get" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  result = (meep::grid_volume *)& ((arg1)->user_volume);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_a_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_a_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_a_set" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "structure_a_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->a = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_a_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_a_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_a_get" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  result = (double) ((arg1)->a);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_Courant_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_Courant_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_Courant_set" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "structure_Courant_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->Courant = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_Courant_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_Courant_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_Courant_get" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  result = (double) ((arg1)->Courant);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_dt_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_dt_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_dt_set" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "structure_dt_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->dt = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_dt_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_dt_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_dt_get" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  result = (double) ((arg1)->dt);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_v_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::volume *arg2 = (meep::volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_v_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_v_set" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_v_set" "', argument " "2"" of type '" "meep::volume *""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  if (arg1) (arg1)->v = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_v_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::volume *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_v_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_v_get" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  result = (meep::volume *)& ((arg1)->v);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__volume, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_S_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::symmetry *arg2 = (meep::symmetry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_S_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_S_set" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__symmetry, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_S_set" "', argument " "2"" of type '" "meep::symmetry *""'"); 
  }
  arg2 = reinterpret_cast< meep::symmetry * >(argp2);
  if (arg1) (arg1)->S = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_S_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::symmetry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_S_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_S_get" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  result = (meep::symmetry *)& ((arg1)->S);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__symmetry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_outdir_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_outdir_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_outdir_set" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_outdir_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->outdir = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
  } else {
    arg1->outdir = 0;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_outdir_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_outdir_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_outdir_get" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  result = (char *) ((arg1)->outdir);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_effort_volumes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::grid_volume *arg2 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_effort_volumes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_effort_volumes_set" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__grid_volume, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_effort_volumes_set" "', argument " "2"" of type '" "meep::grid_volume *""'"); 
  }
  arg2 = reinterpret_cast< meep::grid_volume * >(argp2);
  if (arg1) (arg1)->effort_volumes = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_effort_volumes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::grid_volume *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_effort_volumes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_effort_volumes_get" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  result = (meep::grid_volume *) ((arg1)->effort_volumes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_effort_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_effort_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_effort_set" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_effort_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->effort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_effort_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_effort_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_effort_get" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  result = (double *) ((arg1)->effort);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_num_effort_volumes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_num_effort_volumes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_num_effort_volumes_set" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "structure_num_effort_volumes_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->num_effort_volumes = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_num_effort_volumes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_num_effort_volumes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_num_effort_volumes_get" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  result = (int) ((arg1)->num_effort_volumes);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_structure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_structure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_structure" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_structure__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_structure")) SWIG_fail;
  result = (meep::structure *)new meep::structure();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__structure, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_structure__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = 0 ;
  meep::material_function *arg2 = 0 ;
  meep::boundary_region *arg3 = 0 ;
  meep::symmetry *arg4 = 0 ;
  int arg5 ;
  double arg6 ;
  bool arg7 ;
  double arg8 ;
  int arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  meep::structure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_structure",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_structure" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  arg2 = reinterpret_cast< meep::material_function * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__boundary_region,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  arg3 = reinterpret_cast< meep::boundary_region * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__symmetry,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_structure" "', argument " "4"" of type '" "meep::symmetry const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "4"" of type '" "meep::symmetry const &""'"); 
  }
  arg4 = reinterpret_cast< meep::symmetry * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_structure" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_structure" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_structure" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_structure" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_int(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_structure" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  result = (meep::structure *)new meep::structure((meep::grid_volume const &)*arg1,*arg2,(meep::boundary_region const &)*arg3,(meep::symmetry const &)*arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__structure, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_structure__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = 0 ;
  meep::material_function *arg2 = 0 ;
  meep::boundary_region *arg3 = 0 ;
  meep::symmetry *arg4 = 0 ;
  int arg5 ;
  double arg6 ;
  bool arg7 ;
  double arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  meep::structure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_structure",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_structure" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  arg2 = reinterpret_cast< meep::material_function * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__boundary_region,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  arg3 = reinterpret_cast< meep::boundary_region * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__symmetry,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_structure" "', argument " "4"" of type '" "meep::symmetry const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "4"" of type '" "meep::symmetry const &""'"); 
  }
  arg4 = reinterpret_cast< meep::symmetry * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_structure" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_structure" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_structure" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_structure" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  result = (meep::structure *)new meep::structure((meep::grid_volume const &)*arg1,*arg2,(meep::boundary_region const &)*arg3,(meep::symmetry const &)*arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__structure, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_structure__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = 0 ;
  meep::material_function *arg2 = 0 ;
  meep::boundary_region *arg3 = 0 ;
  meep::symmetry *arg4 = 0 ;
  int arg5 ;
  double arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  meep::structure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_structure",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_structure" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  arg2 = reinterpret_cast< meep::material_function * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__boundary_region,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  arg3 = reinterpret_cast< meep::boundary_region * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__symmetry,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_structure" "', argument " "4"" of type '" "meep::symmetry const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "4"" of type '" "meep::symmetry const &""'"); 
  }
  arg4 = reinterpret_cast< meep::symmetry * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_structure" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_structure" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_structure" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  result = (meep::structure *)new meep::structure((meep::grid_volume const &)*arg1,*arg2,(meep::boundary_region const &)*arg3,(meep::symmetry const &)*arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__structure, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_structure__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = 0 ;
  meep::material_function *arg2 = 0 ;
  meep::boundary_region *arg3 = 0 ;
  meep::symmetry *arg4 = 0 ;
  int arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  meep::structure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_structure",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_structure" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  arg2 = reinterpret_cast< meep::material_function * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__boundary_region,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  arg3 = reinterpret_cast< meep::boundary_region * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__symmetry,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_structure" "', argument " "4"" of type '" "meep::symmetry const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "4"" of type '" "meep::symmetry const &""'"); 
  }
  arg4 = reinterpret_cast< meep::symmetry * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_structure" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_structure" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  result = (meep::structure *)new meep::structure((meep::grid_volume const &)*arg1,*arg2,(meep::boundary_region const &)*arg3,(meep::symmetry const &)*arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__structure, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_structure__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = 0 ;
  meep::material_function *arg2 = 0 ;
  meep::boundary_region *arg3 = 0 ;
  meep::symmetry *arg4 = 0 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  meep::structure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_structure",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_structure" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  arg2 = reinterpret_cast< meep::material_function * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__boundary_region,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  arg3 = reinterpret_cast< meep::boundary_region * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__symmetry,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_structure" "', argument " "4"" of type '" "meep::symmetry const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "4"" of type '" "meep::symmetry const &""'"); 
  }
  arg4 = reinterpret_cast< meep::symmetry * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_structure" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (meep::structure *)new meep::structure((meep::grid_volume const &)*arg1,*arg2,(meep::boundary_region const &)*arg3,(meep::symmetry const &)*arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__structure, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_structure__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = 0 ;
  meep::material_function *arg2 = 0 ;
  meep::boundary_region *arg3 = 0 ;
  meep::symmetry *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  meep::structure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_structure",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_structure" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  arg2 = reinterpret_cast< meep::material_function * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__boundary_region,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  arg3 = reinterpret_cast< meep::boundary_region * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__symmetry,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_structure" "', argument " "4"" of type '" "meep::symmetry const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "4"" of type '" "meep::symmetry const &""'"); 
  }
  arg4 = reinterpret_cast< meep::symmetry * >(argp4);
  result = (meep::structure *)new meep::structure((meep::grid_volume const &)*arg1,*arg2,(meep::boundary_region const &)*arg3,(meep::symmetry const &)*arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__structure, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_structure__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = 0 ;
  meep::material_function *arg2 = 0 ;
  meep::boundary_region *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::structure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_structure",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_structure" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  arg2 = reinterpret_cast< meep::material_function * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__boundary_region,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  arg3 = reinterpret_cast< meep::boundary_region * >(argp3);
  result = (meep::structure *)new meep::structure((meep::grid_volume const &)*arg1,*arg2,(meep::boundary_region const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__structure, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_structure__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = 0 ;
  meep::material_function *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::structure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_structure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_structure" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  arg2 = reinterpret_cast< meep::material_function * >(argp2);
  result = (meep::structure *)new meep::structure((meep::grid_volume const &)*arg1,*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__structure, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_structure__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = 0 ;
  double (*arg2)(meep::vec const &) = (double (*)(meep::vec const &)) 0 ;
  meep::boundary_region *arg3 = 0 ;
  meep::symmetry *arg4 = 0 ;
  int arg5 ;
  double arg6 ;
  bool arg7 ;
  double arg8 ;
  int arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  meep::structure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_structure",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  {
    if (obj1 == Py_None) {
      arg2 = NULL;
      py_callback = NULL;
    } else {
      arg2 = py_callback_wrap;
      py_callback = obj1;
      Py_INCREF(py_callback);
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__boundary_region,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  arg3 = reinterpret_cast< meep::boundary_region * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__symmetry,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_structure" "', argument " "4"" of type '" "meep::symmetry const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "4"" of type '" "meep::symmetry const &""'"); 
  }
  arg4 = reinterpret_cast< meep::symmetry * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_structure" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_structure" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_structure" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_structure" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_int(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_structure" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  result = (meep::structure *)new meep::structure((meep::grid_volume const &)*arg1,arg2,(meep::boundary_region const &)*arg3,(meep::symmetry const &)*arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__structure, SWIG_POINTER_NEW |  0 );
  {
    Py_XDECREF(py_callback);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_callback);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_structure__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = 0 ;
  double (*arg2)(meep::vec const &) = (double (*)(meep::vec const &)) 0 ;
  meep::boundary_region *arg3 = 0 ;
  meep::symmetry *arg4 = 0 ;
  int arg5 ;
  double arg6 ;
  bool arg7 ;
  double arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  meep::structure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_structure",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  {
    if (obj1 == Py_None) {
      arg2 = NULL;
      py_callback = NULL;
    } else {
      arg2 = py_callback_wrap;
      py_callback = obj1;
      Py_INCREF(py_callback);
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__boundary_region,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  arg3 = reinterpret_cast< meep::boundary_region * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__symmetry,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_structure" "', argument " "4"" of type '" "meep::symmetry const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "4"" of type '" "meep::symmetry const &""'"); 
  }
  arg4 = reinterpret_cast< meep::symmetry * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_structure" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_structure" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_structure" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_structure" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  result = (meep::structure *)new meep::structure((meep::grid_volume const &)*arg1,arg2,(meep::boundary_region const &)*arg3,(meep::symmetry const &)*arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__structure, SWIG_POINTER_NEW |  0 );
  {
    Py_XDECREF(py_callback);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_callback);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_structure__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = 0 ;
  double (*arg2)(meep::vec const &) = (double (*)(meep::vec const &)) 0 ;
  meep::boundary_region *arg3 = 0 ;
  meep::symmetry *arg4 = 0 ;
  int arg5 ;
  double arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  meep::structure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_structure",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  {
    if (obj1 == Py_None) {
      arg2 = NULL;
      py_callback = NULL;
    } else {
      arg2 = py_callback_wrap;
      py_callback = obj1;
      Py_INCREF(py_callback);
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__boundary_region,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  arg3 = reinterpret_cast< meep::boundary_region * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__symmetry,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_structure" "', argument " "4"" of type '" "meep::symmetry const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "4"" of type '" "meep::symmetry const &""'"); 
  }
  arg4 = reinterpret_cast< meep::symmetry * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_structure" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_structure" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_structure" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  result = (meep::structure *)new meep::structure((meep::grid_volume const &)*arg1,arg2,(meep::boundary_region const &)*arg3,(meep::symmetry const &)*arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__structure, SWIG_POINTER_NEW |  0 );
  {
    Py_XDECREF(py_callback);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_callback);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_structure__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = 0 ;
  double (*arg2)(meep::vec const &) = (double (*)(meep::vec const &)) 0 ;
  meep::boundary_region *arg3 = 0 ;
  meep::symmetry *arg4 = 0 ;
  int arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  meep::structure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_structure",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  {
    if (obj1 == Py_None) {
      arg2 = NULL;
      py_callback = NULL;
    } else {
      arg2 = py_callback_wrap;
      py_callback = obj1;
      Py_INCREF(py_callback);
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__boundary_region,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  arg3 = reinterpret_cast< meep::boundary_region * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__symmetry,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_structure" "', argument " "4"" of type '" "meep::symmetry const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "4"" of type '" "meep::symmetry const &""'"); 
  }
  arg4 = reinterpret_cast< meep::symmetry * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_structure" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_structure" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  result = (meep::structure *)new meep::structure((meep::grid_volume const &)*arg1,arg2,(meep::boundary_region const &)*arg3,(meep::symmetry const &)*arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__structure, SWIG_POINTER_NEW |  0 );
  {
    Py_XDECREF(py_callback);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_callback);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_structure__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = 0 ;
  double (*arg2)(meep::vec const &) = (double (*)(meep::vec const &)) 0 ;
  meep::boundary_region *arg3 = 0 ;
  meep::symmetry *arg4 = 0 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  meep::structure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_structure",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  {
    if (obj1 == Py_None) {
      arg2 = NULL;
      py_callback = NULL;
    } else {
      arg2 = py_callback_wrap;
      py_callback = obj1;
      Py_INCREF(py_callback);
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__boundary_region,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  arg3 = reinterpret_cast< meep::boundary_region * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__symmetry,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_structure" "', argument " "4"" of type '" "meep::symmetry const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "4"" of type '" "meep::symmetry const &""'"); 
  }
  arg4 = reinterpret_cast< meep::symmetry * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_structure" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (meep::structure *)new meep::structure((meep::grid_volume const &)*arg1,arg2,(meep::boundary_region const &)*arg3,(meep::symmetry const &)*arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__structure, SWIG_POINTER_NEW |  0 );
  {
    Py_XDECREF(py_callback);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_callback);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_structure__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = 0 ;
  double (*arg2)(meep::vec const &) = (double (*)(meep::vec const &)) 0 ;
  meep::boundary_region *arg3 = 0 ;
  meep::symmetry *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  meep::structure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_structure",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  {
    if (obj1 == Py_None) {
      arg2 = NULL;
      py_callback = NULL;
    } else {
      arg2 = py_callback_wrap;
      py_callback = obj1;
      Py_INCREF(py_callback);
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__boundary_region,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  arg3 = reinterpret_cast< meep::boundary_region * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__symmetry,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_structure" "', argument " "4"" of type '" "meep::symmetry const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "4"" of type '" "meep::symmetry const &""'"); 
  }
  arg4 = reinterpret_cast< meep::symmetry * >(argp4);
  result = (meep::structure *)new meep::structure((meep::grid_volume const &)*arg1,arg2,(meep::boundary_region const &)*arg3,(meep::symmetry const &)*arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__structure, SWIG_POINTER_NEW |  0 );
  {
    Py_XDECREF(py_callback);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_callback);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_structure__SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = 0 ;
  double (*arg2)(meep::vec const &) = (double (*)(meep::vec const &)) 0 ;
  meep::boundary_region *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::structure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_structure",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  {
    if (obj1 == Py_None) {
      arg2 = NULL;
      py_callback = NULL;
    } else {
      arg2 = py_callback_wrap;
      py_callback = obj1;
      Py_INCREF(py_callback);
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__boundary_region,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "3"" of type '" "meep::boundary_region const &""'"); 
  }
  arg3 = reinterpret_cast< meep::boundary_region * >(argp3);
  result = (meep::structure *)new meep::structure((meep::grid_volume const &)*arg1,arg2,(meep::boundary_region const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__structure, SWIG_POINTER_NEW |  0 );
  {
    Py_XDECREF(py_callback);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_callback);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_structure__SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::grid_volume *arg1 = 0 ;
  double (*arg2)(meep::vec const &) = (double (*)(meep::vec const &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::structure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_structure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "1"" of type '" "meep::grid_volume const &""'"); 
  }
  arg1 = reinterpret_cast< meep::grid_volume * >(argp1);
  {
    if (obj1 == Py_None) {
      arg2 = NULL;
      py_callback = NULL;
    } else {
      arg2 = py_callback_wrap;
      py_callback = obj1;
      Py_INCREF(py_callback);
    }
  }
  result = (meep::structure *)new meep::structure((meep::grid_volume const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__structure, SWIG_POINTER_NEW |  0 );
  {
    Py_XDECREF(py_callback);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_callback);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_structure__SWIG_17(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::structure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_structure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_structure" "', argument " "1"" of type '" "meep::structure const *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  result = (meep::structure *)new meep::structure((meep::structure const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__structure, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_structure__SWIG_18(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::structure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_structure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__structure,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_structure" "', argument " "1"" of type '" "meep::structure const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_structure" "', argument " "1"" of type '" "meep::structure const &""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  result = (meep::structure *)new meep::structure((meep::structure const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__structure, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_structure(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_structure__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_structure__SWIG_17(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_structure__SWIG_18(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__material_function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_structure__SWIG_8(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]) || argv[1] == Py_None;
      }
      if (_v) {
        return _wrap_new_structure__SWIG_16(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]) || argv[1] == Py_None;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__boundary_region, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_structure__SWIG_15(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__material_function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__boundary_region, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_structure__SWIG_7(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__material_function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__boundary_region, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__symmetry, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_structure__SWIG_6(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]) || argv[1] == Py_None;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__boundary_region, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__symmetry, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_structure__SWIG_14(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]) || argv[1] == Py_None;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__boundary_region, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__symmetry, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_structure__SWIG_13(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__material_function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__boundary_region, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__symmetry, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_structure__SWIG_5(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__material_function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__boundary_region, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__symmetry, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_structure__SWIG_4(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]) || argv[1] == Py_None;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__boundary_region, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__symmetry, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_structure__SWIG_12(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]) || argv[1] == Py_None;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__boundary_region, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__symmetry, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_structure__SWIG_11(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__material_function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__boundary_region, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__symmetry, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_structure__SWIG_3(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__material_function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__boundary_region, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__symmetry, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_new_structure__SWIG_2(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]) || argv[1] == Py_None;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__boundary_region, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__symmetry, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_new_structure__SWIG_10(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]) || argv[1] == Py_None;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__boundary_region, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__symmetry, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_int(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_structure__SWIG_9(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__grid_volume, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__material_function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__boundary_region, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__symmetry, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_int(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_structure__SWIG_1(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_structure'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::structure::structure()\n"
    "    meep::structure::structure(meep::grid_volume const &,meep::material_function &,meep::boundary_region const &,meep::symmetry const &,int,double,bool,double,int)\n"
    "    meep::structure::structure(meep::grid_volume const &,meep::material_function &,meep::boundary_region const &,meep::symmetry const &,int,double,bool,double)\n"
    "    meep::structure::structure(meep::grid_volume const &,meep::material_function &,meep::boundary_region const &,meep::symmetry const &,int,double,bool)\n"
    "    meep::structure::structure(meep::grid_volume const &,meep::material_function &,meep::boundary_region const &,meep::symmetry const &,int,double)\n"
    "    meep::structure::structure(meep::grid_volume const &,meep::material_function &,meep::boundary_region const &,meep::symmetry const &,int)\n"
    "    meep::structure::structure(meep::grid_volume const &,meep::material_function &,meep::boundary_region const &,meep::symmetry const &)\n"
    "    meep::structure::structure(meep::grid_volume const &,meep::material_function &,meep::boundary_region const &)\n"
    "    meep::structure::structure(meep::grid_volume const &,meep::material_function &)\n"
    "    meep::structure::structure(meep::grid_volume const &,double (*)(meep::vec const &),meep::boundary_region const &,meep::symmetry const &,int,double,bool,double,int)\n"
    "    meep::structure::structure(meep::grid_volume const &,double (*)(meep::vec const &),meep::boundary_region const &,meep::symmetry const &,int,double,bool,double)\n"
    "    meep::structure::structure(meep::grid_volume const &,double (*)(meep::vec const &),meep::boundary_region const &,meep::symmetry const &,int,double,bool)\n"
    "    meep::structure::structure(meep::grid_volume const &,double (*)(meep::vec const &),meep::boundary_region const &,meep::symmetry const &,int,double)\n"
    "    meep::structure::structure(meep::grid_volume const &,double (*)(meep::vec const &),meep::boundary_region const &,meep::symmetry const &,int)\n"
    "    meep::structure::structure(meep::grid_volume const &,double (*)(meep::vec const &),meep::boundary_region const &,meep::symmetry const &)\n"
    "    meep::structure::structure(meep::grid_volume const &,double (*)(meep::vec const &),meep::boundary_region const &)\n"
    "    meep::structure::structure(meep::grid_volume const &,double (*)(meep::vec const &))\n"
    "    meep::structure::structure(meep::structure const *)\n"
    "    meep::structure::structure(meep::structure const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_structure_set_materials__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::material_function *arg2 = 0 ;
  bool arg3 ;
  double arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:structure_set_materials",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_materials" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_set_materials" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_set_materials" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  arg2 = reinterpret_cast< meep::material_function * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_set_materials" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "structure_set_materials" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "structure_set_materials" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  (arg1)->set_materials(*arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_materials__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::material_function *arg2 = 0 ;
  bool arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:structure_set_materials",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_materials" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_set_materials" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_set_materials" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  arg2 = reinterpret_cast< meep::material_function * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_set_materials" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "structure_set_materials" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->set_materials(*arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_materials__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::material_function *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:structure_set_materials",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_materials" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_set_materials" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_set_materials" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  arg2 = reinterpret_cast< meep::material_function * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_set_materials" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->set_materials(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_materials__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::material_function *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_set_materials",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_materials" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_set_materials" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_set_materials" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  arg2 = reinterpret_cast< meep::material_function * >(argp2);
  (arg1)->set_materials(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_materials(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__material_function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_structure_set_materials__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__material_function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_structure_set_materials__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__material_function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_structure_set_materials__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__material_function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_structure_set_materials__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'structure_set_materials'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::structure::set_materials(meep::material_function &,bool,double,int)\n"
    "    meep::structure::set_materials(meep::material_function &,bool,double)\n"
    "    meep::structure::set_materials(meep::material_function &,bool)\n"
    "    meep::structure::set_materials(meep::material_function &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_structure_set_chi1inv__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::component arg2 ;
  meep::material_function *arg3 = 0 ;
  bool arg4 ;
  double arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:structure_set_chi1inv",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_chi1inv" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "structure_set_chi1inv" "', argument " "3"" of type '" "meep::material_function &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_set_chi1inv" "', argument " "3"" of type '" "meep::material_function &""'"); 
  }
  arg3 = reinterpret_cast< meep::material_function * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "structure_set_chi1inv" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "structure_set_chi1inv" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "structure_set_chi1inv" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  (arg1)->set_chi1inv(arg2,*arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_chi1inv__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::component arg2 ;
  meep::material_function *arg3 = 0 ;
  bool arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:structure_set_chi1inv",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_chi1inv" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "structure_set_chi1inv" "', argument " "3"" of type '" "meep::material_function &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_set_chi1inv" "', argument " "3"" of type '" "meep::material_function &""'"); 
  }
  arg3 = reinterpret_cast< meep::material_function * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "structure_set_chi1inv" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "structure_set_chi1inv" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->set_chi1inv(arg2,*arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_chi1inv__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::component arg2 ;
  meep::material_function *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:structure_set_chi1inv",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_chi1inv" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "structure_set_chi1inv" "', argument " "3"" of type '" "meep::material_function &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_set_chi1inv" "', argument " "3"" of type '" "meep::material_function &""'"); 
  }
  arg3 = reinterpret_cast< meep::material_function * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "structure_set_chi1inv" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->set_chi1inv(arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_chi1inv__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::component arg2 ;
  meep::material_function *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:structure_set_chi1inv",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_chi1inv" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "structure_set_chi1inv" "', argument " "3"" of type '" "meep::material_function &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_set_chi1inv" "', argument " "3"" of type '" "meep::material_function &""'"); 
  }
  arg3 = reinterpret_cast< meep::material_function * >(argp3);
  (arg1)->set_chi1inv(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_chi1inv(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_meep__material_function, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_structure_set_chi1inv__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_meep__material_function, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_structure_set_chi1inv__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_meep__material_function, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_structure_set_chi1inv__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_meep__material_function, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_structure_set_chi1inv__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'structure_set_chi1inv'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::structure::set_chi1inv(meep::component,meep::material_function &,bool,double,int)\n"
    "    meep::structure::set_chi1inv(meep::component,meep::material_function &,bool,double)\n"
    "    meep::structure::set_chi1inv(meep::component,meep::material_function &,bool)\n"
    "    meep::structure::set_chi1inv(meep::component,meep::material_function &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_structure_has_chi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::component arg2 ;
  meep::direction arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:structure_has_chi",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_has_chi" "', argument " "1"" of type '" "meep::structure const *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_has_chi" "', argument " "3"" of type '" "meep::direction""'");
  } 
  arg3 = static_cast< meep::direction >(val3);
  result = (bool)((meep::structure const *)arg1)->has_chi(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_epsilon__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::material_function *arg2 = 0 ;
  bool arg3 ;
  double arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:structure_set_epsilon",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_epsilon" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_set_epsilon" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_set_epsilon" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  arg2 = reinterpret_cast< meep::material_function * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_set_epsilon" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "structure_set_epsilon" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "structure_set_epsilon" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  (arg1)->set_epsilon(*arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_epsilon__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::material_function *arg2 = 0 ;
  bool arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:structure_set_epsilon",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_epsilon" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_set_epsilon" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_set_epsilon" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  arg2 = reinterpret_cast< meep::material_function * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_set_epsilon" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "structure_set_epsilon" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->set_epsilon(*arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_epsilon__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::material_function *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:structure_set_epsilon",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_epsilon" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_set_epsilon" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_set_epsilon" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  arg2 = reinterpret_cast< meep::material_function * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_set_epsilon" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->set_epsilon(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_epsilon__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::material_function *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_set_epsilon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_epsilon" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_set_epsilon" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_set_epsilon" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  arg2 = reinterpret_cast< meep::material_function * >(argp2);
  (arg1)->set_epsilon(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_epsilon__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  double (*arg2)(meep::vec const &) = (double (*)(meep::vec const &)) 0 ;
  bool arg3 ;
  double arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:structure_set_epsilon",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_epsilon" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    if (obj1 == Py_None) {
      arg2 = NULL;
      py_callback = NULL;
    } else {
      arg2 = py_callback_wrap;
      py_callback = obj1;
      Py_INCREF(py_callback);
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_set_epsilon" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "structure_set_epsilon" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "structure_set_epsilon" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  (arg1)->set_epsilon(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  {
    Py_XDECREF(py_callback);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_callback);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_epsilon__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  double (*arg2)(meep::vec const &) = (double (*)(meep::vec const &)) 0 ;
  bool arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:structure_set_epsilon",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_epsilon" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    if (obj1 == Py_None) {
      arg2 = NULL;
      py_callback = NULL;
    } else {
      arg2 = py_callback_wrap;
      py_callback = obj1;
      Py_INCREF(py_callback);
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_set_epsilon" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "structure_set_epsilon" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->set_epsilon(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  {
    Py_XDECREF(py_callback);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_callback);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_epsilon__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  double (*arg2)(meep::vec const &) = (double (*)(meep::vec const &)) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:structure_set_epsilon",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_epsilon" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    if (obj1 == Py_None) {
      arg2 = NULL;
      py_callback = NULL;
    } else {
      arg2 = py_callback_wrap;
      py_callback = obj1;
      Py_INCREF(py_callback);
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_set_epsilon" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->set_epsilon(arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    Py_XDECREF(py_callback);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_callback);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_epsilon__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  double (*arg2)(meep::vec const &) = (double (*)(meep::vec const &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_set_epsilon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_epsilon" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    if (obj1 == Py_None) {
      arg2 = NULL;
      py_callback = NULL;
    } else {
      arg2 = py_callback_wrap;
      py_callback = obj1;
      Py_INCREF(py_callback);
    }
  }
  (arg1)->set_epsilon(arg2);
  resultobj = SWIG_Py_Void();
  {
    Py_XDECREF(py_callback);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_callback);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_epsilon(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__material_function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_structure_set_epsilon__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]) || argv[1] == Py_None;
      }
      if (_v) {
        return _wrap_structure_set_epsilon__SWIG_7(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]) || argv[1] == Py_None;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_structure_set_epsilon__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__material_function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_structure_set_epsilon__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__material_function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_structure_set_epsilon__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]) || argv[1] == Py_None;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_structure_set_epsilon__SWIG_5(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]) || argv[1] == Py_None;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_structure_set_epsilon__SWIG_4(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__material_function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_structure_set_epsilon__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'structure_set_epsilon'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::structure::set_epsilon(meep::material_function &,bool,double,int)\n"
    "    meep::structure::set_epsilon(meep::material_function &,bool,double)\n"
    "    meep::structure::set_epsilon(meep::material_function &,bool)\n"
    "    meep::structure::set_epsilon(meep::material_function &)\n"
    "    meep::structure::set_epsilon(double (*)(meep::vec const &),bool,double,int)\n"
    "    meep::structure::set_epsilon(double (*)(meep::vec const &),bool,double)\n"
    "    meep::structure::set_epsilon(double (*)(meep::vec const &),bool)\n"
    "    meep::structure::set_epsilon(double (*)(meep::vec const &))\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_structure_set_mu__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::material_function *arg2 = 0 ;
  bool arg3 ;
  double arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:structure_set_mu",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_mu" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_set_mu" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_set_mu" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  arg2 = reinterpret_cast< meep::material_function * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_set_mu" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "structure_set_mu" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "structure_set_mu" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  (arg1)->set_mu(*arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_mu__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::material_function *arg2 = 0 ;
  bool arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:structure_set_mu",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_mu" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_set_mu" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_set_mu" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  arg2 = reinterpret_cast< meep::material_function * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_set_mu" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "structure_set_mu" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->set_mu(*arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_mu__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::material_function *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:structure_set_mu",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_mu" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_set_mu" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_set_mu" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  arg2 = reinterpret_cast< meep::material_function * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_set_mu" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->set_mu(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_mu__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::material_function *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_set_mu",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_mu" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_set_mu" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_set_mu" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  arg2 = reinterpret_cast< meep::material_function * >(argp2);
  (arg1)->set_mu(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_mu__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  double (*arg2)(meep::vec const &) = (double (*)(meep::vec const &)) 0 ;
  bool arg3 ;
  double arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:structure_set_mu",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_mu" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    if (obj1 == Py_None) {
      arg2 = NULL;
      py_callback = NULL;
    } else {
      arg2 = py_callback_wrap;
      py_callback = obj1;
      Py_INCREF(py_callback);
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_set_mu" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "structure_set_mu" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "structure_set_mu" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  (arg1)->set_mu(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  {
    Py_XDECREF(py_callback);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_callback);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_mu__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  double (*arg2)(meep::vec const &) = (double (*)(meep::vec const &)) 0 ;
  bool arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:structure_set_mu",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_mu" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    if (obj1 == Py_None) {
      arg2 = NULL;
      py_callback = NULL;
    } else {
      arg2 = py_callback_wrap;
      py_callback = obj1;
      Py_INCREF(py_callback);
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_set_mu" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "structure_set_mu" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->set_mu(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  {
    Py_XDECREF(py_callback);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_callback);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_mu__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  double (*arg2)(meep::vec const &) = (double (*)(meep::vec const &)) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:structure_set_mu",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_mu" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    if (obj1 == Py_None) {
      arg2 = NULL;
      py_callback = NULL;
    } else {
      arg2 = py_callback_wrap;
      py_callback = obj1;
      Py_INCREF(py_callback);
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_set_mu" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->set_mu(arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    Py_XDECREF(py_callback);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_callback);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_mu__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  double (*arg2)(meep::vec const &) = (double (*)(meep::vec const &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_set_mu",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_mu" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    if (obj1 == Py_None) {
      arg2 = NULL;
      py_callback = NULL;
    } else {
      arg2 = py_callback_wrap;
      py_callback = obj1;
      Py_INCREF(py_callback);
    }
  }
  (arg1)->set_mu(arg2);
  resultobj = SWIG_Py_Void();
  {
    Py_XDECREF(py_callback);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_callback);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_mu(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__material_function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_structure_set_mu__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]) || argv[1] == Py_None;
      }
      if (_v) {
        return _wrap_structure_set_mu__SWIG_7(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]) || argv[1] == Py_None;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_structure_set_mu__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__material_function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_structure_set_mu__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__material_function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_structure_set_mu__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]) || argv[1] == Py_None;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_structure_set_mu__SWIG_5(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]) || argv[1] == Py_None;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_structure_set_mu__SWIG_4(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__material_function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_structure_set_mu__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'structure_set_mu'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::structure::set_mu(meep::material_function &,bool,double,int)\n"
    "    meep::structure::set_mu(meep::material_function &,bool,double)\n"
    "    meep::structure::set_mu(meep::material_function &,bool)\n"
    "    meep::structure::set_mu(meep::material_function &)\n"
    "    meep::structure::set_mu(double (*)(meep::vec const &),bool,double,int)\n"
    "    meep::structure::set_mu(double (*)(meep::vec const &),bool,double)\n"
    "    meep::structure::set_mu(double (*)(meep::vec const &),bool)\n"
    "    meep::structure::set_mu(double (*)(meep::vec const &))\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_structure_set_conductivity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::component arg2 ;
  meep::material_function *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:structure_set_conductivity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_conductivity" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "structure_set_conductivity" "', argument " "3"" of type '" "meep::material_function &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_set_conductivity" "', argument " "3"" of type '" "meep::material_function &""'"); 
  }
  arg3 = reinterpret_cast< meep::material_function * >(argp3);
  (arg1)->set_conductivity(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_conductivity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::component arg2 ;
  double (*arg3)(meep::vec const &) = (double (*)(meep::vec const &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:structure_set_conductivity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_conductivity" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  {
    if (obj2 == Py_None) {
      arg3 = NULL;
      py_callback = NULL;
    } else {
      arg3 = py_callback_wrap;
      py_callback = obj2;
      Py_INCREF(py_callback);
    }
  }
  (arg1)->set_conductivity(arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    Py_XDECREF(py_callback);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_callback);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_conductivity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_meep__material_function, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_structure_set_conductivity__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        {
          _v = PyCallable_Check(argv[2]) || argv[2] == Py_None;
        }
        if (_v) {
          return _wrap_structure_set_conductivity__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'structure_set_conductivity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::structure::set_conductivity(meep::component,meep::material_function &)\n"
    "    meep::structure::set_conductivity(meep::component,double (*)(meep::vec const &))\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_structure_set_chi3__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::component arg2 ;
  meep::material_function *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:structure_set_chi3",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_chi3" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "structure_set_chi3" "', argument " "3"" of type '" "meep::material_function &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_set_chi3" "', argument " "3"" of type '" "meep::material_function &""'"); 
  }
  arg3 = reinterpret_cast< meep::material_function * >(argp3);
  (arg1)->set_chi3(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_chi3__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::material_function *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_set_chi3",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_chi3" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_set_chi3" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_set_chi3" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  arg2 = reinterpret_cast< meep::material_function * >(argp2);
  (arg1)->set_chi3(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_chi3__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  double (*arg2)(meep::vec const &) = (double (*)(meep::vec const &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_set_chi3",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_chi3" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    if (obj1 == Py_None) {
      arg2 = NULL;
      py_callback = NULL;
    } else {
      arg2 = py_callback_wrap;
      py_callback = obj1;
      Py_INCREF(py_callback);
    }
  }
  (arg1)->set_chi3(arg2);
  resultobj = SWIG_Py_Void();
  {
    Py_XDECREF(py_callback);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_callback);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_chi3(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__material_function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_structure_set_chi3__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]) || argv[1] == Py_None;
      }
      if (_v) {
        return _wrap_structure_set_chi3__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_meep__material_function, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_structure_set_chi3__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'structure_set_chi3'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::structure::set_chi3(meep::component,meep::material_function &)\n"
    "    meep::structure::set_chi3(meep::material_function &)\n"
    "    meep::structure::set_chi3(double (*)(meep::vec const &))\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_structure_set_chi2__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::component arg2 ;
  meep::material_function *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:structure_set_chi2",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_chi2" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "structure_set_chi2" "', argument " "3"" of type '" "meep::material_function &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_set_chi2" "', argument " "3"" of type '" "meep::material_function &""'"); 
  }
  arg3 = reinterpret_cast< meep::material_function * >(argp3);
  (arg1)->set_chi2(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_chi2__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::material_function *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_set_chi2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_chi2" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_set_chi2" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_set_chi2" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  arg2 = reinterpret_cast< meep::material_function * >(argp2);
  (arg1)->set_chi2(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_chi2__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  double (*arg2)(meep::vec const &) = (double (*)(meep::vec const &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_set_chi2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_chi2" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    if (obj1 == Py_None) {
      arg2 = NULL;
      py_callback = NULL;
    } else {
      arg2 = py_callback_wrap;
      py_callback = obj1;
      Py_INCREF(py_callback);
    }
  }
  (arg1)->set_chi2(arg2);
  resultobj = SWIG_Py_Void();
  {
    Py_XDECREF(py_callback);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_callback);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_chi2(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__material_function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_structure_set_chi2__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]) || argv[1] == Py_None;
      }
      if (_v) {
        return _wrap_structure_set_chi2__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_meep__material_function, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_structure_set_chi2__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'structure_set_chi2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::structure::set_chi2(meep::component,meep::material_function &)\n"
    "    meep::structure::set_chi2(meep::material_function &)\n"
    "    meep::structure::set_chi2(double (*)(meep::vec const &))\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_structure_add_susceptibility__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  double (*arg2)(meep::vec const &) = (double (*)(meep::vec const &)) 0 ;
  meep::field_type arg3 ;
  meep::susceptibility *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:structure_add_susceptibility",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_add_susceptibility" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    if (obj1 == Py_None) {
      arg2 = NULL;
      py_callback = NULL;
    } else {
      arg2 = py_callback_wrap;
      py_callback = obj1;
      Py_INCREF(py_callback);
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_add_susceptibility" "', argument " "3"" of type '" "meep::field_type""'");
  } 
  arg3 = static_cast< meep::field_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__susceptibility,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "structure_add_susceptibility" "', argument " "4"" of type '" "meep::susceptibility const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_add_susceptibility" "', argument " "4"" of type '" "meep::susceptibility const &""'"); 
  }
  arg4 = reinterpret_cast< meep::susceptibility * >(argp4);
  (arg1)->add_susceptibility(arg2,arg3,(meep::susceptibility const &)*arg4);
  resultobj = SWIG_Py_Void();
  {
    Py_XDECREF(py_callback);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_callback);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_add_susceptibility__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::material_function *arg2 = 0 ;
  meep::field_type arg3 ;
  meep::susceptibility *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:structure_add_susceptibility",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_add_susceptibility" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__material_function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_add_susceptibility" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_add_susceptibility" "', argument " "2"" of type '" "meep::material_function &""'"); 
  }
  arg2 = reinterpret_cast< meep::material_function * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_add_susceptibility" "', argument " "3"" of type '" "meep::field_type""'");
  } 
  arg3 = static_cast< meep::field_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__susceptibility,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "structure_add_susceptibility" "', argument " "4"" of type '" "meep::susceptibility const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_add_susceptibility" "', argument " "4"" of type '" "meep::susceptibility const &""'"); 
  }
  arg4 = reinterpret_cast< meep::susceptibility * >(argp4);
  (arg1)->add_susceptibility(*arg2,arg3,(meep::susceptibility const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_add_susceptibility(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]) || argv[1] == Py_None;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__susceptibility, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_structure_add_susceptibility__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__material_function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__susceptibility, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_structure_add_susceptibility__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'structure_add_susceptibility'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::structure::add_susceptibility(double (*)(meep::vec const &),meep::field_type,meep::susceptibility const &)\n"
    "    meep::structure::add_susceptibility(meep::material_function &,meep::field_type,meep::susceptibility const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_structure_remove_susceptibilities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_remove_susceptibilities",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_remove_susceptibilities" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  (arg1)->remove_susceptibilities();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_set_output_directory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_set_output_directory",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_set_output_directory" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_set_output_directory" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->set_output_directory((char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_mix_with(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::structure *arg2 = (meep::structure *) 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:structure_mix_with",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_mix_with" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_mix_with" "', argument " "2"" of type '" "meep::structure const *""'"); 
  }
  arg2 = reinterpret_cast< meep::structure * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_mix_with" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->mix_with((meep::structure const *)arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_equal_layout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::structure *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_equal_layout",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_equal_layout" "', argument " "1"" of type '" "meep::structure const *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__structure,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_equal_layout" "', argument " "2"" of type '" "meep::structure const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_equal_layout" "', argument " "2"" of type '" "meep::structure const &""'"); 
  }
  arg2 = reinterpret_cast< meep::structure * >(argp2);
  result = (bool)((meep::structure const *)arg1)->equal_layout((meep::structure const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_print_layout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_print_layout",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_print_layout" "', argument " "1"" of type '" "meep::structure const *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  ((meep::structure const *)arg1)->print_layout();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_dump(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_dump",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_dump" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_dump" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->dump((char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_load(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_load" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_load" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->load((char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_get_chi1inv__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::component arg2 ;
  meep::direction arg3 ;
  meep::ivec *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:structure_get_chi1inv",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_get_chi1inv" "', argument " "1"" of type '" "meep::structure const *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_get_chi1inv" "', argument " "3"" of type '" "meep::direction""'");
  } 
  arg3 = static_cast< meep::direction >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "structure_get_chi1inv" "', argument " "4"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_get_chi1inv" "', argument " "4"" of type '" "meep::ivec const &""'"); 
  }
  arg4 = reinterpret_cast< meep::ivec * >(argp4);
  result = (double)((meep::structure const *)arg1)->get_chi1inv(arg2,arg3,(meep::ivec const &)*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_get_chi1inv__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::component arg2 ;
  meep::direction arg3 ;
  meep::vec *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:structure_get_chi1inv",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_get_chi1inv" "', argument " "1"" of type '" "meep::structure const *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_get_chi1inv" "', argument " "3"" of type '" "meep::direction""'");
  } 
  arg3 = static_cast< meep::direction >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "structure_get_chi1inv" "', argument " "4"" of type '" "meep::vec const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_get_chi1inv" "', argument " "4"" of type '" "meep::vec const &""'"); 
  }
  arg4 = reinterpret_cast< meep::vec * >(argp4);
  result = (double)((meep::structure const *)arg1)->get_chi1inv(arg2,arg3,(meep::vec const &)*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_get_chi1inv(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__ivec, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_structure_get_chi1inv__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__vec, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_structure_get_chi1inv__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'structure_get_chi1inv'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::structure::get_chi1inv(meep::component,meep::direction,meep::ivec const &) const\n"
    "    meep::structure::get_chi1inv(meep::component,meep::direction,meep::vec const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_structure_get_inveps__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::component arg2 ;
  meep::direction arg3 ;
  meep::ivec *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:structure_get_inveps",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_get_inveps" "', argument " "1"" of type '" "meep::structure const *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_get_inveps" "', argument " "3"" of type '" "meep::direction""'");
  } 
  arg3 = static_cast< meep::direction >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "structure_get_inveps" "', argument " "4"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_get_inveps" "', argument " "4"" of type '" "meep::ivec const &""'"); 
  }
  arg4 = reinterpret_cast< meep::ivec * >(argp4);
  result = (double)((meep::structure const *)arg1)->get_inveps(arg2,arg3,(meep::ivec const &)*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_get_inveps__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::component arg2 ;
  meep::direction arg3 ;
  meep::vec *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:structure_get_inveps",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_get_inveps" "', argument " "1"" of type '" "meep::structure const *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "structure_get_inveps" "', argument " "3"" of type '" "meep::direction""'");
  } 
  arg3 = static_cast< meep::direction >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "structure_get_inveps" "', argument " "4"" of type '" "meep::vec const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_get_inveps" "', argument " "4"" of type '" "meep::vec const &""'"); 
  }
  arg4 = reinterpret_cast< meep::vec * >(argp4);
  result = (double)((meep::structure const *)arg1)->get_inveps(arg2,arg3,(meep::vec const &)*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_get_inveps(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__ivec, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_structure_get_inveps__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__vec, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_structure_get_inveps__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'structure_get_inveps'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::structure::get_inveps(meep::component,meep::direction,meep::ivec const &) const\n"
    "    meep::structure::get_inveps(meep::component,meep::direction,meep::vec const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_structure_get_eps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_get_eps",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_get_eps" "', argument " "1"" of type '" "meep::structure const *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_get_eps" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_get_eps" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = (double)((meep::structure const *)arg1)->get_eps((meep::vec const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_get_mu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:structure_get_mu",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_get_mu" "', argument " "1"" of type '" "meep::structure const *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "structure_get_mu" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "structure_get_mu" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = (double)((meep::structure const *)arg1)->get_mu((meep::vec const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_structure_max_eps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:structure_max_eps",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "structure_max_eps" "', argument " "1"" of type '" "meep::structure const *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  result = (double)((meep::structure const *)arg1)->max_eps();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *structure_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__structure, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_src_time_is_integrated_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::src_time *arg1 = (meep::src_time *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:src_time_is_integrated_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "src_time_is_integrated_set" "', argument " "1"" of type '" "meep::src_time *""'"); 
  }
  arg1 = reinterpret_cast< meep::src_time * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "src_time_is_integrated_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->is_integrated = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_src_time_is_integrated_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::src_time *arg1 = (meep::src_time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:src_time_is_integrated_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "src_time_is_integrated_get" "', argument " "1"" of type '" "meep::src_time *""'"); 
  }
  arg1 = reinterpret_cast< meep::src_time * >(argp1);
  result = (bool) ((arg1)->is_integrated);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_src_time__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::src_time *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_src_time")) SWIG_fail;
  result = (meep::src_time *)new meep::src_time();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__src_time, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_src_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::src_time *arg1 = (meep::src_time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_src_time",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__src_time, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_src_time" "', argument " "1"" of type '" "meep::src_time *""'"); 
  }
  arg1 = reinterpret_cast< meep::src_time * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_src_time__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::src_time *arg1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::src_time *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_src_time",&obj0)) SWIG_fail;
  {
    PyObject *swig_obj = NULL;
    void *tmp_ptr = 0;
    int tmp_res = 0;
    
    if(PyObject_IsInstance(obj0, py_source_time_object())) {
      swig_obj = PyObject_GetAttrString(obj0, "swigobj");
    } else if(PyObject_IsInstance(obj0, py_meep_src_time_object())) {
      swig_obj = obj0;
      Py_XINCREF(swig_obj);
    } else {
      PyErr_SetString(PyExc_TypeError, "Expected a meep.source.SourceTime or a meep.src_time\n");
      SWIG_fail;
    }
    
    tmp_res = SWIG_ConvertPtr(swig_obj, &tmp_ptr, SWIGTYPE_p_meep__src_time, 0);
    Py_XDECREF(swig_obj);
    
    if(!SWIG_IsOK(tmp_res)) {
      SWIG_exception_fail(SWIG_ArgError(tmp_res), "Couldn't convert Python object to meep::src_time");
    }
    arg1 = reinterpret_cast<meep::src_time *>(tmp_ptr);
    
  }
  result = (meep::src_time *)new meep::src_time((meep::src_time const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__src_time, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_src_time(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_src_time__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int py_source_time = PyObject_IsInstance(argv[0], py_source_time_object());
      int swig_src_time = PyObject_IsInstance(argv[0], py_meep_src_time_object());
      
      _v = py_source_time || swig_src_time;
    }
    if (_v) {
      return _wrap_new_src_time__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_src_time'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::src_time::src_time()\n"
    "    meep::src_time::src_time(meep::src_time const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_src_time_dipole__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::src_time *arg1 = (meep::src_time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:src_time_dipole",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "src_time_dipole" "', argument " "1"" of type '" "meep::src_time const *""'"); 
  }
  arg1 = reinterpret_cast< meep::src_time * >(argp1);
  result = ((meep::src_time const *)arg1)->dipole();
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_src_time_current__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::src_time *arg1 = (meep::src_time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:src_time_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "src_time_current" "', argument " "1"" of type '" "meep::src_time const *""'"); 
  }
  arg1 = reinterpret_cast< meep::src_time * >(argp1);
  result = ((meep::src_time const *)arg1)->current();
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_src_time_update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::src_time *arg1 = (meep::src_time *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:src_time_update",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "src_time_update" "', argument " "1"" of type '" "meep::src_time *""'"); 
  }
  arg1 = reinterpret_cast< meep::src_time * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "src_time_update" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "src_time_update" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->update(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_src_time_current__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::src_time *arg1 = (meep::src_time *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:src_time_current",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "src_time_current" "', argument " "1"" of type '" "meep::src_time const *""'"); 
  }
  arg1 = reinterpret_cast< meep::src_time * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "src_time_current" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "src_time_current" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = ((meep::src_time const *)arg1)->current(arg2,arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_src_time_current(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__src_time, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_src_time_current__SWIG_0(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__src_time, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_src_time_current__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'src_time_current'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::src_time::current() const\n"
    "    meep::src_time::current(double,double) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_src_time_last_time_max__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::src_time *arg1 = (meep::src_time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:src_time_last_time_max",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "src_time_last_time_max" "', argument " "1"" of type '" "meep::src_time *""'"); 
  }
  arg1 = reinterpret_cast< meep::src_time * >(argp1);
  result = (double)(arg1)->last_time_max();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_src_time_last_time_max__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::src_time *arg1 = (meep::src_time *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:src_time_last_time_max",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "src_time_last_time_max" "', argument " "1"" of type '" "meep::src_time *""'"); 
  }
  arg1 = reinterpret_cast< meep::src_time * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "src_time_last_time_max" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (double)(arg1)->last_time_max(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_src_time_last_time_max(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__src_time, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_src_time_last_time_max__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__src_time, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_src_time_last_time_max__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'src_time_last_time_max'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::src_time::last_time_max()\n"
    "    meep::src_time::last_time_max(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_src_time_add_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::src_time *arg1 = (meep::src_time *) 0 ;
  meep::src_time *arg2 = (meep::src_time *) 0 ;
  meep::src_time **arg3 = (meep::src_time **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::src_time *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:src_time_add_to",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "src_time_add_to" "', argument " "1"" of type '" "meep::src_time const *""'"); 
  }
  arg1 = reinterpret_cast< meep::src_time * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__src_time, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "src_time_add_to" "', argument " "2"" of type '" "meep::src_time *""'"); 
  }
  arg2 = reinterpret_cast< meep::src_time * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_p_meep__src_time, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "src_time_add_to" "', argument " "3"" of type '" "meep::src_time **""'"); 
  }
  arg3 = reinterpret_cast< meep::src_time ** >(argp3);
  result = (meep::src_time *)((meep::src_time const *)arg1)->add_to(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__src_time, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_src_time_next_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::src_time *arg1 = (meep::src_time *) 0 ;
  meep::src_time *arg2 = (meep::src_time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:src_time_next_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "src_time_next_set" "', argument " "1"" of type '" "meep::src_time *""'"); 
  }
  arg1 = reinterpret_cast< meep::src_time * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__src_time, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "src_time_next_set" "', argument " "2"" of type '" "meep::src_time *""'"); 
  }
  arg2 = reinterpret_cast< meep::src_time * >(argp2);
  if (arg1) (arg1)->next = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_src_time_next_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::src_time *arg1 = (meep::src_time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::src_time *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:src_time_next_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "src_time_next_get" "', argument " "1"" of type '" "meep::src_time *""'"); 
  }
  arg1 = reinterpret_cast< meep::src_time * >(argp1);
  result = (meep::src_time *) ((arg1)->next);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__src_time, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_src_time_dipole__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::src_time *arg1 = (meep::src_time *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:src_time_dipole",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "src_time_dipole" "', argument " "1"" of type '" "meep::src_time const *""'"); 
  }
  arg1 = reinterpret_cast< meep::src_time * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "src_time_dipole" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((meep::src_time const *)arg1)->dipole(arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_src_time_dipole(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__src_time, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_src_time_dipole__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__src_time, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_src_time_dipole__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'src_time_dipole'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::src_time::dipole() const\n"
    "    meep::src_time::dipole(double) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_src_time_last_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::src_time *arg1 = (meep::src_time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:src_time_last_time",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "src_time_last_time" "', argument " "1"" of type '" "meep::src_time const *""'"); 
  }
  arg1 = reinterpret_cast< meep::src_time * >(argp1);
  result = (double)((meep::src_time const *)arg1)->last_time();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_src_time_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::src_time *arg1 = (meep::src_time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::src_time *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:src_time_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "src_time_clone" "', argument " "1"" of type '" "meep::src_time const *""'"); 
  }
  arg1 = reinterpret_cast< meep::src_time * >(argp1);
  result = (meep::src_time *)((meep::src_time const *)arg1)->clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__src_time, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_src_time_is_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::src_time *arg1 = (meep::src_time *) 0 ;
  meep::src_time *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:src_time_is_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "src_time_is_equal" "', argument " "1"" of type '" "meep::src_time const *""'"); 
  }
  arg1 = reinterpret_cast< meep::src_time * >(argp1);
  {
    PyObject *swig_obj = NULL;
    void *tmp_ptr = 0;
    int tmp_res = 0;
    
    if(PyObject_IsInstance(obj1, py_source_time_object())) {
      swig_obj = PyObject_GetAttrString(obj1, "swigobj");
    } else if(PyObject_IsInstance(obj1, py_meep_src_time_object())) {
      swig_obj = obj1;
      Py_XINCREF(swig_obj);
    } else {
      PyErr_SetString(PyExc_TypeError, "Expected a meep.source.SourceTime or a meep.src_time\n");
      SWIG_fail;
    }
    
    tmp_res = SWIG_ConvertPtr(swig_obj, &tmp_ptr, SWIGTYPE_p_meep__src_time, 0);
    Py_XDECREF(swig_obj);
    
    if(!SWIG_IsOK(tmp_res)) {
      SWIG_exception_fail(SWIG_ArgError(tmp_res), "Couldn't convert Python object to meep::src_time");
    }
    arg2 = reinterpret_cast<meep::src_time *>(tmp_ptr);
    
  }
  result = (bool)((meep::src_time const *)arg1)->is_equal((meep::src_time const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_src_time_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::src_time *arg1 = (meep::src_time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:src_time_frequency",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "src_time_frequency" "', argument " "1"" of type '" "meep::src_time const *""'"); 
  }
  arg1 = reinterpret_cast< meep::src_time * >(argp1);
  result = ((meep::src_time const *)arg1)->frequency();
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_src_time_set_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::src_time *arg1 = (meep::src_time *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:src_time_set_frequency",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "src_time_set_frequency" "', argument " "1"" of type '" "meep::src_time *""'"); 
  }
  arg1 = reinterpret_cast< meep::src_time * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "src_time_set_frequency" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  (arg1)->set_frequency(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *src_time_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__src_time, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_src_times_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::src_time *arg1 = 0 ;
  meep::src_time *arg2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:src_times_equal",&obj0,&obj1)) SWIG_fail;
  {
    PyObject *swig_obj = NULL;
    void *tmp_ptr = 0;
    int tmp_res = 0;
    
    if(PyObject_IsInstance(obj0, py_source_time_object())) {
      swig_obj = PyObject_GetAttrString(obj0, "swigobj");
    } else if(PyObject_IsInstance(obj0, py_meep_src_time_object())) {
      swig_obj = obj0;
      Py_XINCREF(swig_obj);
    } else {
      PyErr_SetString(PyExc_TypeError, "Expected a meep.source.SourceTime or a meep.src_time\n");
      SWIG_fail;
    }
    
    tmp_res = SWIG_ConvertPtr(swig_obj, &tmp_ptr, SWIGTYPE_p_meep__src_time, 0);
    Py_XDECREF(swig_obj);
    
    if(!SWIG_IsOK(tmp_res)) {
      SWIG_exception_fail(SWIG_ArgError(tmp_res), "Couldn't convert Python object to meep::src_time");
    }
    arg1 = reinterpret_cast<meep::src_time *>(tmp_ptr);
    
  }
  {
    PyObject *swig_obj = NULL;
    void *tmp_ptr = 0;
    int tmp_res = 0;
    
    if(PyObject_IsInstance(obj1, py_source_time_object())) {
      swig_obj = PyObject_GetAttrString(obj1, "swigobj");
    } else if(PyObject_IsInstance(obj1, py_meep_src_time_object())) {
      swig_obj = obj1;
      Py_XINCREF(swig_obj);
    } else {
      PyErr_SetString(PyExc_TypeError, "Expected a meep.source.SourceTime or a meep.src_time\n");
      SWIG_fail;
    }
    
    tmp_res = SWIG_ConvertPtr(swig_obj, &tmp_ptr, SWIGTYPE_p_meep__src_time, 0);
    Py_XDECREF(swig_obj);
    
    if(!SWIG_IsOK(tmp_res)) {
      SWIG_exception_fail(SWIG_ArgError(tmp_res), "Couldn't convert Python object to meep::src_time");
    }
    arg2 = reinterpret_cast<meep::src_time *>(tmp_ptr);
    
  }
  result = (bool)meep::src_times_equal((meep::src_time const &)*arg1,(meep::src_time const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gaussian_src_time__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::gaussian_src_time *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_gaussian_src_time",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_gaussian_src_time" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_gaussian_src_time" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_gaussian_src_time" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (meep::gaussian_src_time *)new meep::gaussian_src_time(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__gaussian_src_time, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gaussian_src_time__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::gaussian_src_time *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_gaussian_src_time",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_gaussian_src_time" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_gaussian_src_time" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (meep::gaussian_src_time *)new meep::gaussian_src_time(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__gaussian_src_time, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gaussian_src_time__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  meep::gaussian_src_time *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_gaussian_src_time",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_gaussian_src_time" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_gaussian_src_time" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_gaussian_src_time" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_gaussian_src_time" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (meep::gaussian_src_time *)new meep::gaussian_src_time(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__gaussian_src_time, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gaussian_src_time(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_gaussian_src_time__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_gaussian_src_time__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_gaussian_src_time__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_gaussian_src_time'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::gaussian_src_time::gaussian_src_time(double,double,double)\n"
    "    meep::gaussian_src_time::gaussian_src_time(double,double)\n"
    "    meep::gaussian_src_time::gaussian_src_time(double,double,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_gaussian_src_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::gaussian_src_time *arg1 = (meep::gaussian_src_time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_gaussian_src_time",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__gaussian_src_time, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_gaussian_src_time" "', argument " "1"" of type '" "meep::gaussian_src_time *""'"); 
  }
  arg1 = reinterpret_cast< meep::gaussian_src_time * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gaussian_src_time_dipole(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::gaussian_src_time *arg1 = (meep::gaussian_src_time *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:gaussian_src_time_dipole",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__gaussian_src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gaussian_src_time_dipole" "', argument " "1"" of type '" "meep::gaussian_src_time const *""'"); 
  }
  arg1 = reinterpret_cast< meep::gaussian_src_time * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gaussian_src_time_dipole" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((meep::gaussian_src_time const *)arg1)->dipole(arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gaussian_src_time_last_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::gaussian_src_time *arg1 = (meep::gaussian_src_time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:gaussian_src_time_last_time",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__gaussian_src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gaussian_src_time_last_time" "', argument " "1"" of type '" "meep::gaussian_src_time const *""'"); 
  }
  arg1 = reinterpret_cast< meep::gaussian_src_time * >(argp1);
  result = (double)((meep::gaussian_src_time const *)arg1)->last_time();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gaussian_src_time_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::gaussian_src_time *arg1 = (meep::gaussian_src_time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::src_time *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:gaussian_src_time_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__gaussian_src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gaussian_src_time_clone" "', argument " "1"" of type '" "meep::gaussian_src_time const *""'"); 
  }
  arg1 = reinterpret_cast< meep::gaussian_src_time * >(argp1);
  result = (meep::src_time *)((meep::gaussian_src_time const *)arg1)->clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__src_time, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gaussian_src_time_is_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::gaussian_src_time *arg1 = (meep::gaussian_src_time *) 0 ;
  meep::src_time *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:gaussian_src_time_is_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__gaussian_src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gaussian_src_time_is_equal" "', argument " "1"" of type '" "meep::gaussian_src_time const *""'"); 
  }
  arg1 = reinterpret_cast< meep::gaussian_src_time * >(argp1);
  {
    PyObject *swig_obj = NULL;
    void *tmp_ptr = 0;
    int tmp_res = 0;
    
    if(PyObject_IsInstance(obj1, py_source_time_object())) {
      swig_obj = PyObject_GetAttrString(obj1, "swigobj");
    } else if(PyObject_IsInstance(obj1, py_meep_src_time_object())) {
      swig_obj = obj1;
      Py_XINCREF(swig_obj);
    } else {
      PyErr_SetString(PyExc_TypeError, "Expected a meep.source.SourceTime or a meep.src_time\n");
      SWIG_fail;
    }
    
    tmp_res = SWIG_ConvertPtr(swig_obj, &tmp_ptr, SWIGTYPE_p_meep__src_time, 0);
    Py_XDECREF(swig_obj);
    
    if(!SWIG_IsOK(tmp_res)) {
      SWIG_exception_fail(SWIG_ArgError(tmp_res), "Couldn't convert Python object to meep::src_time");
    }
    arg2 = reinterpret_cast<meep::src_time *>(tmp_ptr);
    
  }
  result = (bool)((meep::gaussian_src_time const *)arg1)->is_equal((meep::src_time const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gaussian_src_time_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::gaussian_src_time *arg1 = (meep::gaussian_src_time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:gaussian_src_time_frequency",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__gaussian_src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gaussian_src_time_frequency" "', argument " "1"" of type '" "meep::gaussian_src_time const *""'"); 
  }
  arg1 = reinterpret_cast< meep::gaussian_src_time * >(argp1);
  result = ((meep::gaussian_src_time const *)arg1)->frequency();
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gaussian_src_time_set_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::gaussian_src_time *arg1 = (meep::gaussian_src_time *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:gaussian_src_time_set_frequency",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__gaussian_src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gaussian_src_time_set_frequency" "', argument " "1"" of type '" "meep::gaussian_src_time *""'"); 
  }
  arg1 = reinterpret_cast< meep::gaussian_src_time * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gaussian_src_time_set_frequency" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  (arg1)->set_frequency(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *gaussian_src_time_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__gaussian_src_time, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_continuous_src_time__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  std::complex< double > val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  meep::continuous_src_time *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_continuous_src_time",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_continuous_src_time" "', argument " "1"" of type '" "std::complex< double >""'");
  } 
  arg1 = static_cast< std::complex< double > >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_continuous_src_time" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_continuous_src_time" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_continuous_src_time" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_continuous_src_time" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  result = (meep::continuous_src_time *)new meep::continuous_src_time(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__continuous_src_time, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_continuous_src_time__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  std::complex< double > val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  meep::continuous_src_time *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_continuous_src_time",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_continuous_src_time" "', argument " "1"" of type '" "std::complex< double >""'");
  } 
  arg1 = static_cast< std::complex< double > >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_continuous_src_time" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_continuous_src_time" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_continuous_src_time" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (meep::continuous_src_time *)new meep::continuous_src_time(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__continuous_src_time, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_continuous_src_time__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > arg1 ;
  double arg2 ;
  double arg3 ;
  std::complex< double > val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::continuous_src_time *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_continuous_src_time",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_continuous_src_time" "', argument " "1"" of type '" "std::complex< double >""'");
  } 
  arg1 = static_cast< std::complex< double > >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_continuous_src_time" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_continuous_src_time" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (meep::continuous_src_time *)new meep::continuous_src_time(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__continuous_src_time, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_continuous_src_time__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > arg1 ;
  double arg2 ;
  std::complex< double > val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::continuous_src_time *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_continuous_src_time",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_continuous_src_time" "', argument " "1"" of type '" "std::complex< double >""'");
  } 
  arg1 = static_cast< std::complex< double > >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_continuous_src_time" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (meep::continuous_src_time *)new meep::continuous_src_time(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__continuous_src_time, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_continuous_src_time__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > arg1 ;
  std::complex< double > val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::continuous_src_time *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_continuous_src_time",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_continuous_src_time" "', argument " "1"" of type '" "std::complex< double >""'");
  } 
  arg1 = static_cast< std::complex< double > >(val1);
  result = (meep::continuous_src_time *)new meep::continuous_src_time(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__continuous_src_time, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_continuous_src_time(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_continuous_src_time__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_continuous_src_time__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_continuous_src_time__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_continuous_src_time__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_continuous_src_time__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_continuous_src_time'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::continuous_src_time::continuous_src_time(std::complex< double >,double,double,double,double)\n"
    "    meep::continuous_src_time::continuous_src_time(std::complex< double >,double,double,double)\n"
    "    meep::continuous_src_time::continuous_src_time(std::complex< double >,double,double)\n"
    "    meep::continuous_src_time::continuous_src_time(std::complex< double >,double)\n"
    "    meep::continuous_src_time::continuous_src_time(std::complex< double >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_continuous_src_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::continuous_src_time *arg1 = (meep::continuous_src_time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_continuous_src_time",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__continuous_src_time, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_continuous_src_time" "', argument " "1"" of type '" "meep::continuous_src_time *""'"); 
  }
  arg1 = reinterpret_cast< meep::continuous_src_time * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_continuous_src_time_dipole(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::continuous_src_time *arg1 = (meep::continuous_src_time *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:continuous_src_time_dipole",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__continuous_src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "continuous_src_time_dipole" "', argument " "1"" of type '" "meep::continuous_src_time const *""'"); 
  }
  arg1 = reinterpret_cast< meep::continuous_src_time * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "continuous_src_time_dipole" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((meep::continuous_src_time const *)arg1)->dipole(arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_continuous_src_time_last_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::continuous_src_time *arg1 = (meep::continuous_src_time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:continuous_src_time_last_time",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__continuous_src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "continuous_src_time_last_time" "', argument " "1"" of type '" "meep::continuous_src_time const *""'"); 
  }
  arg1 = reinterpret_cast< meep::continuous_src_time * >(argp1);
  result = (double)((meep::continuous_src_time const *)arg1)->last_time();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_continuous_src_time_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::continuous_src_time *arg1 = (meep::continuous_src_time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::src_time *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:continuous_src_time_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__continuous_src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "continuous_src_time_clone" "', argument " "1"" of type '" "meep::continuous_src_time const *""'"); 
  }
  arg1 = reinterpret_cast< meep::continuous_src_time * >(argp1);
  result = (meep::src_time *)((meep::continuous_src_time const *)arg1)->clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__src_time, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_continuous_src_time_is_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::continuous_src_time *arg1 = (meep::continuous_src_time *) 0 ;
  meep::src_time *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:continuous_src_time_is_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__continuous_src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "continuous_src_time_is_equal" "', argument " "1"" of type '" "meep::continuous_src_time const *""'"); 
  }
  arg1 = reinterpret_cast< meep::continuous_src_time * >(argp1);
  {
    PyObject *swig_obj = NULL;
    void *tmp_ptr = 0;
    int tmp_res = 0;
    
    if(PyObject_IsInstance(obj1, py_source_time_object())) {
      swig_obj = PyObject_GetAttrString(obj1, "swigobj");
    } else if(PyObject_IsInstance(obj1, py_meep_src_time_object())) {
      swig_obj = obj1;
      Py_XINCREF(swig_obj);
    } else {
      PyErr_SetString(PyExc_TypeError, "Expected a meep.source.SourceTime or a meep.src_time\n");
      SWIG_fail;
    }
    
    tmp_res = SWIG_ConvertPtr(swig_obj, &tmp_ptr, SWIGTYPE_p_meep__src_time, 0);
    Py_XDECREF(swig_obj);
    
    if(!SWIG_IsOK(tmp_res)) {
      SWIG_exception_fail(SWIG_ArgError(tmp_res), "Couldn't convert Python object to meep::src_time");
    }
    arg2 = reinterpret_cast<meep::src_time *>(tmp_ptr);
    
  }
  result = (bool)((meep::continuous_src_time const *)arg1)->is_equal((meep::src_time const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_continuous_src_time_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::continuous_src_time *arg1 = (meep::continuous_src_time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:continuous_src_time_frequency",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__continuous_src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "continuous_src_time_frequency" "', argument " "1"" of type '" "meep::continuous_src_time const *""'"); 
  }
  arg1 = reinterpret_cast< meep::continuous_src_time * >(argp1);
  result = ((meep::continuous_src_time const *)arg1)->frequency();
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_continuous_src_time_set_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::continuous_src_time *arg1 = (meep::continuous_src_time *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:continuous_src_time_set_frequency",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__continuous_src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "continuous_src_time_set_frequency" "', argument " "1"" of type '" "meep::continuous_src_time *""'"); 
  }
  arg1 = reinterpret_cast< meep::continuous_src_time * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "continuous_src_time_set_frequency" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  (arg1)->set_frequency(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *continuous_src_time_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__continuous_src_time, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_custom_src_time__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > (*arg1)(double,void *) = (std::complex< double > (*)(double,void *)) 0 ;
  void *arg2 = (void *) 0 ;
  double arg3 ;
  double arg4 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::custom_src_time *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_custom_src_time",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    arg1 = py_src_func_wrap;
    arg2 = (void *)obj0;
  }
  ecode3 = SWIG_AsVal_double(obj1, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_custom_src_time" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj2, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_custom_src_time" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (meep::custom_src_time *)new meep::custom_src_time(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__custom_src_time, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_custom_src_time__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > (*arg1)(double,void *) = (std::complex< double > (*)(double,void *)) 0 ;
  void *arg2 = (void *) 0 ;
  double arg3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::custom_src_time *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_custom_src_time",&obj0,&obj1)) SWIG_fail;
  {
    arg1 = py_src_func_wrap;
    arg2 = (void *)obj0;
  }
  ecode3 = SWIG_AsVal_double(obj1, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_custom_src_time" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (meep::custom_src_time *)new meep::custom_src_time(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__custom_src_time, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_custom_src_time__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > (*arg1)(double,void *) = (std::complex< double > (*)(double,void *)) 0 ;
  void *arg2 = (void *) 0 ;
  PyObject * obj0 = 0 ;
  meep::custom_src_time *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_custom_src_time",&obj0)) SWIG_fail;
  {
    arg1 = py_src_func_wrap;
    arg2 = (void *)obj0;
  }
  result = (meep::custom_src_time *)new meep::custom_src_time(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__custom_src_time, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_custom_src_time(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      _v = PyFunction_Check(argv[0]);
    }
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_custom_src_time__SWIG_2(self, args);
      }
      return _wrap_new_custom_src_time__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = PyFunction_Check(argv[0]);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_custom_src_time__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = PyFunction_Check(argv[0]);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_custom_src_time__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_custom_src_time'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::custom_src_time::custom_src_time(std::complex< double > (*)(double,void *),void *,double,double)\n"
    "    meep::custom_src_time::custom_src_time(std::complex< double > (*)(double,void *),void *,double)\n"
    "    meep::custom_src_time::custom_src_time(std::complex< double > (*)(double,void *),void *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_custom_src_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::custom_src_time *arg1 = (meep::custom_src_time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_custom_src_time",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__custom_src_time, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_custom_src_time" "', argument " "1"" of type '" "meep::custom_src_time *""'"); 
  }
  arg1 = reinterpret_cast< meep::custom_src_time * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_custom_src_time_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::custom_src_time *arg1 = (meep::custom_src_time *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:custom_src_time_current",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__custom_src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "custom_src_time_current" "', argument " "1"" of type '" "meep::custom_src_time const *""'"); 
  }
  arg1 = reinterpret_cast< meep::custom_src_time * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "custom_src_time_current" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "custom_src_time_current" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = ((meep::custom_src_time const *)arg1)->current(arg2,arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_custom_src_time_dipole(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::custom_src_time *arg1 = (meep::custom_src_time *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:custom_src_time_dipole",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__custom_src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "custom_src_time_dipole" "', argument " "1"" of type '" "meep::custom_src_time const *""'"); 
  }
  arg1 = reinterpret_cast< meep::custom_src_time * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "custom_src_time_dipole" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((meep::custom_src_time const *)arg1)->dipole(arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_custom_src_time_last_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::custom_src_time *arg1 = (meep::custom_src_time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:custom_src_time_last_time",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__custom_src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "custom_src_time_last_time" "', argument " "1"" of type '" "meep::custom_src_time const *""'"); 
  }
  arg1 = reinterpret_cast< meep::custom_src_time * >(argp1);
  result = (double)((meep::custom_src_time const *)arg1)->last_time();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_custom_src_time_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::custom_src_time *arg1 = (meep::custom_src_time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::src_time *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:custom_src_time_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__custom_src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "custom_src_time_clone" "', argument " "1"" of type '" "meep::custom_src_time const *""'"); 
  }
  arg1 = reinterpret_cast< meep::custom_src_time * >(argp1);
  result = (meep::src_time *)((meep::custom_src_time const *)arg1)->clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__src_time, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_custom_src_time_is_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::custom_src_time *arg1 = (meep::custom_src_time *) 0 ;
  meep::src_time *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:custom_src_time_is_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__custom_src_time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "custom_src_time_is_equal" "', argument " "1"" of type '" "meep::custom_src_time const *""'"); 
  }
  arg1 = reinterpret_cast< meep::custom_src_time * >(argp1);
  {
    PyObject *swig_obj = NULL;
    void *tmp_ptr = 0;
    int tmp_res = 0;
    
    if(PyObject_IsInstance(obj1, py_source_time_object())) {
      swig_obj = PyObject_GetAttrString(obj1, "swigobj");
    } else if(PyObject_IsInstance(obj1, py_meep_src_time_object())) {
      swig_obj = obj1;
      Py_XINCREF(swig_obj);
    } else {
      PyErr_SetString(PyExc_TypeError, "Expected a meep.source.SourceTime or a meep.src_time\n");
      SWIG_fail;
    }
    
    tmp_res = SWIG_ConvertPtr(swig_obj, &tmp_ptr, SWIGTYPE_p_meep__src_time, 0);
    Py_XDECREF(swig_obj);
    
    if(!SWIG_IsOK(tmp_res)) {
      SWIG_exception_fail(SWIG_ArgError(tmp_res), "Couldn't convert Python object to meep::src_time");
    }
    arg2 = reinterpret_cast<meep::src_time *>(tmp_ptr);
    
  }
  result = (bool)((meep::custom_src_time const *)arg1)->is_equal((meep::src_time const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *custom_src_time_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__custom_src_time, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_monitor_point(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::monitor_point *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_monitor_point")) SWIG_fail;
  result = (meep::monitor_point *)new meep::monitor_point();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__monitor_point, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_monitor_point(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::monitor_point *arg1 = (meep::monitor_point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_monitor_point",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__monitor_point, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_monitor_point" "', argument " "1"" of type '" "meep::monitor_point *""'"); 
  }
  arg1 = reinterpret_cast< meep::monitor_point * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_monitor_point_loc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::monitor_point *arg1 = (meep::monitor_point *) 0 ;
  meep::vec *arg2 = (meep::vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:monitor_point_loc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__monitor_point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "monitor_point_loc_set" "', argument " "1"" of type '" "meep::monitor_point *""'"); 
  }
  arg1 = reinterpret_cast< meep::monitor_point * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__vec, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "monitor_point_loc_set" "', argument " "2"" of type '" "meep::vec *""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  if (arg1) (arg1)->loc = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_monitor_point_loc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::monitor_point *arg1 = (meep::monitor_point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:monitor_point_loc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__monitor_point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "monitor_point_loc_get" "', argument " "1"" of type '" "meep::monitor_point *""'"); 
  }
  arg1 = reinterpret_cast< meep::monitor_point * >(argp1);
  result = (meep::vec *)& ((arg1)->loc);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__vec, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_monitor_point_t_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::monitor_point *arg1 = (meep::monitor_point *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:monitor_point_t_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__monitor_point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "monitor_point_t_set" "', argument " "1"" of type '" "meep::monitor_point *""'"); 
  }
  arg1 = reinterpret_cast< meep::monitor_point * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "monitor_point_t_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->t = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_monitor_point_t_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::monitor_point *arg1 = (meep::monitor_point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:monitor_point_t_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__monitor_point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "monitor_point_t_get" "', argument " "1"" of type '" "meep::monitor_point *""'"); 
  }
  arg1 = reinterpret_cast< meep::monitor_point * >(argp1);
  result = (double) ((arg1)->t);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_monitor_point_f_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::monitor_point *arg1 = (meep::monitor_point *) 0 ;
  std::complex< double > *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:monitor_point_f_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__monitor_point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "monitor_point_f_set" "', argument " "1"" of type '" "meep::monitor_point *""'"); 
  }
  arg1 = reinterpret_cast< meep::monitor_point * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "monitor_point_f_set" "', argument " "2"" of type '" "std::complex< double > [meep::NUM_FIELD_COMPONENTS]""'"); 
  } 
  arg2 = reinterpret_cast< std::complex< double > * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_COMPONENTS; ++ii) *(std::complex< double > *)&arg1->f[ii] = *((std::complex< double > *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""f""' of type '""std::complex< double > [meep::NUM_FIELD_COMPONENTS]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_monitor_point_f_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::monitor_point *arg1 = (meep::monitor_point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:monitor_point_f_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__monitor_point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "monitor_point_f_get" "', argument " "1"" of type '" "meep::monitor_point *""'"); 
  }
  arg1 = reinterpret_cast< meep::monitor_point * >(argp1);
  result = (std::complex< double > *)(std::complex< double > *) ((arg1)->f);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_monitor_point_next_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::monitor_point *arg1 = (meep::monitor_point *) 0 ;
  meep::monitor_point *arg2 = (meep::monitor_point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:monitor_point_next_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__monitor_point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "monitor_point_next_set" "', argument " "1"" of type '" "meep::monitor_point *""'"); 
  }
  arg1 = reinterpret_cast< meep::monitor_point * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__monitor_point, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "monitor_point_next_set" "', argument " "2"" of type '" "meep::monitor_point *""'"); 
  }
  arg2 = reinterpret_cast< meep::monitor_point * >(argp2);
  if (arg1) (arg1)->next = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_monitor_point_next_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::monitor_point *arg1 = (meep::monitor_point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::monitor_point *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:monitor_point_next_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__monitor_point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "monitor_point_next_get" "', argument " "1"" of type '" "meep::monitor_point *""'"); 
  }
  arg1 = reinterpret_cast< meep::monitor_point * >(argp1);
  result = (meep::monitor_point *) ((arg1)->next);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__monitor_point, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_monitor_point_get_component(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::monitor_point *arg1 = (meep::monitor_point *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:monitor_point_get_component",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__monitor_point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "monitor_point_get_component" "', argument " "1"" of type '" "meep::monitor_point *""'"); 
  }
  arg1 = reinterpret_cast< meep::monitor_point * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  result = (arg1)->get_component(arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_monitor_point_poynting_in_direction__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::monitor_point *arg1 = (meep::monitor_point *) 0 ;
  meep::direction arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:monitor_point_poynting_in_direction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__monitor_point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "monitor_point_poynting_in_direction" "', argument " "1"" of type '" "meep::monitor_point *""'"); 
  }
  arg1 = reinterpret_cast< meep::monitor_point * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "monitor_point_poynting_in_direction" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  result = (double)(arg1)->poynting_in_direction(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_monitor_point_poynting_in_direction__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::monitor_point *arg1 = (meep::monitor_point *) 0 ;
  meep::vec arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:monitor_point_poynting_in_direction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__monitor_point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "monitor_point_poynting_in_direction" "', argument " "1"" of type '" "meep::monitor_point *""'"); 
  }
  arg1 = reinterpret_cast< meep::monitor_point * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "monitor_point_poynting_in_direction" "', argument " "2"" of type '" "meep::vec""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "monitor_point_poynting_in_direction" "', argument " "2"" of type '" "meep::vec""'");
    } else {
      meep::vec * temp = reinterpret_cast< meep::vec * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (double)(arg1)->poynting_in_direction(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_monitor_point_poynting_in_direction(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__monitor_point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__vec, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_monitor_point_poynting_in_direction__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__monitor_point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_monitor_point_poynting_in_direction__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'monitor_point_poynting_in_direction'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::monitor_point::poynting_in_direction(meep::direction)\n"
    "    meep::monitor_point::poynting_in_direction(meep::vec)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_monitor_point_fourier_transform__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::monitor_point *arg1 = (meep::monitor_point *) 0 ;
  meep::component arg2 ;
  std::complex< double > **arg3 = (std::complex< double > **) 0 ;
  std::complex< double > **arg4 = (std::complex< double > **) 0 ;
  int *arg5 = (int *) 0 ;
  double arg6 ;
  double arg7 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:monitor_point_fourier_transform",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__monitor_point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "monitor_point_fourier_transform" "', argument " "1"" of type '" "meep::monitor_point *""'"); 
  }
  arg1 = reinterpret_cast< meep::monitor_point * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "monitor_point_fourier_transform" "', argument " "3"" of type '" "std::complex< double > **""'"); 
  }
  arg3 = reinterpret_cast< std::complex< double > ** >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "monitor_point_fourier_transform" "', argument " "4"" of type '" "std::complex< double > **""'"); 
  }
  arg4 = reinterpret_cast< std::complex< double > ** >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "monitor_point_fourier_transform" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "monitor_point_fourier_transform" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "monitor_point_fourier_transform" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "monitor_point_fourier_transform" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  (arg1)->fourier_transform(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_monitor_point_fourier_transform__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::monitor_point *arg1 = (meep::monitor_point *) 0 ;
  meep::component arg2 ;
  std::complex< double > **arg3 = (std::complex< double > **) 0 ;
  std::complex< double > **arg4 = (std::complex< double > **) 0 ;
  int *arg5 = (int *) 0 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:monitor_point_fourier_transform",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__monitor_point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "monitor_point_fourier_transform" "', argument " "1"" of type '" "meep::monitor_point *""'"); 
  }
  arg1 = reinterpret_cast< meep::monitor_point * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "monitor_point_fourier_transform" "', argument " "3"" of type '" "std::complex< double > **""'"); 
  }
  arg3 = reinterpret_cast< std::complex< double > ** >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "monitor_point_fourier_transform" "', argument " "4"" of type '" "std::complex< double > **""'"); 
  }
  arg4 = reinterpret_cast< std::complex< double > ** >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "monitor_point_fourier_transform" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "monitor_point_fourier_transform" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "monitor_point_fourier_transform" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  (arg1)->fourier_transform(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_monitor_point_fourier_transform__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::monitor_point *arg1 = (meep::monitor_point *) 0 ;
  meep::component arg2 ;
  std::complex< double > **arg3 = (std::complex< double > **) 0 ;
  std::complex< double > **arg4 = (std::complex< double > **) 0 ;
  int *arg5 = (int *) 0 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:monitor_point_fourier_transform",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__monitor_point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "monitor_point_fourier_transform" "', argument " "1"" of type '" "meep::monitor_point *""'"); 
  }
  arg1 = reinterpret_cast< meep::monitor_point * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "monitor_point_fourier_transform" "', argument " "3"" of type '" "std::complex< double > **""'"); 
  }
  arg3 = reinterpret_cast< std::complex< double > ** >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "monitor_point_fourier_transform" "', argument " "4"" of type '" "std::complex< double > **""'"); 
  }
  arg4 = reinterpret_cast< std::complex< double > ** >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "monitor_point_fourier_transform" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "monitor_point_fourier_transform" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  (arg1)->fourier_transform(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_monitor_point_fourier_transform__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::monitor_point *arg1 = (meep::monitor_point *) 0 ;
  meep::component arg2 ;
  std::complex< double > **arg3 = (std::complex< double > **) 0 ;
  std::complex< double > **arg4 = (std::complex< double > **) 0 ;
  int *arg5 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:monitor_point_fourier_transform",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__monitor_point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "monitor_point_fourier_transform" "', argument " "1"" of type '" "meep::monitor_point *""'"); 
  }
  arg1 = reinterpret_cast< meep::monitor_point * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "monitor_point_fourier_transform" "', argument " "3"" of type '" "std::complex< double > **""'"); 
  }
  arg3 = reinterpret_cast< std::complex< double > ** >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "monitor_point_fourier_transform" "', argument " "4"" of type '" "std::complex< double > **""'"); 
  }
  arg4 = reinterpret_cast< std::complex< double > ** >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "monitor_point_fourier_transform" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  (arg1)->fourier_transform(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_monitor_point_fourier_transform(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__monitor_point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_p_std__complexT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_p_std__complexT_double_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_int, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_monitor_point_fourier_transform__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__monitor_point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_p_std__complexT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_p_std__complexT_double_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_int, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_monitor_point_fourier_transform__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__monitor_point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_p_std__complexT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_p_std__complexT_double_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_int, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_monitor_point_fourier_transform__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__monitor_point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_p_std__complexT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_p_std__complexT_double_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_int, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_monitor_point_fourier_transform__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'monitor_point_fourier_transform'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::monitor_point::fourier_transform(meep::component,std::complex< double > **,std::complex< double > **,int *,double,double,int)\n"
    "    meep::monitor_point::fourier_transform(meep::component,std::complex< double > **,std::complex< double > **,int *,double,double)\n"
    "    meep::monitor_point::fourier_transform(meep::component,std::complex< double > **,std::complex< double > **,int *,double)\n"
    "    meep::monitor_point::fourier_transform(meep::component,std::complex< double > **,std::complex< double > **,int *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_monitor_point_harminv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::monitor_point *arg1 = (meep::monitor_point *) 0 ;
  meep::component arg2 ;
  std::complex< double > **arg3 = (std::complex< double > **) 0 ;
  std::complex< double > **arg4 = (std::complex< double > **) 0 ;
  int *arg5 = (int *) 0 ;
  double arg6 ;
  double arg7 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:monitor_point_harminv",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__monitor_point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "monitor_point_harminv" "', argument " "1"" of type '" "meep::monitor_point *""'"); 
  }
  arg1 = reinterpret_cast< meep::monitor_point * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "monitor_point_harminv" "', argument " "3"" of type '" "std::complex< double > **""'"); 
  }
  arg3 = reinterpret_cast< std::complex< double > ** >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "monitor_point_harminv" "', argument " "4"" of type '" "std::complex< double > **""'"); 
  }
  arg4 = reinterpret_cast< std::complex< double > ** >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "monitor_point_harminv" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "monitor_point_harminv" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "monitor_point_harminv" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "monitor_point_harminv" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  (arg1)->harminv(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *monitor_point_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__monitor_point, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_dft_chunk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::ivec arg2 ;
  meep::ivec arg3 ;
  meep::vec arg4 ;
  meep::vec arg5 ;
  meep::vec arg6 ;
  meep::vec arg7 ;
  double arg8 ;
  double arg9 ;
  meep::component arg10 ;
  bool arg11 ;
  std::complex< double > arg12 ;
  meep::ivec arg13 ;
  meep::symmetry *arg14 = 0 ;
  int arg15 ;
  void *arg16 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  bool val11 ;
  int ecode11 = 0 ;
  std::complex< double > val12 ;
  int ecode12 = 0 ;
  void *argp13 ;
  int res13 = 0 ;
  void *argp14 = 0 ;
  int res14 = 0 ;
  int val15 ;
  int ecode15 = 0 ;
  int res16 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  PyObject * obj14 = 0 ;
  PyObject * obj15 = 0 ;
  meep::dft_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOO:new_dft_chunk",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_dft_chunk" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__ivec,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_dft_chunk" "', argument " "2"" of type '" "meep::ivec""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dft_chunk" "', argument " "2"" of type '" "meep::ivec""'");
    } else {
      meep::ivec * temp = reinterpret_cast< meep::ivec * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__ivec,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_dft_chunk" "', argument " "3"" of type '" "meep::ivec""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dft_chunk" "', argument " "3"" of type '" "meep::ivec""'");
    } else {
      meep::ivec * temp = reinterpret_cast< meep::ivec * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__vec,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_dft_chunk" "', argument " "4"" of type '" "meep::vec""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dft_chunk" "', argument " "4"" of type '" "meep::vec""'");
    } else {
      meep::vec * temp = reinterpret_cast< meep::vec * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_meep__vec,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_dft_chunk" "', argument " "5"" of type '" "meep::vec""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dft_chunk" "', argument " "5"" of type '" "meep::vec""'");
    } else {
      meep::vec * temp = reinterpret_cast< meep::vec * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_meep__vec,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_dft_chunk" "', argument " "6"" of type '" "meep::vec""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dft_chunk" "', argument " "6"" of type '" "meep::vec""'");
    } else {
      meep::vec * temp = reinterpret_cast< meep::vec * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_meep__vec,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_dft_chunk" "', argument " "7"" of type '" "meep::vec""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dft_chunk" "', argument " "7"" of type '" "meep::vec""'");
    } else {
      meep::vec * temp = reinterpret_cast< meep::vec * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_dft_chunk" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_dft_chunk" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  {
    arg10 = static_cast<meep::component>(PyInteger_AsLong(obj9));
  }
  ecode11 = SWIG_AsVal_bool(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "new_dft_chunk" "', argument " "11"" of type '" "bool""'");
  } 
  arg11 = static_cast< bool >(val11);
  ecode12 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "new_dft_chunk" "', argument " "12"" of type '" "std::complex< double >""'");
  } 
  arg12 = static_cast< std::complex< double > >(val12);
  {
    res13 = SWIG_ConvertPtr(obj12, &argp13, SWIGTYPE_p_meep__ivec,  0  | 0);
    if (!SWIG_IsOK(res13)) {
      SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "new_dft_chunk" "', argument " "13"" of type '" "meep::ivec""'"); 
    }  
    if (!argp13) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dft_chunk" "', argument " "13"" of type '" "meep::ivec""'");
    } else {
      meep::ivec * temp = reinterpret_cast< meep::ivec * >(argp13);
      arg13 = *temp;
      if (SWIG_IsNewObj(res13)) delete temp;
    }
  }
  res14 = SWIG_ConvertPtr(obj13, &argp14, SWIGTYPE_p_meep__symmetry,  0  | 0);
  if (!SWIG_IsOK(res14)) {
    SWIG_exception_fail(SWIG_ArgError(res14), "in method '" "new_dft_chunk" "', argument " "14"" of type '" "meep::symmetry const &""'"); 
  }
  if (!argp14) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dft_chunk" "', argument " "14"" of type '" "meep::symmetry const &""'"); 
  }
  arg14 = reinterpret_cast< meep::symmetry * >(argp14);
  ecode15 = SWIG_AsVal_int(obj14, &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "new_dft_chunk" "', argument " "15"" of type '" "int""'");
  } 
  arg15 = static_cast< int >(val15);
  res16 = SWIG_ConvertPtr(obj15,SWIG_as_voidptrptr(&arg16), 0, 0);
  if (!SWIG_IsOK(res16)) {
    SWIG_exception_fail(SWIG_ArgError(res16), "in method '" "new_dft_chunk" "', argument " "16"" of type '" "void const *""'"); 
  }
  result = (meep::dft_chunk *)new meep::dft_chunk(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,(meep::symmetry const &)*arg14,arg15,(void const *)arg16);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_chunk, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_dft_chunk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_dft_chunk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_dft_chunk" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_update_dft(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_update_dft",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_update_dft" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_chunk_update_dft" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->update_dft(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_scale_dft(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_scale_dft",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_scale_dft" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_chunk_scale_dft" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  (arg1)->scale_dft(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_process_dft_component(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  int arg2 ;
  meep::direction *arg3 = (meep::direction *) 0 ;
  meep::ivec arg4 ;
  meep::ivec arg5 ;
  int arg6 ;
  meep::h5file *arg7 = (meep::h5file *) 0 ;
  double *arg8 = (double *) 0 ;
  int arg9 ;
  std::complex< double > *arg10 = (std::complex< double > *) 0 ;
  void *arg11 = (void *) 0 ;
  void *arg12 = (void *) 0 ;
  meep::component arg13 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  int res11 ;
  int res12 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOO:dft_chunk_process_dft_component",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_process_dft_component" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_chunk_process_dft_component" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_meep__direction, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_chunk_process_dft_component" "', argument " "3"" of type '" "meep::direction *""'"); 
  }
  arg3 = reinterpret_cast< meep::direction * >(argp3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__ivec,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "dft_chunk_process_dft_component" "', argument " "4"" of type '" "meep::ivec""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_chunk_process_dft_component" "', argument " "4"" of type '" "meep::ivec""'");
    } else {
      meep::ivec * temp = reinterpret_cast< meep::ivec * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_meep__ivec,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "dft_chunk_process_dft_component" "', argument " "5"" of type '" "meep::ivec""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_chunk_process_dft_component" "', argument " "5"" of type '" "meep::ivec""'");
    } else {
      meep::ivec * temp = reinterpret_cast< meep::ivec * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "dft_chunk_process_dft_component" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "dft_chunk_process_dft_component" "', argument " "7"" of type '" "meep::h5file *""'"); 
  }
  arg7 = reinterpret_cast< meep::h5file * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "dft_chunk_process_dft_component" "', argument " "8"" of type '" "double *""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  ecode9 = SWIG_AsVal_int(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "dft_chunk_process_dft_component" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "dft_chunk_process_dft_component" "', argument " "10"" of type '" "std::complex< double > *""'"); 
  }
  arg10 = reinterpret_cast< std::complex< double > * >(argp10);
  res11 = SWIG_ConvertPtr(obj10,SWIG_as_voidptrptr(&arg11), 0, 0);
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "dft_chunk_process_dft_component" "', argument " "11"" of type '" "void *""'"); 
  }
  res12 = SWIG_ConvertPtr(obj11,SWIG_as_voidptrptr(&arg12), 0, 0);
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "dft_chunk_process_dft_component" "', argument " "12"" of type '" "void *""'"); 
  }
  {
    arg13 = static_cast<meep::component>(PyInteger_AsLong(obj12));
  }
  result = (arg1)->process_dft_component(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  meep::dft_chunk *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk___isub__" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__dft_chunk,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_chunk___isub__" "', argument " "2"" of type '" "meep::dft_chunk const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_chunk___isub__" "', argument " "2"" of type '" "meep::dft_chunk const &""'"); 
  }
  arg2 = reinterpret_cast< meep::dft_chunk * >(argp2);
  (arg1)->operator -=((meep::dft_chunk const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_omega_min_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_omega_min_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_omega_min_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_chunk_omega_min_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->omega_min = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_omega_min_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_omega_min_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_omega_min_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result = (double) ((arg1)->omega_min);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_domega_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_domega_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_domega_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_chunk_domega_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->domega = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_domega_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_domega_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_domega_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result = (double) ((arg1)->domega);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_Nomega_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_Nomega_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_Nomega_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_chunk_Nomega_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->Nomega = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_Nomega_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_Nomega_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_Nomega_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result = (int) ((arg1)->Nomega);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_c_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_c_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_c_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  if (arg1) (arg1)->c = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_c_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::component result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_c_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_c_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result = (meep::component) ((arg1)->c);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_N_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_N_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_N_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_chunk_N_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->N = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_N_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_N_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_N_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result =  ((arg1)->N);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_dft_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  std::complex< meep::realnum > *arg2 = (std::complex< meep::realnum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_dft_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_dft_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_chunk_dft_set" "', argument " "2"" of type '" "std::complex< meep::realnum > *""'"); 
  }
  arg2 = reinterpret_cast< std::complex< meep::realnum > * >(argp2);
  if (arg1) (arg1)->dft = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_dft_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< meep::realnum > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_dft_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_dft_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result = (std::complex< meep::realnum > *) ((arg1)->dft);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_next_in_chunk_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  meep::dft_chunk *arg2 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_next_in_chunk_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_next_in_chunk_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__dft_chunk, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_chunk_next_in_chunk_set" "', argument " "2"" of type '" "meep::dft_chunk *""'"); 
  }
  arg2 = reinterpret_cast< meep::dft_chunk * >(argp2);
  if (arg1) (arg1)->next_in_chunk = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_next_in_chunk_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::dft_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_next_in_chunk_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_next_in_chunk_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result = (meep::dft_chunk *) ((arg1)->next_in_chunk);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_next_in_dft_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  meep::dft_chunk *arg2 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_next_in_dft_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_next_in_dft_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__dft_chunk, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_chunk_next_in_dft_set" "', argument " "2"" of type '" "meep::dft_chunk *""'"); 
  }
  arg2 = reinterpret_cast< meep::dft_chunk * >(argp2);
  if (arg1) (arg1)->next_in_dft = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_next_in_dft_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::dft_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_next_in_dft_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_next_in_dft_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result = (meep::dft_chunk *) ((arg1)->next_in_dft);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_stored_weight_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_stored_weight_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_stored_weight_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_chunk_stored_weight_set" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  if (arg1) (arg1)->stored_weight = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_stored_weight_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_stored_weight_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_stored_weight_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result =  ((arg1)->stored_weight);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_include_dV_and_interp_weights_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_include_dV_and_interp_weights_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_include_dV_and_interp_weights_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_chunk_include_dV_and_interp_weights_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->include_dV_and_interp_weights = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_include_dV_and_interp_weights_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_include_dV_and_interp_weights_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_include_dV_and_interp_weights_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result = (bool) ((arg1)->include_dV_and_interp_weights);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_sqrt_dV_and_interp_weights_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_sqrt_dV_and_interp_weights_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_sqrt_dV_and_interp_weights_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_chunk_sqrt_dV_and_interp_weights_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->sqrt_dV_and_interp_weights = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_sqrt_dV_and_interp_weights_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_sqrt_dV_and_interp_weights_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_sqrt_dV_and_interp_weights_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result = (bool) ((arg1)->sqrt_dV_and_interp_weights);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_extra_weight_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_extra_weight_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_extra_weight_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_chunk_extra_weight_set" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  if (arg1) (arg1)->extra_weight = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_extra_weight_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_extra_weight_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_extra_weight_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result =  ((arg1)->extra_weight);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_fc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  meep::fields_chunk *arg2 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_fc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_fc_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__fields_chunk, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_chunk_fc_set" "', argument " "2"" of type '" "meep::fields_chunk *""'"); 
  }
  arg2 = reinterpret_cast< meep::fields_chunk * >(argp2);
  if (arg1) (arg1)->fc = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_fc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::fields_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_fc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_fc_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result = (meep::fields_chunk *) ((arg1)->fc);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk__is_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  meep::ivec *arg2 = (meep::ivec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk__is_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk__is_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_chunk__is_set" "', argument " "2"" of type '" "meep::ivec *""'"); 
  }
  arg2 = reinterpret_cast< meep::ivec * >(argp2);
  if (arg1) (arg1)->is = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk__is_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::ivec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk__is_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk__is_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result = (meep::ivec *)& ((arg1)->is);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__ivec, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_ie_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  meep::ivec *arg2 = (meep::ivec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_ie_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_ie_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_chunk_ie_set" "', argument " "2"" of type '" "meep::ivec *""'"); 
  }
  arg2 = reinterpret_cast< meep::ivec * >(argp2);
  if (arg1) (arg1)->ie = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_ie_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::ivec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_ie_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_ie_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result = (meep::ivec *)& ((arg1)->ie);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__ivec, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_s0_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  meep::vec *arg2 = (meep::vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_s0_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_s0_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__vec, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_chunk_s0_set" "', argument " "2"" of type '" "meep::vec *""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  if (arg1) (arg1)->s0 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_s0_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_s0_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_s0_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result = (meep::vec *)& ((arg1)->s0);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__vec, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_s1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  meep::vec *arg2 = (meep::vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_s1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_s1_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__vec, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_chunk_s1_set" "', argument " "2"" of type '" "meep::vec *""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  if (arg1) (arg1)->s1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_s1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_s1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_s1_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result = (meep::vec *)& ((arg1)->s1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__vec, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_e0_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  meep::vec *arg2 = (meep::vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_e0_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_e0_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__vec, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_chunk_e0_set" "', argument " "2"" of type '" "meep::vec *""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  if (arg1) (arg1)->e0 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_e0_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_e0_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_e0_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result = (meep::vec *)& ((arg1)->e0);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__vec, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_e1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  meep::vec *arg2 = (meep::vec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_e1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_e1_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__vec, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_chunk_e1_set" "', argument " "2"" of type '" "meep::vec *""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  if (arg1) (arg1)->e1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_e1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::vec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_e1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_e1_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result = (meep::vec *)& ((arg1)->e1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__vec, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_dV0_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_dV0_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_dV0_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_chunk_dV0_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->dV0 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_dV0_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_dV0_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_dV0_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result = (double) ((arg1)->dV0);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_dV1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_dV1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_dV1_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_chunk_dV1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->dV1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_dV1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_dV1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_dV1_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result = (double) ((arg1)->dV1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_scale_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_scale_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_scale_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_chunk_scale_set" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  if (arg1) (arg1)->scale = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_scale_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_scale_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_scale_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result =  ((arg1)->scale);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_shift_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  meep::ivec *arg2 = (meep::ivec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_shift_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_shift_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_chunk_shift_set" "', argument " "2"" of type '" "meep::ivec *""'"); 
  }
  arg2 = reinterpret_cast< meep::ivec * >(argp2);
  if (arg1) (arg1)->shift = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_shift_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::ivec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_shift_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_shift_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result = (meep::ivec *)& ((arg1)->shift);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__ivec, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_S_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  meep::symmetry *arg2 = (meep::symmetry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_S_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_S_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__symmetry, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_chunk_S_set" "', argument " "2"" of type '" "meep::symmetry *""'"); 
  }
  arg2 = reinterpret_cast< meep::symmetry * >(argp2);
  if (arg1) (arg1)->S = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_S_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::symmetry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_S_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_S_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result = (meep::symmetry *)& ((arg1)->S);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__symmetry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_sn_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_sn_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_sn_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_chunk_sn_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->sn = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_sn_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_sn_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_sn_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result = (int) ((arg1)->sn);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_dft_phase_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  std::complex< meep::realnum > *arg2 = (std::complex< meep::realnum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_dft_phase_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_dft_phase_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_chunk_dft_phase_set" "', argument " "2"" of type '" "std::complex< meep::realnum > *""'"); 
  }
  arg2 = reinterpret_cast< std::complex< meep::realnum > * >(argp2);
  if (arg1) (arg1)->dft_phase = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_dft_phase_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< meep::realnum > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_dft_phase_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_dft_phase_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result = (std::complex< meep::realnum > *) ((arg1)->dft_phase);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_avg1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_avg1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_avg1_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_chunk_avg1_set" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  if (arg1) (arg1)->avg1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_avg1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_avg1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_avg1_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result =  ((arg1)->avg1);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_avg2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_avg2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_avg2_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_chunk_avg2_set" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  if (arg1) (arg1)->avg2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_avg2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_avg2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_avg2_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result =  ((arg1)->avg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_vc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_chunk_vc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_vc_set" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_chunk_vc_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->vc = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_chunk_vc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_chunk_vc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_chunk_vc_get" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  result = (int) ((arg1)->vc);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *dft_chunk_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__dft_chunk, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_save_dft_hdf5__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  meep::component arg2 ;
  meep::h5file *arg3 = (meep::h5file *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:save_dft_hdf5",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "save_dft_hdf5" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "save_dft_hdf5" "', argument " "3"" of type '" "meep::h5file *""'"); 
  }
  arg3 = reinterpret_cast< meep::h5file * >(argp3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "save_dft_hdf5" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  meep::save_dft_hdf5(arg1,arg2,arg3,(char const *)arg4);
  resultobj = SWIG_Py_Void();
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_save_dft_hdf5__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  meep::component arg2 ;
  meep::h5file *arg3 = (meep::h5file *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:save_dft_hdf5",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "save_dft_hdf5" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "save_dft_hdf5" "', argument " "3"" of type '" "meep::h5file *""'"); 
  }
  arg3 = reinterpret_cast< meep::h5file * >(argp3);
  meep::save_dft_hdf5(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_load_dft_hdf5__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  meep::component arg2 ;
  meep::h5file *arg3 = (meep::h5file *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:load_dft_hdf5",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "load_dft_hdf5" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "load_dft_hdf5" "', argument " "3"" of type '" "meep::h5file *""'"); 
  }
  arg3 = reinterpret_cast< meep::h5file * >(argp3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "load_dft_hdf5" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  meep::load_dft_hdf5(arg1,arg2,arg3,(char const *)arg4);
  resultobj = SWIG_Py_Void();
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_load_dft_hdf5__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  meep::component arg2 ;
  meep::h5file *arg3 = (meep::h5file *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:load_dft_hdf5",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "load_dft_hdf5" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "load_dft_hdf5" "', argument " "3"" of type '" "meep::h5file *""'"); 
  }
  arg3 = reinterpret_cast< meep::h5file * >(argp3);
  meep::load_dft_hdf5(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_save_dft_hdf5__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  char *arg2 = (char *) 0 ;
  meep::h5file *arg3 = (meep::h5file *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:save_dft_hdf5",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "save_dft_hdf5" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "save_dft_hdf5" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "save_dft_hdf5" "', argument " "3"" of type '" "meep::h5file *""'"); 
  }
  arg3 = reinterpret_cast< meep::h5file * >(argp3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "save_dft_hdf5" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  meep::save_dft_hdf5(arg1,(char const *)arg2,arg3,(char const *)arg4);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_save_dft_hdf5__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  char *arg2 = (char *) 0 ;
  meep::h5file *arg3 = (meep::h5file *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:save_dft_hdf5",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "save_dft_hdf5" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "save_dft_hdf5" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "save_dft_hdf5" "', argument " "3"" of type '" "meep::h5file *""'"); 
  }
  arg3 = reinterpret_cast< meep::h5file * >(argp3);
  meep::save_dft_hdf5(arg1,(char const *)arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_save_dft_hdf5(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_chunk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_meep__h5file, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_save_dft_hdf5__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_chunk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_meep__h5file, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_save_dft_hdf5__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_chunk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_meep__h5file, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_save_dft_hdf5__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_chunk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_meep__h5file, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_save_dft_hdf5__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'save_dft_hdf5'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::save_dft_hdf5(meep::dft_chunk *,meep::component,meep::h5file *,char const *)\n"
    "    meep::save_dft_hdf5(meep::dft_chunk *,meep::component,meep::h5file *)\n"
    "    meep::save_dft_hdf5(meep::dft_chunk *,char const *,meep::h5file *,char const *)\n"
    "    meep::save_dft_hdf5(meep::dft_chunk *,char const *,meep::h5file *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_load_dft_hdf5__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  char *arg2 = (char *) 0 ;
  meep::h5file *arg3 = (meep::h5file *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:load_dft_hdf5",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "load_dft_hdf5" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "load_dft_hdf5" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "load_dft_hdf5" "', argument " "3"" of type '" "meep::h5file *""'"); 
  }
  arg3 = reinterpret_cast< meep::h5file * >(argp3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "load_dft_hdf5" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  meep::load_dft_hdf5(arg1,(char const *)arg2,arg3,(char const *)arg4);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_load_dft_hdf5__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  char *arg2 = (char *) 0 ;
  meep::h5file *arg3 = (meep::h5file *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:load_dft_hdf5",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "load_dft_hdf5" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "load_dft_hdf5" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "load_dft_hdf5" "', argument " "3"" of type '" "meep::h5file *""'"); 
  }
  arg3 = reinterpret_cast< meep::h5file * >(argp3);
  meep::load_dft_hdf5(arg1,(char const *)arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_load_dft_hdf5(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_chunk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_meep__h5file, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_load_dft_hdf5__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_chunk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_meep__h5file, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_load_dft_hdf5__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_chunk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_meep__h5file, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_load_dft_hdf5__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_chunk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_meep__h5file, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_load_dft_hdf5__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'load_dft_hdf5'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::load_dft_hdf5(meep::dft_chunk *,meep::component,meep::h5file *,char const *)\n"
    "    meep::load_dft_hdf5(meep::dft_chunk *,meep::component,meep::h5file *)\n"
    "    meep::load_dft_hdf5(meep::dft_chunk *,char const *,meep::h5file *,char const *)\n"
    "    meep::load_dft_hdf5(meep::dft_chunk *,char const *,meep::h5file *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_dft_flux__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::component arg1 ;
  meep::component arg2 ;
  meep::dft_chunk *arg3 = (meep::dft_chunk *) 0 ;
  meep::dft_chunk *arg4 = (meep::dft_chunk *) 0 ;
  double arg5 ;
  double arg6 ;
  int arg7 ;
  meep::volume *arg8 = 0 ;
  meep::direction arg9 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  meep::dft_flux *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_dft_flux",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  {
    arg1 = static_cast<meep::component>(PyInteger_AsLong(obj0));
  }
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_dft_flux" "', argument " "3"" of type '" "meep::dft_chunk *""'"); 
  }
  arg3 = reinterpret_cast< meep::dft_chunk * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_dft_flux" "', argument " "4"" of type '" "meep::dft_chunk *""'"); 
  }
  arg4 = reinterpret_cast< meep::dft_chunk * >(argp4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_dft_flux" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_dft_flux" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_dft_flux" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_dft_flux" "', argument " "8"" of type '" "meep::volume const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dft_flux" "', argument " "8"" of type '" "meep::volume const &""'"); 
  }
  arg8 = reinterpret_cast< meep::volume * >(argp8);
  ecode9 = SWIG_AsVal_int(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_dft_flux" "', argument " "9"" of type '" "meep::direction""'");
  } 
  arg9 = static_cast< meep::direction >(val9);
  result = (meep::dft_flux *)new meep::dft_flux(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(meep::volume const &)*arg8,arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_flux, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_dft_flux__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::dft_flux *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_dft_flux",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__dft_flux,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_dft_flux" "', argument " "1"" of type '" "meep::dft_flux const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dft_flux" "', argument " "1"" of type '" "meep::dft_flux const &""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  result = (meep::dft_flux *)new meep::dft_flux((meep::dft_flux const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_flux, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_dft_flux(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__dft_flux, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_dft_flux__SWIG_1(self, args);
    }
  }
  if (argc == 9) {
    int _v;
    {
      _v = PyInteger_Check(argv[0]) && PyInteger_AsLong(argv[0]) < 100;
    }
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_meep__dft_chunk, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_meep__dft_chunk, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_meep__volume, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    {
                      int res = SWIG_AsVal_int(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_dft_flux__SWIG_0(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_dft_flux'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::dft_flux::dft_flux(meep::component const,meep::component const,meep::dft_chunk *,meep::dft_chunk *,double,double,int,meep::volume const &,meep::direction)\n"
    "    meep::dft_flux::dft_flux(meep::dft_flux const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_dft_flux_flux(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_flux_flux",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_flux" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  result = (double *)(arg1)->flux();
  {
    int size = arg1->Nfreq;
    resultobj = PyList_New(size);
    for(int i = 0; i < size; i++) {
      PyList_SetItem(resultobj, i, PyFloat_FromDouble(result[i]));
    }
    
    delete[] result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_save_hdf5__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  meep::h5file *arg2 = (meep::h5file *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:dft_flux_save_hdf5",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_save_hdf5" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_flux_save_hdf5" "', argument " "2"" of type '" "meep::h5file *""'"); 
  }
  arg2 = reinterpret_cast< meep::h5file * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_flux_save_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->save_hdf5(arg2,(char const *)arg3);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_save_hdf5__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  meep::h5file *arg2 = (meep::h5file *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_flux_save_hdf5",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_save_hdf5" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_flux_save_hdf5" "', argument " "2"" of type '" "meep::h5file *""'"); 
  }
  arg2 = reinterpret_cast< meep::h5file * >(argp2);
  (arg1)->save_hdf5(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_load_hdf5__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  meep::h5file *arg2 = (meep::h5file *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:dft_flux_load_hdf5",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_load_hdf5" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_flux_load_hdf5" "', argument " "2"" of type '" "meep::h5file *""'"); 
  }
  arg2 = reinterpret_cast< meep::h5file * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_flux_load_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->load_hdf5(arg2,(char const *)arg3);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_load_hdf5__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  meep::h5file *arg2 = (meep::h5file *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_flux_load_hdf5",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_load_hdf5" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_flux_load_hdf5" "', argument " "2"" of type '" "meep::h5file *""'"); 
  }
  arg2 = reinterpret_cast< meep::h5file * >(argp2);
  (arg1)->load_hdf5(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  meep::dft_flux *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_flux___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux___isub__" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__dft_flux,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_flux___isub__" "', argument " "2"" of type '" "meep::dft_flux const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_flux___isub__" "', argument " "2"" of type '" "meep::dft_flux const &""'"); 
  }
  arg2 = reinterpret_cast< meep::dft_flux * >(argp2);
  (arg1)->operator -=((meep::dft_flux const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_save_hdf5__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  meep::fields *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:dft_flux_save_hdf5",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_save_hdf5" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__fields,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_flux_save_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_flux_save_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  arg2 = reinterpret_cast< meep::fields * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_flux_save_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "dft_flux_save_hdf5" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "dft_flux_save_hdf5" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->save_hdf5(*arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_save_hdf5__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  meep::fields *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:dft_flux_save_hdf5",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_save_hdf5" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__fields,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_flux_save_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_flux_save_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  arg2 = reinterpret_cast< meep::fields * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_flux_save_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "dft_flux_save_hdf5" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->save_hdf5(*arg2,(char const *)arg3,(char const *)arg4);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_save_hdf5__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  meep::fields *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:dft_flux_save_hdf5",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_save_hdf5" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__fields,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_flux_save_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_flux_save_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  arg2 = reinterpret_cast< meep::fields * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_flux_save_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->save_hdf5(*arg2,(char const *)arg3);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_save_hdf5(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_flux, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__h5file, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_dft_flux_save_hdf5__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_flux, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__h5file, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_dft_flux_save_hdf5__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_flux, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__fields, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_dft_flux_save_hdf5__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_flux, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__fields, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_dft_flux_save_hdf5__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_flux, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__fields, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_dft_flux_save_hdf5__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'dft_flux_save_hdf5'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::dft_flux::save_hdf5(meep::h5file *,char const *)\n"
    "    meep::dft_flux::save_hdf5(meep::h5file *)\n"
    "    meep::dft_flux::save_hdf5(meep::fields &,char const *,char const *,char const *)\n"
    "    meep::dft_flux::save_hdf5(meep::fields &,char const *,char const *)\n"
    "    meep::dft_flux::save_hdf5(meep::fields &,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_dft_flux_load_hdf5__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  meep::fields *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:dft_flux_load_hdf5",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_load_hdf5" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__fields,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_flux_load_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_flux_load_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  arg2 = reinterpret_cast< meep::fields * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_flux_load_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "dft_flux_load_hdf5" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "dft_flux_load_hdf5" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->load_hdf5(*arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_load_hdf5__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  meep::fields *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:dft_flux_load_hdf5",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_load_hdf5" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__fields,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_flux_load_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_flux_load_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  arg2 = reinterpret_cast< meep::fields * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_flux_load_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "dft_flux_load_hdf5" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->load_hdf5(*arg2,(char const *)arg3,(char const *)arg4);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_load_hdf5__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  meep::fields *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:dft_flux_load_hdf5",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_load_hdf5" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__fields,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_flux_load_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_flux_load_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  arg2 = reinterpret_cast< meep::fields * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_flux_load_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->load_hdf5(*arg2,(char const *)arg3);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_load_hdf5(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_flux, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__h5file, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_dft_flux_load_hdf5__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_flux, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__h5file, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_dft_flux_load_hdf5__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_flux, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__fields, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_dft_flux_load_hdf5__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_flux, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__fields, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_dft_flux_load_hdf5__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_flux, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__fields, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_dft_flux_load_hdf5__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'dft_flux_load_hdf5'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::dft_flux::load_hdf5(meep::h5file *,char const *)\n"
    "    meep::dft_flux::load_hdf5(meep::h5file *)\n"
    "    meep::dft_flux::load_hdf5(meep::fields &,char const *,char const *,char const *)\n"
    "    meep::dft_flux::load_hdf5(meep::fields &,char const *,char const *)\n"
    "    meep::dft_flux::load_hdf5(meep::fields &,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_dft_flux_scale_dfts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_flux_scale_dfts",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_scale_dfts" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_flux_scale_dfts" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  (arg1)->scale_dfts(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_flux_remove",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_remove" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  (arg1)->remove();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_freq_min_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_flux_freq_min_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_freq_min_set" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_flux_freq_min_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->freq_min = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_freq_min_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_flux_freq_min_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_freq_min_get" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  result = (double) ((arg1)->freq_min);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_dfreq_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_flux_dfreq_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_dfreq_set" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_flux_dfreq_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->dfreq = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_dfreq_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_flux_dfreq_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_dfreq_get" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  result = (double) ((arg1)->dfreq);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_Nfreq_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_flux_Nfreq_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_Nfreq_set" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_flux_Nfreq_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->Nfreq = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_Nfreq_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_flux_Nfreq_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_Nfreq_get" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  result = (int) ((arg1)->Nfreq);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_E_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  meep::dft_chunk *arg2 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_flux_E_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_E_set" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__dft_chunk, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_flux_E_set" "', argument " "2"" of type '" "meep::dft_chunk *""'"); 
  }
  arg2 = reinterpret_cast< meep::dft_chunk * >(argp2);
  if (arg1) (arg1)->E = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_E_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::dft_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_flux_E_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_E_get" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  result = (meep::dft_chunk *) ((arg1)->E);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_H_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  meep::dft_chunk *arg2 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_flux_H_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_H_set" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__dft_chunk, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_flux_H_set" "', argument " "2"" of type '" "meep::dft_chunk *""'"); 
  }
  arg2 = reinterpret_cast< meep::dft_chunk * >(argp2);
  if (arg1) (arg1)->H = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_H_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::dft_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_flux_H_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_H_get" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  result = (meep::dft_chunk *) ((arg1)->H);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_cE_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_flux_cE_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_cE_set" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  if (arg1) (arg1)->cE = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_cE_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::component result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_flux_cE_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_cE_get" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  result = (meep::component) ((arg1)->cE);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_cH_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_flux_cH_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_cH_set" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  if (arg1) (arg1)->cH = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_cH_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::component result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_flux_cH_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_cH_get" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  result = (meep::component) ((arg1)->cH);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_where_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  meep::volume *arg2 = (meep::volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_flux_where_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_where_set" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_flux_where_set" "', argument " "2"" of type '" "meep::volume *""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  if (arg1) (arg1)->where = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_where_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::volume *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_flux_where_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_where_get" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  result = (meep::volume *)& ((arg1)->where);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__volume, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_normal_direction_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  meep::direction arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_flux_normal_direction_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_normal_direction_set" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_flux_normal_direction_set" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  if (arg1) (arg1)->normal_direction = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_flux_normal_direction_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::direction result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_flux_normal_direction_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_flux_normal_direction_get" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  result = (meep::direction) ((arg1)->normal_direction);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_dft_flux(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_flux *arg1 = (meep::dft_flux *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_dft_flux",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_flux, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_dft_flux" "', argument " "1"" of type '" "meep::dft_flux *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_flux * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *dft_flux_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__dft_flux, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_dft_force__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  meep::dft_chunk *arg2 = (meep::dft_chunk *) 0 ;
  meep::dft_chunk *arg3 = (meep::dft_chunk *) 0 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  meep::volume *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  meep::dft_force *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_dft_force",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_dft_force" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_dft_force" "', argument " "2"" of type '" "meep::dft_chunk *""'"); 
  }
  arg2 = reinterpret_cast< meep::dft_chunk * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_dft_force" "', argument " "3"" of type '" "meep::dft_chunk *""'"); 
  }
  arg3 = reinterpret_cast< meep::dft_chunk * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_dft_force" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_dft_force" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_dft_force" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_dft_force" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dft_force" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  arg7 = reinterpret_cast< meep::volume * >(argp7);
  result = (meep::dft_force *)new meep::dft_force(arg1,arg2,arg3,arg4,arg5,arg6,(meep::volume const &)*arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_force, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_dft_force__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::dft_force *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_dft_force",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__dft_force,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_dft_force" "', argument " "1"" of type '" "meep::dft_force const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dft_force" "', argument " "1"" of type '" "meep::dft_force const &""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  result = (meep::dft_force *)new meep::dft_force((meep::dft_force const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_force, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_dft_force(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__dft_force, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_dft_force__SWIG_1(self, args);
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_chunk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__dft_chunk, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_meep__dft_chunk, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_meep__volume, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_dft_force__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_dft_force'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::dft_force::dft_force(meep::dft_chunk *,meep::dft_chunk *,meep::dft_chunk *,double,double,int,meep::volume const &)\n"
    "    meep::dft_force::dft_force(meep::dft_force const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_dft_force_force(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_force_force",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_force" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  result = (double *)(arg1)->force();
  {
    int size = arg1->Nfreq;
    resultobj = PyList_New(size);
    for(int i = 0; i < size; i++) {
      PyList_SetItem(resultobj, i, PyFloat_FromDouble(result[i]));
    }
    
    delete result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_save_hdf5__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  meep::h5file *arg2 = (meep::h5file *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:dft_force_save_hdf5",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_save_hdf5" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_force_save_hdf5" "', argument " "2"" of type '" "meep::h5file *""'"); 
  }
  arg2 = reinterpret_cast< meep::h5file * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_force_save_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->save_hdf5(arg2,(char const *)arg3);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_save_hdf5__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  meep::h5file *arg2 = (meep::h5file *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_force_save_hdf5",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_save_hdf5" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_force_save_hdf5" "', argument " "2"" of type '" "meep::h5file *""'"); 
  }
  arg2 = reinterpret_cast< meep::h5file * >(argp2);
  (arg1)->save_hdf5(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_load_hdf5__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  meep::h5file *arg2 = (meep::h5file *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:dft_force_load_hdf5",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_load_hdf5" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_force_load_hdf5" "', argument " "2"" of type '" "meep::h5file *""'"); 
  }
  arg2 = reinterpret_cast< meep::h5file * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_force_load_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->load_hdf5(arg2,(char const *)arg3);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_load_hdf5__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  meep::h5file *arg2 = (meep::h5file *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_force_load_hdf5",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_load_hdf5" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_force_load_hdf5" "', argument " "2"" of type '" "meep::h5file *""'"); 
  }
  arg2 = reinterpret_cast< meep::h5file * >(argp2);
  (arg1)->load_hdf5(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  meep::dft_force *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_force___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force___isub__" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__dft_force,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_force___isub__" "', argument " "2"" of type '" "meep::dft_force const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_force___isub__" "', argument " "2"" of type '" "meep::dft_force const &""'"); 
  }
  arg2 = reinterpret_cast< meep::dft_force * >(argp2);
  (arg1)->operator -=((meep::dft_force const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_save_hdf5__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  meep::fields *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:dft_force_save_hdf5",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_save_hdf5" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__fields,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_force_save_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_force_save_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  arg2 = reinterpret_cast< meep::fields * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_force_save_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "dft_force_save_hdf5" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "dft_force_save_hdf5" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->save_hdf5(*arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_save_hdf5__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  meep::fields *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:dft_force_save_hdf5",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_save_hdf5" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__fields,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_force_save_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_force_save_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  arg2 = reinterpret_cast< meep::fields * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_force_save_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "dft_force_save_hdf5" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->save_hdf5(*arg2,(char const *)arg3,(char const *)arg4);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_save_hdf5__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  meep::fields *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:dft_force_save_hdf5",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_save_hdf5" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__fields,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_force_save_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_force_save_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  arg2 = reinterpret_cast< meep::fields * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_force_save_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->save_hdf5(*arg2,(char const *)arg3);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_save_hdf5(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_force, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__h5file, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_dft_force_save_hdf5__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_force, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__h5file, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_dft_force_save_hdf5__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_force, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__fields, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_dft_force_save_hdf5__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_force, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__fields, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_dft_force_save_hdf5__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_force, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__fields, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_dft_force_save_hdf5__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'dft_force_save_hdf5'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::dft_force::save_hdf5(meep::h5file *,char const *)\n"
    "    meep::dft_force::save_hdf5(meep::h5file *)\n"
    "    meep::dft_force::save_hdf5(meep::fields &,char const *,char const *,char const *)\n"
    "    meep::dft_force::save_hdf5(meep::fields &,char const *,char const *)\n"
    "    meep::dft_force::save_hdf5(meep::fields &,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_dft_force_load_hdf5__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  meep::fields *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:dft_force_load_hdf5",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_load_hdf5" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__fields,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_force_load_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_force_load_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  arg2 = reinterpret_cast< meep::fields * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_force_load_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "dft_force_load_hdf5" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "dft_force_load_hdf5" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->load_hdf5(*arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_load_hdf5__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  meep::fields *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:dft_force_load_hdf5",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_load_hdf5" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__fields,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_force_load_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_force_load_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  arg2 = reinterpret_cast< meep::fields * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_force_load_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "dft_force_load_hdf5" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->load_hdf5(*arg2,(char const *)arg3,(char const *)arg4);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_load_hdf5__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  meep::fields *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:dft_force_load_hdf5",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_load_hdf5" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__fields,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_force_load_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_force_load_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  arg2 = reinterpret_cast< meep::fields * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_force_load_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->load_hdf5(*arg2,(char const *)arg3);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_load_hdf5(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_force, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__h5file, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_dft_force_load_hdf5__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_force, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__h5file, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_dft_force_load_hdf5__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_force, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__fields, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_dft_force_load_hdf5__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_force, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__fields, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_dft_force_load_hdf5__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_force, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__fields, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_dft_force_load_hdf5__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'dft_force_load_hdf5'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::dft_force::load_hdf5(meep::h5file *,char const *)\n"
    "    meep::dft_force::load_hdf5(meep::h5file *)\n"
    "    meep::dft_force::load_hdf5(meep::fields &,char const *,char const *,char const *)\n"
    "    meep::dft_force::load_hdf5(meep::fields &,char const *,char const *)\n"
    "    meep::dft_force::load_hdf5(meep::fields &,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_dft_force_scale_dfts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_force_scale_dfts",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_scale_dfts" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_force_scale_dfts" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  (arg1)->scale_dfts(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_force_remove",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_remove" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  (arg1)->remove();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_freq_min_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_force_freq_min_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_freq_min_set" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_force_freq_min_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->freq_min = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_freq_min_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_force_freq_min_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_freq_min_get" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  result = (double) ((arg1)->freq_min);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_dfreq_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_force_dfreq_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_dfreq_set" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_force_dfreq_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->dfreq = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_dfreq_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_force_dfreq_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_dfreq_get" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  result = (double) ((arg1)->dfreq);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_Nfreq_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_force_Nfreq_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_Nfreq_set" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_force_Nfreq_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->Nfreq = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_Nfreq_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_force_Nfreq_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_Nfreq_get" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  result = (int) ((arg1)->Nfreq);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_offdiag1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  meep::dft_chunk *arg2 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_force_offdiag1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_offdiag1_set" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__dft_chunk, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_force_offdiag1_set" "', argument " "2"" of type '" "meep::dft_chunk *""'"); 
  }
  arg2 = reinterpret_cast< meep::dft_chunk * >(argp2);
  if (arg1) (arg1)->offdiag1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_offdiag1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::dft_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_force_offdiag1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_offdiag1_get" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  result = (meep::dft_chunk *) ((arg1)->offdiag1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_offdiag2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  meep::dft_chunk *arg2 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_force_offdiag2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_offdiag2_set" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__dft_chunk, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_force_offdiag2_set" "', argument " "2"" of type '" "meep::dft_chunk *""'"); 
  }
  arg2 = reinterpret_cast< meep::dft_chunk * >(argp2);
  if (arg1) (arg1)->offdiag2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_offdiag2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::dft_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_force_offdiag2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_offdiag2_get" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  result = (meep::dft_chunk *) ((arg1)->offdiag2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_diag_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  meep::dft_chunk *arg2 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_force_diag_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_diag_set" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__dft_chunk, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_force_diag_set" "', argument " "2"" of type '" "meep::dft_chunk *""'"); 
  }
  arg2 = reinterpret_cast< meep::dft_chunk * >(argp2);
  if (arg1) (arg1)->diag = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_diag_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::dft_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_force_diag_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_diag_get" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  result = (meep::dft_chunk *) ((arg1)->diag);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_where_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  meep::volume *arg2 = (meep::volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_force_where_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_where_set" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_force_where_set" "', argument " "2"" of type '" "meep::volume *""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  if (arg1) (arg1)->where = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_force_where_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::volume *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_force_where_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_force_where_get" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  result = (meep::volume *)& ((arg1)->where);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__volume, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_dft_force(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_force *arg1 = (meep::dft_force *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_dft_force",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_force, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_dft_force" "', argument " "1"" of type '" "meep::dft_force *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_force * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *dft_force_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__dft_force, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_dft_near2far__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  double arg2 ;
  double arg3 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  meep::volume *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  meep::dft_near2far *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_dft_near2far",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_dft_near2far" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_dft_near2far" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_dft_near2far" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_dft_near2far" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_dft_near2far" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_dft_near2far" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_dft_near2far" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dft_near2far" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  arg7 = reinterpret_cast< meep::volume * >(argp7);
  result = (meep::dft_near2far *)new meep::dft_near2far(arg1,arg2,arg3,arg4,arg5,arg6,(meep::volume const &)*arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_near2far, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_dft_near2far__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::dft_near2far *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_dft_near2far",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__dft_near2far,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_dft_near2far" "', argument " "1"" of type '" "meep::dft_near2far const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dft_near2far" "', argument " "1"" of type '" "meep::dft_near2far const &""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  result = (meep::dft_near2far *)new meep::dft_near2far((meep::dft_near2far const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_near2far, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_dft_near2far(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__dft_near2far, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_dft_near2far__SWIG_1(self, args);
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_chunk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_meep__volume, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_dft_near2far__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_dft_near2far'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::dft_near2far::dft_near2far(meep::dft_chunk *,double,double,int,double,double,meep::volume const &)\n"
    "    meep::dft_near2far::dft_near2far(meep::dft_near2far const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_dft_near2far_farfield(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_near2far_farfield",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_farfield" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_near2far_farfield" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_near2far_farfield" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = (std::complex< double > *)(arg1)->farfield((meep::vec const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_farfield_lowlevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  meep::vec *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:dft_near2far_farfield_lowlevel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_farfield_lowlevel" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_near2far_farfield_lowlevel" "', argument " "2"" of type '" "std::complex< double > *""'"); 
  }
  arg2 = reinterpret_cast< std::complex< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_near2far_farfield_lowlevel" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_near2far_farfield_lowlevel" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  arg3 = reinterpret_cast< meep::vec * >(argp3);
  (arg1)->farfield_lowlevel(arg2,(meep::vec const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_save_farfields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  meep::volume *arg4 = 0 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:dft_near2far_save_farfields",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_save_farfields" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_near2far_save_farfields" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_near2far_save_farfields" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "dft_near2far_save_farfields" "', argument " "4"" of type '" "meep::volume const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_near2far_save_farfields" "', argument " "4"" of type '" "meep::volume const &""'"); 
  }
  arg4 = reinterpret_cast< meep::volume * >(argp4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "dft_near2far_save_farfields" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->save_farfields((char const *)arg2,(char const *)arg3,(meep::volume const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_save_hdf5__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  meep::h5file *arg2 = (meep::h5file *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:dft_near2far_save_hdf5",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_save_hdf5" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_near2far_save_hdf5" "', argument " "2"" of type '" "meep::h5file *""'"); 
  }
  arg2 = reinterpret_cast< meep::h5file * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_near2far_save_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->save_hdf5(arg2,(char const *)arg3);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_save_hdf5__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  meep::h5file *arg2 = (meep::h5file *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_near2far_save_hdf5",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_save_hdf5" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_near2far_save_hdf5" "', argument " "2"" of type '" "meep::h5file *""'"); 
  }
  arg2 = reinterpret_cast< meep::h5file * >(argp2);
  (arg1)->save_hdf5(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_load_hdf5__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  meep::h5file *arg2 = (meep::h5file *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:dft_near2far_load_hdf5",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_load_hdf5" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_near2far_load_hdf5" "', argument " "2"" of type '" "meep::h5file *""'"); 
  }
  arg2 = reinterpret_cast< meep::h5file * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_near2far_load_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->load_hdf5(arg2,(char const *)arg3);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_load_hdf5__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  meep::h5file *arg2 = (meep::h5file *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_near2far_load_hdf5",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_load_hdf5" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_near2far_load_hdf5" "', argument " "2"" of type '" "meep::h5file *""'"); 
  }
  arg2 = reinterpret_cast< meep::h5file * >(argp2);
  (arg1)->load_hdf5(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  meep::dft_near2far *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_near2far___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far___isub__" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__dft_near2far,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_near2far___isub__" "', argument " "2"" of type '" "meep::dft_near2far const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_near2far___isub__" "', argument " "2"" of type '" "meep::dft_near2far const &""'"); 
  }
  arg2 = reinterpret_cast< meep::dft_near2far * >(argp2);
  (arg1)->operator -=((meep::dft_near2far const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_save_hdf5__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  meep::fields *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:dft_near2far_save_hdf5",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_save_hdf5" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__fields,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_near2far_save_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_near2far_save_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  arg2 = reinterpret_cast< meep::fields * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_near2far_save_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "dft_near2far_save_hdf5" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "dft_near2far_save_hdf5" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->save_hdf5(*arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_save_hdf5__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  meep::fields *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:dft_near2far_save_hdf5",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_save_hdf5" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__fields,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_near2far_save_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_near2far_save_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  arg2 = reinterpret_cast< meep::fields * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_near2far_save_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "dft_near2far_save_hdf5" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->save_hdf5(*arg2,(char const *)arg3,(char const *)arg4);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_save_hdf5__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  meep::fields *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:dft_near2far_save_hdf5",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_save_hdf5" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__fields,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_near2far_save_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_near2far_save_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  arg2 = reinterpret_cast< meep::fields * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_near2far_save_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->save_hdf5(*arg2,(char const *)arg3);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_save_hdf5(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_near2far, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__h5file, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_dft_near2far_save_hdf5__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_near2far, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__h5file, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_dft_near2far_save_hdf5__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_near2far, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__fields, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_dft_near2far_save_hdf5__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_near2far, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__fields, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_dft_near2far_save_hdf5__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_near2far, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__fields, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_dft_near2far_save_hdf5__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'dft_near2far_save_hdf5'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::dft_near2far::save_hdf5(meep::h5file *,char const *)\n"
    "    meep::dft_near2far::save_hdf5(meep::h5file *)\n"
    "    meep::dft_near2far::save_hdf5(meep::fields &,char const *,char const *,char const *)\n"
    "    meep::dft_near2far::save_hdf5(meep::fields &,char const *,char const *)\n"
    "    meep::dft_near2far::save_hdf5(meep::fields &,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_dft_near2far_load_hdf5__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  meep::fields *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:dft_near2far_load_hdf5",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_load_hdf5" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__fields,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_near2far_load_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_near2far_load_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  arg2 = reinterpret_cast< meep::fields * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_near2far_load_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "dft_near2far_load_hdf5" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "dft_near2far_load_hdf5" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->load_hdf5(*arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_load_hdf5__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  meep::fields *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:dft_near2far_load_hdf5",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_load_hdf5" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__fields,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_near2far_load_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_near2far_load_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  arg2 = reinterpret_cast< meep::fields * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_near2far_load_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "dft_near2far_load_hdf5" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->load_hdf5(*arg2,(char const *)arg3,(char const *)arg4);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_load_hdf5__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  meep::fields *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:dft_near2far_load_hdf5",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_load_hdf5" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__fields,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_near2far_load_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_near2far_load_hdf5" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  arg2 = reinterpret_cast< meep::fields * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dft_near2far_load_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->load_hdf5(*arg2,(char const *)arg3);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_load_hdf5(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_near2far, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__h5file, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_dft_near2far_load_hdf5__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_near2far, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__h5file, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_dft_near2far_load_hdf5__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_near2far, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__fields, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_dft_near2far_load_hdf5__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_near2far, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__fields, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_dft_near2far_load_hdf5__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__dft_near2far, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__fields, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_dft_near2far_load_hdf5__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'dft_near2far_load_hdf5'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::dft_near2far::load_hdf5(meep::h5file *,char const *)\n"
    "    meep::dft_near2far::load_hdf5(meep::h5file *)\n"
    "    meep::dft_near2far::load_hdf5(meep::fields &,char const *,char const *,char const *)\n"
    "    meep::dft_near2far::load_hdf5(meep::fields &,char const *,char const *)\n"
    "    meep::dft_near2far::load_hdf5(meep::fields &,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_dft_near2far_scale_dfts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_near2far_scale_dfts",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_scale_dfts" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_near2far_scale_dfts" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  (arg1)->scale_dfts(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_near2far_remove",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_remove" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  (arg1)->remove();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_freq_min_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_near2far_freq_min_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_freq_min_set" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_near2far_freq_min_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->freq_min = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_freq_min_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_near2far_freq_min_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_freq_min_get" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  result = (double) ((arg1)->freq_min);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_dfreq_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_near2far_dfreq_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_dfreq_set" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_near2far_dfreq_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->dfreq = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_dfreq_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_near2far_dfreq_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_dfreq_get" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  result = (double) ((arg1)->dfreq);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_Nfreq_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_near2far_Nfreq_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_Nfreq_set" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_near2far_Nfreq_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->Nfreq = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_Nfreq_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_near2far_Nfreq_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_Nfreq_get" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  result = (int) ((arg1)->Nfreq);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_F_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  meep::dft_chunk *arg2 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_near2far_F_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_F_set" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__dft_chunk, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_near2far_F_set" "', argument " "2"" of type '" "meep::dft_chunk *""'"); 
  }
  arg2 = reinterpret_cast< meep::dft_chunk * >(argp2);
  if (arg1) (arg1)->F = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_F_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::dft_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_near2far_F_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_F_get" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  result = (meep::dft_chunk *) ((arg1)->F);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_eps_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_near2far_eps_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_eps_set" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_near2far_eps_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->eps = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_eps_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_near2far_eps_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_eps_get" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  result = (double) ((arg1)->eps);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_mu_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_near2far_mu_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_mu_set" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_near2far_mu_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->mu = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_mu_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_near2far_mu_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_mu_get" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  result = (double) ((arg1)->mu);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_where_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  meep::volume *arg2 = (meep::volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_near2far_where_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_where_set" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_near2far_where_set" "', argument " "2"" of type '" "meep::volume *""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  if (arg1) (arg1)->where = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_near2far_where_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::volume *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_near2far_where_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_near2far_where_get" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  result = (meep::volume *)& ((arg1)->where);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__volume, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_dft_near2far(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_near2far *arg1 = (meep::dft_near2far *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_dft_near2far",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_near2far, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_dft_near2far" "', argument " "1"" of type '" "meep::dft_near2far *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_near2far * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *dft_near2far_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__dft_near2far, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new__dft_ldos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  int arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::dft_ldos *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new__dft_ldos",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new__dft_ldos" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new__dft_ldos" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new__dft_ldos" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (meep::dft_ldos *)new meep::dft_ldos(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_ldos, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_dft_ldos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_ldos *arg1 = (meep::dft_ldos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_dft_ldos",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_ldos, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_dft_ldos" "', argument " "1"" of type '" "meep::dft_ldos *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_ldos * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_ldos_update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_ldos *arg1 = (meep::dft_ldos *) 0 ;
  meep::fields *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_ldos_update",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_ldos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_ldos_update" "', argument " "1"" of type '" "meep::dft_ldos *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_ldos * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__fields,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_ldos_update" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dft_ldos_update" "', argument " "2"" of type '" "meep::fields &""'"); 
  }
  arg2 = reinterpret_cast< meep::fields * >(argp2);
  (arg1)->update(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_ldos_ldos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_ldos *arg1 = (meep::dft_ldos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_ldos_ldos",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_ldos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_ldos_ldos" "', argument " "1"" of type '" "meep::dft_ldos const *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_ldos * >(argp1);
  result = (double *)((meep::dft_ldos const *)arg1)->ldos();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_ldos_F(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_ldos *arg1 = (meep::dft_ldos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_ldos_F",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_ldos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_ldos_F" "', argument " "1"" of type '" "meep::dft_ldos const *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_ldos * >(argp1);
  result = (std::complex< double > *)((meep::dft_ldos const *)arg1)->F();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_ldos_J(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_ldos *arg1 = (meep::dft_ldos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_ldos_J",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_ldos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_ldos_J" "', argument " "1"" of type '" "meep::dft_ldos const *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_ldos * >(argp1);
  result = (std::complex< double > *)((meep::dft_ldos const *)arg1)->J();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_ldos_omega_min_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_ldos *arg1 = (meep::dft_ldos *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_ldos_omega_min_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_ldos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_ldos_omega_min_set" "', argument " "1"" of type '" "meep::dft_ldos *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_ldos * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_ldos_omega_min_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->omega_min = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_ldos_omega_min_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_ldos *arg1 = (meep::dft_ldos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_ldos_omega_min_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_ldos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_ldos_omega_min_get" "', argument " "1"" of type '" "meep::dft_ldos *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_ldos * >(argp1);
  result = (double) ((arg1)->omega_min);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_ldos_domega_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_ldos *arg1 = (meep::dft_ldos *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_ldos_domega_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_ldos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_ldos_domega_set" "', argument " "1"" of type '" "meep::dft_ldos *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_ldos * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_ldos_domega_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->domega = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_ldos_domega_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_ldos *arg1 = (meep::dft_ldos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_ldos_domega_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_ldos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_ldos_domega_get" "', argument " "1"" of type '" "meep::dft_ldos *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_ldos * >(argp1);
  result = (double) ((arg1)->domega);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_ldos_Nomega_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_ldos *arg1 = (meep::dft_ldos *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_ldos_Nomega_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_ldos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_ldos_Nomega_set" "', argument " "1"" of type '" "meep::dft_ldos *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_ldos * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_ldos_Nomega_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->Nomega = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_ldos_Nomega_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_ldos *arg1 = (meep::dft_ldos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_ldos_Nomega_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_ldos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_ldos_Nomega_get" "', argument " "1"" of type '" "meep::dft_ldos *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_ldos * >(argp1);
  result = (int) ((arg1)->Nomega);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *dft_ldos_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__dft_ldos, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_dft_fields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_chunk *arg1 = (meep::dft_chunk *) 0 ;
  double arg2 ;
  double arg3 ;
  int arg4 ;
  meep::volume *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  meep::dft_fields *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_dft_fields",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_dft_fields" "', argument " "1"" of type '" "meep::dft_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_chunk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_dft_fields" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_dft_fields" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_dft_fields" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_dft_fields" "', argument " "5"" of type '" "meep::volume const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dft_fields" "', argument " "5"" of type '" "meep::volume const &""'"); 
  }
  arg5 = reinterpret_cast< meep::volume * >(argp5);
  result = (meep::dft_fields *)new meep::dft_fields(arg1,arg2,arg3,arg4,(meep::volume const &)*arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_fields, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_fields_scale_dfts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_fields *arg1 = (meep::dft_fields *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_fields_scale_dfts",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_fields_scale_dfts" "', argument " "1"" of type '" "meep::dft_fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_fields * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_fields_scale_dfts" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  (arg1)->scale_dfts(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_fields_remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_fields *arg1 = (meep::dft_fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_fields_remove",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_fields_remove" "', argument " "1"" of type '" "meep::dft_fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_fields * >(argp1);
  (arg1)->remove();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_fields_freq_min_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_fields *arg1 = (meep::dft_fields *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_fields_freq_min_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_fields_freq_min_set" "', argument " "1"" of type '" "meep::dft_fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_fields * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_fields_freq_min_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->freq_min = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_fields_freq_min_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_fields *arg1 = (meep::dft_fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_fields_freq_min_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_fields_freq_min_get" "', argument " "1"" of type '" "meep::dft_fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_fields * >(argp1);
  result = (double) ((arg1)->freq_min);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_fields_dfreq_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_fields *arg1 = (meep::dft_fields *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_fields_dfreq_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_fields_dfreq_set" "', argument " "1"" of type '" "meep::dft_fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_fields * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_fields_dfreq_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->dfreq = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_fields_dfreq_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_fields *arg1 = (meep::dft_fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_fields_dfreq_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_fields_dfreq_get" "', argument " "1"" of type '" "meep::dft_fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_fields * >(argp1);
  result = (double) ((arg1)->dfreq);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_fields_Nfreq_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_fields *arg1 = (meep::dft_fields *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_fields_Nfreq_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_fields_Nfreq_set" "', argument " "1"" of type '" "meep::dft_fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_fields_Nfreq_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->Nfreq = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_fields_Nfreq_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_fields *arg1 = (meep::dft_fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_fields_Nfreq_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_fields_Nfreq_get" "', argument " "1"" of type '" "meep::dft_fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_fields * >(argp1);
  result = (int) ((arg1)->Nfreq);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_fields_chunks_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_fields *arg1 = (meep::dft_fields *) 0 ;
  meep::dft_chunk *arg2 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_fields_chunks_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_fields_chunks_set" "', argument " "1"" of type '" "meep::dft_fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__dft_chunk, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_fields_chunks_set" "', argument " "2"" of type '" "meep::dft_chunk *""'"); 
  }
  arg2 = reinterpret_cast< meep::dft_chunk * >(argp2);
  if (arg1) (arg1)->chunks = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_fields_chunks_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_fields *arg1 = (meep::dft_fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::dft_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_fields_chunks_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_fields_chunks_get" "', argument " "1"" of type '" "meep::dft_fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_fields * >(argp1);
  result = (meep::dft_chunk *) ((arg1)->chunks);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_fields_where_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_fields *arg1 = (meep::dft_fields *) 0 ;
  meep::volume *arg2 = (meep::volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_fields_where_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_fields_where_set" "', argument " "1"" of type '" "meep::dft_fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_fields_where_set" "', argument " "2"" of type '" "meep::volume *""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  if (arg1) (arg1)->where = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_fields_where_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_fields *arg1 = (meep::dft_fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::volume *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_fields_where_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_fields_where_get" "', argument " "1"" of type '" "meep::dft_fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_fields * >(argp1);
  result = (meep::volume *)& ((arg1)->where);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__volume, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_dft_fields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::dft_fields *arg1 = (meep::dft_fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_dft_fields",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__dft_fields, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_dft_fields" "', argument " "1"" of type '" "meep::dft_fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::dft_fields * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *dft_fields_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__dft_fields, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_polarization_state_data_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::polarization_state_s *arg1 = (meep::polarization_state_s *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:polarization_state_data_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__polarization_state_s, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "polarization_state_data_set" "', argument " "1"" of type '" "meep::polarization_state_s *""'"); 
  }
  arg1 = reinterpret_cast< meep::polarization_state_s * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "polarization_state_data_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->data = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_polarization_state_data_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::polarization_state_s *arg1 = (meep::polarization_state_s *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:polarization_state_data_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__polarization_state_s, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "polarization_state_data_get" "', argument " "1"" of type '" "meep::polarization_state_s *""'"); 
  }
  arg1 = reinterpret_cast< meep::polarization_state_s * >(argp1);
  result = (void *) ((arg1)->data);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_polarization_state_s_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::polarization_state_s *arg1 = (meep::polarization_state_s *) 0 ;
  meep::susceptibility *arg2 = (meep::susceptibility *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:polarization_state_s_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__polarization_state_s, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "polarization_state_s_set" "', argument " "1"" of type '" "meep::polarization_state_s *""'"); 
  }
  arg1 = reinterpret_cast< meep::polarization_state_s * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__susceptibility, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "polarization_state_s_set" "', argument " "2"" of type '" "meep::susceptibility const *""'"); 
  }
  arg2 = reinterpret_cast< meep::susceptibility * >(argp2);
  if (arg1) (arg1)->s = (meep::susceptibility const *)arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_polarization_state_s_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::polarization_state_s *arg1 = (meep::polarization_state_s *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::susceptibility *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:polarization_state_s_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__polarization_state_s, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "polarization_state_s_get" "', argument " "1"" of type '" "meep::polarization_state_s *""'"); 
  }
  arg1 = reinterpret_cast< meep::polarization_state_s * >(argp1);
  result = (meep::susceptibility *) ((arg1)->s);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__susceptibility, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_polarization_state_next_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::polarization_state_s *arg1 = (meep::polarization_state_s *) 0 ;
  meep::polarization_state_s *arg2 = (meep::polarization_state_s *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:polarization_state_next_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__polarization_state_s, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "polarization_state_next_set" "', argument " "1"" of type '" "meep::polarization_state_s *""'"); 
  }
  arg1 = reinterpret_cast< meep::polarization_state_s * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__polarization_state_s, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "polarization_state_next_set" "', argument " "2"" of type '" "meep::polarization_state_s *""'"); 
  }
  arg2 = reinterpret_cast< meep::polarization_state_s * >(argp2);
  if (arg1) (arg1)->next = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_polarization_state_next_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::polarization_state_s *arg1 = (meep::polarization_state_s *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::polarization_state_s *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:polarization_state_next_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__polarization_state_s, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "polarization_state_next_get" "', argument " "1"" of type '" "meep::polarization_state_s *""'"); 
  }
  arg1 = reinterpret_cast< meep::polarization_state_s * >(argp1);
  result = (meep::polarization_state_s *) ((arg1)->next);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__polarization_state_s, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_polarization_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::polarization_state_s *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_polarization_state")) SWIG_fail;
  result = (meep::polarization_state_s *)new meep::polarization_state_s();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__polarization_state_s, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_polarization_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::polarization_state_s *arg1 = (meep::polarization_state_s *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_polarization_state",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__polarization_state_s, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_polarization_state" "', argument " "1"" of type '" "meep::polarization_state_s *""'"); 
  }
  arg1 = reinterpret_cast< meep::polarization_state_s * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *polarization_state_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__polarization_state_s, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_fields_chunk_f_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::realnum *(*arg2)[2] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_f_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_f_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_chunk_f_set" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *(*)[2] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_COMPONENTS; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)2; ++jj) arg1->f[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""f""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""f""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_f_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::realnum *(*result)[2] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_f_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_f_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (meep::realnum *(*)[2])(meep::realnum *(*)[2]) ((arg1)->f);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_2__p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_f_u_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::realnum *(*arg2)[2] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_f_u_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_f_u_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_chunk_f_u_set" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *(*)[2] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_COMPONENTS; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)2; ++jj) arg1->f_u[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""f_u""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""f_u""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_f_u_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::realnum *(*result)[2] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_f_u_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_f_u_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (meep::realnum *(*)[2])(meep::realnum *(*)[2]) ((arg1)->f_u);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_2__p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_f_w_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::realnum *(*arg2)[2] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_f_w_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_f_w_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_chunk_f_w_set" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *(*)[2] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_COMPONENTS; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)2; ++jj) arg1->f_w[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""f_w""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""f_w""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_f_w_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::realnum *(*result)[2] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_f_w_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_f_w_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (meep::realnum *(*)[2])(meep::realnum *(*)[2]) ((arg1)->f_w);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_2__p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_f_cond_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::realnum *(*arg2)[2] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_f_cond_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_f_cond_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_chunk_f_cond_set" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *(*)[2] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_COMPONENTS; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)2; ++jj) arg1->f_cond[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""f_cond""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""f_cond""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_f_cond_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::realnum *(*result)[2] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_f_cond_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_f_cond_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (meep::realnum *(*)[2])(meep::realnum *(*)[2]) ((arg1)->f_cond);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_2__p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_f_backup_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::realnum *(*arg2)[2] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_f_backup_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_f_backup_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_chunk_f_backup_set" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *(*)[2] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_COMPONENTS; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)2; ++jj) arg1->f_backup[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""f_backup""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""f_backup""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_f_backup_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::realnum *(*result)[2] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_f_backup_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_f_backup_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (meep::realnum *(*)[2])(meep::realnum *(*)[2]) ((arg1)->f_backup);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_2__p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_f_u_backup_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::realnum *(*arg2)[2] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_f_u_backup_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_f_u_backup_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_chunk_f_u_backup_set" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *(*)[2] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_COMPONENTS; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)2; ++jj) arg1->f_u_backup[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""f_u_backup""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""f_u_backup""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_f_u_backup_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::realnum *(*result)[2] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_f_u_backup_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_f_u_backup_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (meep::realnum *(*)[2])(meep::realnum *(*)[2]) ((arg1)->f_u_backup);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_2__p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_f_w_backup_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::realnum *(*arg2)[2] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_f_w_backup_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_f_w_backup_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_chunk_f_w_backup_set" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *(*)[2] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_COMPONENTS; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)2; ++jj) arg1->f_w_backup[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""f_w_backup""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""f_w_backup""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_f_w_backup_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::realnum *(*result)[2] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_f_w_backup_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_f_w_backup_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (meep::realnum *(*)[2])(meep::realnum *(*)[2]) ((arg1)->f_w_backup);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_2__p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_f_cond_backup_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::realnum *(*arg2)[2] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_f_cond_backup_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_f_cond_backup_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_chunk_f_cond_backup_set" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *(*)[2] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_COMPONENTS; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)2; ++jj) arg1->f_cond_backup[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""f_cond_backup""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""f_cond_backup""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_f_cond_backup_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::realnum *(*result)[2] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_f_cond_backup_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_f_cond_backup_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (meep::realnum *(*)[2])(meep::realnum *(*)[2]) ((arg1)->f_cond_backup);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_2__p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_f_w_prev_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::realnum *(*arg2)[2] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_f_w_prev_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_f_w_prev_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_chunk_f_w_prev_set" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *(*)[2] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_COMPONENTS; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)2; ++jj) arg1->f_w_prev[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""f_w_prev""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""f_w_prev""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_f_w_prev_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::realnum *(*result)[2] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_f_w_prev_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_f_w_prev_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (meep::realnum *(*)[2])(meep::realnum *(*)[2]) ((arg1)->f_w_prev);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_2__p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_f_minus_p_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::realnum *(*arg2)[2] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_f_minus_p_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_f_minus_p_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_2__p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_chunk_f_minus_p_set" "', argument " "2"" of type '" "meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *(*)[2] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_COMPONENTS; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)2; ++jj) arg1->f_minus_p[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""f_minus_p""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""f_minus_p""' of type '""meep::realnum *[meep::NUM_FIELD_COMPONENTS][2]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_f_minus_p_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::realnum *(*result)[2] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_f_minus_p_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_f_minus_p_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (meep::realnum *(*)[2])(meep::realnum *(*)[2]) ((arg1)->f_minus_p);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_2__p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_f_rderiv_int_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::realnum *arg2 = (meep::realnum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_f_rderiv_int_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_f_rderiv_int_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_chunk_f_rderiv_int_set" "', argument " "2"" of type '" "meep::realnum *""'"); 
  }
  arg2 = reinterpret_cast< meep::realnum * >(argp2);
  if (arg1) (arg1)->f_rderiv_int = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_f_rderiv_int_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::realnum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_f_rderiv_int_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_f_rderiv_int_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (meep::realnum *) ((arg1)->f_rderiv_int);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_dft_chunks_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::dft_chunk *arg2 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_dft_chunks_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_dft_chunks_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__dft_chunk, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_chunk_dft_chunks_set" "', argument " "2"" of type '" "meep::dft_chunk *""'"); 
  }
  arg2 = reinterpret_cast< meep::dft_chunk * >(argp2);
  if (arg1) (arg1)->dft_chunks = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_dft_chunks_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::dft_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_dft_chunks_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_dft_chunks_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (meep::dft_chunk *) ((arg1)->dft_chunks);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_zeroes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::realnum ***arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_zeroes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_zeroes_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_chunk_zeroes_set" "', argument " "2"" of type '" "meep::realnum **[meep::NUM_FIELD_TYPES]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *** >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_TYPES; ++ii) *(meep::realnum ** *)&arg1->zeroes[ii] = *((meep::realnum ** *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""zeroes""' of type '""meep::realnum **[meep::NUM_FIELD_TYPES]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_zeroes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::realnum ***result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_zeroes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_zeroes_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (meep::realnum ***)(meep::realnum ***) ((arg1)->zeroes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_num_zeroes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  size_t *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_num_zeroes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_num_zeroes_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_chunk_num_zeroes_set" "', argument " "2"" of type '" "size_t [meep::NUM_FIELD_TYPES]""'"); 
  } 
  arg2 = reinterpret_cast< size_t * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_TYPES; ++ii) *(size_t *)&arg1->num_zeroes[ii] = *((size_t *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""num_zeroes""' of type '""size_t [meep::NUM_FIELD_TYPES]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_num_zeroes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_num_zeroes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_num_zeroes_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (size_t *)(size_t *) ((arg1)->num_zeroes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_size_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_connections_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::realnum **(*result)[meep::CONNECT_COPY+1][meep::Outgoing+1] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_connections_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_connections_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (meep::realnum **(*)[meep::CONNECT_COPY+1][meep::Outgoing+1])(meep::realnum **(*)[meep::CONNECT_COPY+1][meep::Outgoing+1]) ((arg1)->connections);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_meep__CONNECT_COPY_1__a_meep__Outgoing_1__p_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_num_connections_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t (*result)[meep::CONNECT_COPY+1][meep::Outgoing+1] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_num_connections_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_num_connections_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (size_t (*)[meep::CONNECT_COPY+1][meep::Outgoing+1])(size_t (*)[meep::CONNECT_COPY+1][meep::Outgoing+1]) ((arg1)->num_connections);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_meep__CONNECT_COPY_1__a_meep__Outgoing_1__size_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_connection_phases_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  std::complex< meep::realnum > **arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_connection_phases_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_connection_phases_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_chunk_connection_phases_set" "', argument " "2"" of type '" "std::complex< meep::realnum > *[meep::NUM_FIELD_TYPES]""'"); 
  } 
  arg2 = reinterpret_cast< std::complex< meep::realnum > ** >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_TYPES; ++ii) *(std::complex< meep::realnum > * *)&arg1->connection_phases[ii] = *((std::complex< meep::realnum > * *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""connection_phases""' of type '""std::complex< meep::realnum > *[meep::NUM_FIELD_TYPES]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_connection_phases_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< meep::realnum > **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_connection_phases_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_connection_phases_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (std::complex< meep::realnum > **)(std::complex< meep::realnum > **) ((arg1)->connection_phases);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_npol_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  int *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_npol_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_npol_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_chunk_npol_set" "', argument " "2"" of type '" "int [meep::NUM_FIELD_TYPES]""'"); 
  } 
  arg2 = reinterpret_cast< int * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_TYPES; ++ii) *(int *)&arg1->npol[ii] = *((int *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""npol""' of type '""int [meep::NUM_FIELD_TYPES]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_npol_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_npol_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_npol_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (int *)(int *) ((arg1)->npol);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_pol_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::polarization_state **arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_pol_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_pol_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_meep__polarization_state_s, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_chunk_pol_set" "', argument " "2"" of type '" "meep::polarization_state *[meep::NUM_FIELD_TYPES]""'"); 
  } 
  arg2 = reinterpret_cast< meep::polarization_state ** >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_TYPES; ++ii) *(meep::polarization_state * *)&arg1->pol[ii] = *((meep::polarization_state * *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""pol""' of type '""meep::polarization_state *[meep::NUM_FIELD_TYPES]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_pol_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::polarization_state **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_pol_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_pol_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (meep::polarization_state **)(meep::polarization_state **) ((arg1)->pol);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_meep__polarization_state_s, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_a_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_a_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_a_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_chunk_a_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->a = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_a_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_a_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_a_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (double) ((arg1)->a);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_Courant_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_Courant_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_Courant_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_chunk_Courant_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->Courant = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_Courant_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_Courant_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_Courant_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (double) ((arg1)->Courant);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_dt_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_dt_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_dt_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_chunk_dt_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->dt = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_dt_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_dt_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_dt_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (double) ((arg1)->dt);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_gv_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::grid_volume *arg2 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_gv_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_gv_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_chunk_gv_set" "', argument " "2"" of type '" "meep::grid_volume *""'"); 
  }
  arg2 = reinterpret_cast< meep::grid_volume * >(argp2);
  if (arg1) (arg1)->gv = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_gv_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::grid_volume *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_gv_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_gv_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (meep::grid_volume *)& ((arg1)->gv);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_v_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::volume *arg2 = (meep::volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_v_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_v_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_chunk_v_set" "', argument " "2"" of type '" "meep::volume *""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  if (arg1) (arg1)->v = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_v_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::volume *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_v_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_v_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (meep::volume *)& ((arg1)->v);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__volume, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_m_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_m_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_m_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_chunk_m_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->m = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_m_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_m_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_m_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (double) ((arg1)->m);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_zero_fields_near_cylorigin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_zero_fields_near_cylorigin_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_zero_fields_near_cylorigin_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_chunk_zero_fields_near_cylorigin_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->zero_fields_near_cylorigin = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_zero_fields_near_cylorigin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_zero_fields_near_cylorigin_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_zero_fields_near_cylorigin_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (bool) ((arg1)->zero_fields_near_cylorigin);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_beta_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_beta_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_beta_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_chunk_beta_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->beta = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_beta_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_beta_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_beta_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (double) ((arg1)->beta);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_is_real_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_is_real_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_is_real_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_chunk_is_real_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->is_real = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_is_real_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_is_real_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_is_real_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (int) ((arg1)->is_real);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_sources_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::src_vol **arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_sources_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_sources_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_meep__src_vol, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_chunk_sources_set" "', argument " "2"" of type '" "meep::src_vol *[meep::NUM_FIELD_TYPES]""'"); 
  } 
  arg2 = reinterpret_cast< meep::src_vol ** >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_TYPES; ++ii) *(meep::src_vol * *)&arg1->sources[ii] = *((meep::src_vol * *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""sources""' of type '""meep::src_vol *[meep::NUM_FIELD_TYPES]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_sources_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::src_vol **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_sources_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_sources_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (meep::src_vol **)(meep::src_vol **) ((arg1)->sources);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_meep__src_vol, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_new_s_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::structure_chunk *arg2 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_new_s_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_new_s_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__structure_chunk, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_chunk_new_s_set" "', argument " "2"" of type '" "meep::structure_chunk *""'"); 
  }
  arg2 = reinterpret_cast< meep::structure_chunk * >(argp2);
  if (arg1) (arg1)->new_s = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_new_s_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::structure_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_new_s_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_new_s_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (meep::structure_chunk *) ((arg1)->new_s);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_s_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::structure_chunk *arg2 = (meep::structure_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_s_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_s_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__structure_chunk, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_chunk_s_set" "', argument " "2"" of type '" "meep::structure_chunk *""'"); 
  }
  arg2 = reinterpret_cast< meep::structure_chunk * >(argp2);
  if (arg1) (arg1)->s = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_s_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::structure_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_s_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_s_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (meep::structure_chunk *) ((arg1)->s);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_outdir_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_outdir_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_outdir_set" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_chunk_outdir_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->outdir = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
  } else {
    arg1->outdir = 0;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_outdir_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_outdir_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_outdir_get" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (char *) ((arg1)->outdir);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fields_chunk__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure_chunk *arg1 = (meep::structure_chunk *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  meep::fields_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_fields_chunk",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_fields_chunk" "', argument " "1"" of type '" "meep::structure_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure_chunk * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_fields_chunk" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_fields_chunk" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_fields_chunk" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_fields_chunk" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (meep::fields_chunk *)new meep::fields_chunk(arg1,(char const *)arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__fields_chunk, SWIG_POINTER_NEW |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fields_chunk__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::fields_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_fields_chunk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__fields_chunk,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_fields_chunk" "', argument " "1"" of type '" "meep::fields_chunk const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_fields_chunk" "', argument " "1"" of type '" "meep::fields_chunk const &""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (meep::fields_chunk *)new meep::fields_chunk((meep::fields_chunk const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__fields_chunk, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fields_chunk(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__fields_chunk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_fields_chunk__SWIG_1(self, args);
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure_chunk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_fields_chunk__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_fields_chunk'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields_chunk::fields_chunk(meep::structure_chunk *,char const *,double,double,bool)\n"
    "    meep::fields_chunk::fields_chunk(meep::fields_chunk const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_fields_chunk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_fields_chunk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_fields_chunk" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_peek_field(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::component arg2 ;
  meep::vec *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_chunk_peek_field",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_peek_field" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_chunk_peek_field" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_chunk_peek_field" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  arg3 = reinterpret_cast< meep::vec * >(argp3);
  result = (double)(arg1)->peek_field(arg2,(meep::vec const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_use_real_fields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_use_real_fields",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_use_real_fields" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  (arg1)->use_real_fields();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_have_component__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::component arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_chunk_have_component",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_have_component" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_chunk_have_component" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->have_component(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_have_component__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_have_component",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_have_component" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  result = (bool)(arg1)->have_component(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_have_component(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields_chunk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        return _wrap_fields_chunk_have_component__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields_chunk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_fields_chunk_have_component__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_chunk_have_component'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields_chunk::have_component(meep::component,bool)\n"
    "    meep::fields_chunk::have_component(meep::component)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_chunk_last_source_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_last_source_time",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_last_source_time" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (double)(arg1)->last_source_time();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_get_field__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::component arg2 ;
  meep::ivec *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_chunk_get_field",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_get_field" "', argument " "1"" of type '" "meep::fields_chunk const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_chunk_get_field" "', argument " "3"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_chunk_get_field" "', argument " "3"" of type '" "meep::ivec const &""'"); 
  }
  arg3 = reinterpret_cast< meep::ivec * >(argp3);
  result = ((meep::fields_chunk const *)arg1)->get_field(arg2,(meep::ivec const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_get_field_gv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< meep::volume > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_get_field_gv",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_get_field_gv" "', argument " "1"" of type '" "meep::fields_chunk const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  result = ((meep::fields_chunk const *)arg1)->get_field_gv(arg2);
  resultobj = SWIG_NewPointerObj((new meep::volume(static_cast< const meep::volume& >(result))), SWIGTYPE_p_meep__volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_get_field__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::component arg2 ;
  meep::vec *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_chunk_get_field",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_get_field" "', argument " "1"" of type '" "meep::fields_chunk const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_chunk_get_field" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_chunk_get_field" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  arg3 = reinterpret_cast< meep::vec * >(argp3);
  result = ((meep::fields_chunk const *)arg1)->get_field(arg2,(meep::vec const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_get_field(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields_chunk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__ivec, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_fields_chunk_get_field__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields_chunk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__vec, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_fields_chunk_get_field__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_chunk_get_field'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields_chunk::get_field(meep::component,meep::ivec const &) const\n"
    "    meep::fields_chunk::get_field(meep::component,meep::vec const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_chunk_get_chi1inv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::component arg2 ;
  meep::direction arg3 ;
  meep::ivec *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fields_chunk_get_chi1inv",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_get_chi1inv" "', argument " "1"" of type '" "meep::fields_chunk const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_chunk_get_chi1inv" "', argument " "3"" of type '" "meep::direction""'");
  } 
  arg3 = static_cast< meep::direction >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_chunk_get_chi1inv" "', argument " "4"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_chunk_get_chi1inv" "', argument " "4"" of type '" "meep::ivec const &""'"); 
  }
  arg4 = reinterpret_cast< meep::ivec * >(argp4);
  result = (double)((meep::fields_chunk const *)arg1)->get_chi1inv(arg2,arg3,(meep::ivec const &)*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_backup_component(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_backup_component",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_backup_component" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  (arg1)->backup_component(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_average_with_backup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_average_with_backup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_average_with_backup" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  (arg1)->average_with_backup(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_restore_component(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_restore_component",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_restore_component" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  (arg1)->restore_component(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_set_output_directory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_set_output_directory",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_set_output_directory" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_chunk_set_output_directory" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->set_output_directory((char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_verbose__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_verbose",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_verbose" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_chunk_verbose" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->verbose(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_verbose__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_verbose",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_verbose" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  (arg1)->verbose();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_verbose(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields_chunk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_fields_chunk_verbose__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields_chunk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_fields_chunk_verbose__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_chunk_verbose'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields_chunk::verbose(int)\n"
    "    meep::fields_chunk::verbose()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_chunk_count_volume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_count_volume",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_count_volume" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  result = (double)(arg1)->count_volume(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_n_proc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_n_proc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_n_proc" "', argument " "1"" of type '" "meep::fields_chunk const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (int)((meep::fields_chunk const *)arg1)->n_proc();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_is_mine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_is_mine",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_is_mine" "', argument " "1"" of type '" "meep::fields_chunk const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  result = (int)((meep::fields_chunk const *)arg1)->is_mine();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_zero_metal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::field_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_zero_metal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_zero_metal" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_chunk_zero_metal" "', argument " "2"" of type '" "meep::field_type""'");
  } 
  arg2 = static_cast< meep::field_type >(val2);
  (arg1)->zero_metal(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_needs_W_notowned(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_needs_W_notowned",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_needs_W_notowned" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  result = (bool)(arg1)->needs_W_notowned(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_remove_sources(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_remove_sources",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_remove_sources" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  (arg1)->remove_sources();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_remove_susceptibilities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_remove_susceptibilities",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_remove_susceptibilities" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_chunk_remove_susceptibilities" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->remove_susceptibilities(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_zero_fields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_zero_fields",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_zero_fields" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  (arg1)->zero_fields();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_needs_W_prev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_needs_W_prev",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_needs_W_prev" "', argument " "1"" of type '" "meep::fields_chunk const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  result = (bool)((meep::fields_chunk const *)arg1)->needs_W_prev(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_update_eh__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::field_type arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_chunk_update_eh",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_update_eh" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_chunk_update_eh" "', argument " "2"" of type '" "meep::field_type""'");
  } 
  arg2 = static_cast< meep::field_type >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_chunk_update_eh" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->update_eh(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_update_eh__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::field_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_update_eh",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_update_eh" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_chunk_update_eh" "', argument " "2"" of type '" "meep::field_type""'");
  } 
  arg2 = static_cast< meep::field_type >(val2);
  result = (bool)(arg1)->update_eh(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_update_eh(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields_chunk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_fields_chunk_update_eh__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields_chunk, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_fields_chunk_update_eh__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_chunk_update_eh'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields_chunk::update_eh(meep::field_type,bool)\n"
    "    meep::fields_chunk::update_eh(meep::field_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_chunk_alloc_f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_alloc_f",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_alloc_f" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  result = (bool)(arg1)->alloc_f(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_figure_out_step_plan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_figure_out_step_plan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_figure_out_step_plan" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  (arg1)->figure_out_step_plan();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_set_solve_cw_omega(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunk_set_solve_cw_omega",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_set_solve_cw_omega" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_chunk_set_solve_cw_omega" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  (arg1)->set_solve_cw_omega(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunk_unset_solve_cw_omega(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields_chunk *arg1 = (meep::fields_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunk_unset_solve_cw_omega",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunk_unset_solve_cw_omega" "', argument " "1"" of type '" "meep::fields_chunk *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields_chunk * >(argp1);
  (arg1)->unset_solve_cw_omega();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *fields_chunk_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__fields_chunk, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_derived_component_func(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::derived_component arg1 ;
  meep::grid_volume *arg2 = 0 ;
  int *arg3 = 0 ;
  meep::component *arg4 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  meep::field_rfunction result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:derived_component_func",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    arg1 = static_cast<meep::derived_component>(PyInteger_AsLong(obj0));
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__grid_volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "derived_component_func" "', argument " "2"" of type '" "meep::grid_volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "derived_component_func" "', argument " "2"" of type '" "meep::grid_volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::grid_volume * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "derived_component_func" "', argument " "3"" of type '" "int &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "derived_component_func" "', argument " "3"" of type '" "int &""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_meep__component, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "derived_component_func" "', argument " "4"" of type '" "meep::component [12]""'"); 
  } 
  arg4 = reinterpret_cast< meep::component * >(argp4);
  result = (meep::field_rfunction)meep::derived_component_func(arg1,(meep::grid_volume const &)*arg2,*arg3,arg4);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_num_chunks_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_num_chunks_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_num_chunks_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_num_chunks_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->num_chunks = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_num_chunks_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_num_chunks_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_num_chunks_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (int) ((arg1)->num_chunks);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_shared_chunks_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_shared_chunks_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_shared_chunks_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_shared_chunks_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->shared_chunks = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_shared_chunks_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_shared_chunks_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_shared_chunks_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (bool) ((arg1)->shared_chunks);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunks_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::fields_chunk **arg2 = (meep::fields_chunk **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_chunks_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunks_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_meep__fields_chunk, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_chunks_set" "', argument " "2"" of type '" "meep::fields_chunk **""'"); 
  }
  arg2 = reinterpret_cast< meep::fields_chunk ** >(argp2);
  if (arg1) (arg1)->chunks = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_chunks_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::fields_chunk **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_chunks_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_chunks_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (meep::fields_chunk **) ((arg1)->chunks);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_meep__fields_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_sources_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::src_time *arg2 = (meep::src_time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_sources_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_sources_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__src_time, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_sources_set" "', argument " "2"" of type '" "meep::src_time *""'"); 
  }
  arg2 = reinterpret_cast< meep::src_time * >(argp2);
  if (arg1) (arg1)->sources = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_sources_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::src_time *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_sources_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_sources_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (meep::src_time *) ((arg1)->sources);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__src_time, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_fluxes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::flux_vol *arg2 = (meep::flux_vol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_fluxes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_fluxes_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__flux_vol, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_fluxes_set" "', argument " "2"" of type '" "meep::flux_vol *""'"); 
  }
  arg2 = reinterpret_cast< meep::flux_vol * >(argp2);
  if (arg1) (arg1)->fluxes = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_fluxes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::flux_vol *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_fluxes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_fluxes_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (meep::flux_vol *) ((arg1)->fluxes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__flux_vol, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_S_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::symmetry *arg2 = (meep::symmetry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_S_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_S_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__symmetry, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_S_set" "', argument " "2"" of type '" "meep::symmetry *""'"); 
  }
  arg2 = reinterpret_cast< meep::symmetry * >(argp2);
  if (arg1) (arg1)->S = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_S_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::symmetry *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_S_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_S_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (meep::symmetry *)& ((arg1)->S);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__symmetry, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_comm_blocks_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::realnum ***arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_comm_blocks_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_comm_blocks_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_comm_blocks_set" "', argument " "2"" of type '" "meep::realnum **[meep::NUM_FIELD_TYPES]""'"); 
  } 
  arg2 = reinterpret_cast< meep::realnum *** >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_TYPES; ++ii) *(meep::realnum ** *)&arg1->comm_blocks[ii] = *((meep::realnum ** *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""comm_blocks""' of type '""meep::realnum **[meep::NUM_FIELD_TYPES]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_comm_blocks_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::realnum ***result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_comm_blocks_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_comm_blocks_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (meep::realnum ***)(meep::realnum ***) ((arg1)->comm_blocks);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_comm_sizes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  size_t *(*arg2)[meep::CONNECT_COPY+1] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_comm_sizes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_comm_sizes_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_meep__CONNECT_COPY_1__p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_comm_sizes_set" "', argument " "2"" of type '" "size_t *[meep::NUM_FIELD_TYPES][meep::CONNECT_COPY+1]""'"); 
  } 
  arg2 = reinterpret_cast< size_t *(*)[meep::CONNECT_COPY+1] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)meep::NUM_FIELD_TYPES; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)meep::CONNECT_COPY+1; ++jj) arg1->comm_sizes[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""comm_sizes""' of type '""size_t *[meep::NUM_FIELD_TYPES][meep::CONNECT_COPY+1]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""comm_sizes""' of type '""size_t *[meep::NUM_FIELD_TYPES][meep::CONNECT_COPY+1]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_comm_sizes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t *(*result)[meep::CONNECT_COPY+1] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_comm_sizes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_comm_sizes_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (size_t *(*)[meep::CONNECT_COPY+1])(size_t *(*)[meep::CONNECT_COPY+1]) ((arg1)->comm_sizes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_meep__CONNECT_COPY_1__p_size_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_comm_size_tot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_comm_size_tot",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_comm_size_tot" "', argument " "1"" of type '" "meep::fields const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_comm_size_tot" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_comm_size_tot" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((meep::fields const *)arg1)->comm_size_tot(arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_a_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_a_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_a_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_a_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->a = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_a_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_a_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_a_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (double) ((arg1)->a);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_dt_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_dt_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_dt_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_dt_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->dt = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_dt_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_dt_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_dt_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (double) ((arg1)->dt);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_gv_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::grid_volume *arg2 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_gv_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_gv_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_gv_set" "', argument " "2"" of type '" "meep::grid_volume *""'"); 
  }
  arg2 = reinterpret_cast< meep::grid_volume * >(argp2);
  if (arg1) (arg1)->gv = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_gv_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::grid_volume *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_gv_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_gv_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (meep::grid_volume *)& ((arg1)->gv);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_user_volume_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::grid_volume *arg2 = (meep::grid_volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_user_volume_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_user_volume_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_user_volume_set" "', argument " "2"" of type '" "meep::grid_volume *""'"); 
  }
  arg2 = reinterpret_cast< meep::grid_volume * >(argp2);
  if (arg1) (arg1)->user_volume = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_user_volume_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::grid_volume *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_user_volume_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_user_volume_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (meep::grid_volume *)& ((arg1)->user_volume);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_v_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume *arg2 = (meep::volume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_v_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_v_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__volume, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_v_set" "', argument " "2"" of type '" "meep::volume *""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  if (arg1) (arg1)->v = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_v_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::volume *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_v_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_v_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (meep::volume *)& ((arg1)->v);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__volume, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_m_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_m_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_m_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_m_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->m = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_m_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_m_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_m_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (double) ((arg1)->m);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_beta_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_beta_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_beta_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_beta_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->beta = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_beta_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_beta_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_beta_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (double) ((arg1)->beta);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_t_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_t_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_t_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_t_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->t = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_t_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_t_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_t_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (int) ((arg1)->t);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_phasein_time_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_phasein_time_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_phasein_time_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_phasein_time_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->phasein_time = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_phasein_time_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_phasein_time_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_phasein_time_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (int) ((arg1)->phasein_time);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_is_real_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_is_real_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_is_real_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_is_real_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->is_real = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_is_real_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_is_real_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_is_real_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (int) ((arg1)->is_real);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_k_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  std::complex< double > *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_k_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_k_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_k_set" "', argument " "2"" of type '" "std::complex< double > [5]""'"); 
  } 
  arg2 = reinterpret_cast< std::complex< double > * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)5; ++ii) *(std::complex< double > *)&arg1->k[ii] = *((std::complex< double > *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""k""' of type '""std::complex< double > [5]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_k_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_k_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_k_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (std::complex< double > *)(std::complex< double > *) ((arg1)->k);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_eikna_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  std::complex< double > *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_eikna_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_eikna_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_eikna_set" "', argument " "2"" of type '" "std::complex< double > [5]""'"); 
  } 
  arg2 = reinterpret_cast< std::complex< double > * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)5; ++ii) *(std::complex< double > *)&arg1->eikna[ii] = *((std::complex< double > *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""eikna""' of type '""std::complex< double > [5]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_eikna_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_eikna_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_eikna_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (std::complex< double > *)(std::complex< double > *) ((arg1)->eikna);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_coskna_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_coskna_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_coskna_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_coskna_set" "', argument " "2"" of type '" "double [5]""'"); 
  } 
  arg2 = reinterpret_cast< double * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)5; ++ii) *(double *)&arg1->coskna[ii] = *((double *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""coskna""' of type '""double [5]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_coskna_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_coskna_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_coskna_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (double *)(double *) ((arg1)->coskna);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_sinkna_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_sinkna_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_sinkna_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_sinkna_set" "', argument " "2"" of type '" "double [5]""'"); 
  } 
  arg2 = reinterpret_cast< double * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)5; ++ii) *(double *)&arg1->sinkna[ii] = *((double *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""sinkna""' of type '""double [5]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_sinkna_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_sinkna_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_sinkna_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (double *)(double *) ((arg1)->sinkna);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_boundaries_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::boundary_condition (*arg2)[5] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_boundaries_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_boundaries_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_5__meep__boundary_condition, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_boundaries_set" "', argument " "2"" of type '" "meep::boundary_condition [2][5]""'"); 
  } 
  arg2 = reinterpret_cast< meep::boundary_condition (*)[5] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)5; ++jj) arg1->boundaries[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""boundaries""' of type '""meep::boundary_condition [2][5]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""boundaries""' of type '""meep::boundary_condition [2][5]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_boundaries_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::boundary_condition (*result)[5] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_boundaries_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_boundaries_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (meep::boundary_condition (*)[5])(meep::boundary_condition (*)[5]) ((arg1)->boundaries);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_5__meep__boundary_condition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_outdir_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_outdir_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_outdir_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_outdir_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->outdir) delete[] arg1->outdir;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->outdir = (char *)reinterpret_cast< char* >(memcpy(new char[size], reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->outdir = 0;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_outdir_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_outdir_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_outdir_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (char *) ((arg1)->outdir);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_components_allocated_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_components_allocated_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_components_allocated_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_components_allocated_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->components_allocated = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_components_allocated_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_components_allocated_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_components_allocated_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (bool) ((arg1)->components_allocated);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fields__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  meep::fields *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_fields",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_fields" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_fields" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_fields" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_fields" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (meep::fields *)new meep::fields(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__fields, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fields__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::fields *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_fields",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_fields" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_fields" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_fields" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (meep::fields *)new meep::fields(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__fields, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fields__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::fields *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_fields",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_fields" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_fields" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (meep::fields *)new meep::fields(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__fields, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fields__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::fields *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_fields",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_fields" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  result = (meep::fields *)new meep::fields(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__fields, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fields__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::fields *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_fields",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__fields,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_fields" "', argument " "1"" of type '" "meep::fields const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_fields" "', argument " "1"" of type '" "meep::fields const &""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (meep::fields *)new meep::fields((meep::fields const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__fields, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fields(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_fields__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_fields__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_fields__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_fields__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_fields__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_fields'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::fields(meep::structure *,double,double,bool)\n"
    "    meep::fields::fields(meep::structure *,double,double)\n"
    "    meep::fields::fields(meep::structure *,double)\n"
    "    meep::fields::fields(meep::structure *)\n"
    "    meep::fields::fields(meep::fields const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_fields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_fields",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_fields" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_equal_layout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::fields *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_equal_layout",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_equal_layout" "', argument " "1"" of type '" "meep::fields const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__fields,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_equal_layout" "', argument " "2"" of type '" "meep::fields const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_equal_layout" "', argument " "2"" of type '" "meep::fields const &""'"); 
  }
  arg2 = reinterpret_cast< meep::fields * >(argp2);
  result = (bool)((meep::fields const *)arg1)->equal_layout((meep::fields const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_use_real_fields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_use_real_fields",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_use_real_fields" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  (arg1)->use_real_fields();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_zero_fields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_zero_fields",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_zero_fields" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  (arg1)->zero_fields();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_remove_sources(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_remove_sources",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_remove_sources" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  (arg1)->remove_sources();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_remove_susceptibilities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_remove_susceptibilities",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_remove_susceptibilities" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  (arg1)->remove_susceptibilities();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_remove_fluxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_remove_fluxes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_remove_fluxes" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  (arg1)->remove_fluxes();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_reset" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  (arg1)->reset();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_time_spent_on(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::time_sink arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_time_spent_on",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_time_spent_on" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_time_spent_on" "', argument " "2"" of type '" "meep::time_sink""'");
  } 
  arg2 = static_cast< meep::time_sink >(val2);
  result = (double)(arg1)->time_spent_on(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_print_times(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_print_times",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_print_times" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  (arg1)->print_times();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_set_boundary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::boundary_side arg2 ;
  meep::direction arg3 ;
  meep::boundary_condition arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fields_set_boundary",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_set_boundary" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_set_boundary" "', argument " "2"" of type '" "meep::boundary_side""'");
  } 
  arg2 = static_cast< meep::boundary_side >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_set_boundary" "', argument " "3"" of type '" "meep::direction""'");
  } 
  arg3 = static_cast< meep::direction >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_set_boundary" "', argument " "4"" of type '" "meep::boundary_condition""'");
  } 
  arg4 = static_cast< meep::boundary_condition >(val4);
  (arg1)->set_boundary(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_use_bloch__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::direction arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_use_bloch",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_use_bloch" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_use_bloch" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_use_bloch" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->use_bloch(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_use_bloch__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::direction arg2 ;
  std::complex< double > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::complex< double > val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_use_bloch",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_use_bloch" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_use_bloch" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  ecode3 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_use_bloch" "', argument " "3"" of type '" "std::complex< double >""'");
  } 
  arg3 = static_cast< std::complex< double > >(val3);
  (arg1)->use_bloch(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_use_bloch__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_use_bloch",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_use_bloch" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_use_bloch" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_use_bloch" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  (arg1)->use_bloch((meep::vec const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_use_bloch(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__vec, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_fields_use_bloch__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_fields_use_bloch__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_fields_use_bloch__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_use_bloch'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::use_bloch(meep::direction,double)\n"
    "    meep::fields::use_bloch(meep::direction,std::complex< double >)\n"
    "    meep::fields::use_bloch(meep::vec const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_lattice_vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::direction arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_lattice_vector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_lattice_vector" "', argument " "1"" of type '" "meep::fields const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_lattice_vector" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  result = ((meep::fields const *)arg1)->lattice_vector(arg2);
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_update_eh__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::field_type arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_update_eh",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_update_eh" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_update_eh" "', argument " "2"" of type '" "meep::field_type""'");
  } 
  arg2 = static_cast< meep::field_type >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_update_eh" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->update_eh(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_update_eh__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::field_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_update_eh",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_update_eh" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_update_eh" "', argument " "2"" of type '" "meep::field_type""'");
  } 
  arg2 = static_cast< meep::field_type >(val2);
  (arg1)->update_eh(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_update_eh(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_fields_update_eh__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_fields_update_eh__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_update_eh'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::update_eh(meep::field_type,bool)\n"
    "    meep::fields::update_eh(meep::field_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_total_volume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< meep::volume > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_total_volume",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_total_volume" "', argument " "1"" of type '" "meep::fields const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = ((meep::fields const *)arg1)->total_volume();
  resultobj = SWIG_NewPointerObj((new meep::volume(static_cast< const meep::volume& >(result))), SWIGTYPE_p_meep__volume, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_hdf5__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::h5file *arg2 = (meep::h5file *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  meep::component *arg5 = (meep::component *) 0 ;
  meep::field_function arg6 = (meep::field_function) 0 ;
  void *arg7 = (void *) 0 ;
  int arg8 ;
  meep::volume *arg9 = 0 ;
  bool arg10 ;
  bool arg11 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  py_field_func_data tmp_data4 ;
  int val8 ;
  int ecode8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  bool val11 ;
  int ecode11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:fields_output_hdf5",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_hdf5" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_output_hdf5" "', argument " "2"" of type '" "meep::h5file *""'"); 
  }
  arg2 = reinterpret_cast< meep::h5file * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    if (!PySequence_Check(obj3)) {
      PyErr_SetString(PyExc_ValueError, "Expected a sequence");
      SWIG_fail;
    }
    
    PyObject *cs = PyList_GetItem(obj3, 0);
    
    if (!PySequence_Check(cs)) {
      PyErr_SetString(PyExc_ValueError, "Expected first item in list to be a list");
      SWIG_fail;
    }
    
    PyObject *func = PyList_GetItem(obj3, 1);
    
    if (!PyCallable_Check(func)) {
      PyErr_SetString(PyExc_ValueError, "Expected a function");
      SWIG_fail;
    }
    
    arg4 = PyList_Size(cs);
    arg5 = new meep::component[arg4];
    
    for (Py_ssize_t i = 0; i < arg4; i++) {
      arg5[i] = (meep::component)PyInteger_AsLong(PyList_GetItem(cs, i));
    }
    
    arg6 = py_field_func_wrap;
    
    tmp_data4.num_components = arg4;
    tmp_data4.func = func;
    Py_INCREF(tmp_data4.func);
    arg7 = &tmp_data4;
  }
  ecode8 = SWIG_AsVal_int(obj4, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fields_output_hdf5" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  res9 = SWIG_ConvertPtr(obj5, &argp9, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "fields_output_hdf5" "', argument " "9"" of type '" "meep::volume const &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_hdf5" "', argument " "9"" of type '" "meep::volume const &""'"); 
  }
  arg9 = reinterpret_cast< meep::volume * >(argp9);
  ecode10 = SWIG_AsVal_bool(obj6, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "fields_output_hdf5" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  ecode11 = SWIG_AsVal_bool(obj7, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "fields_output_hdf5" "', argument " "11"" of type '" "bool""'");
  } 
  arg11 = static_cast< bool >(val11);
  (arg1)->output_hdf5(arg2,(char const *)arg3,arg4,(meep::component const *)arg5,arg6,arg7,arg8,(meep::volume const &)*arg9,arg10,arg11);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete[] arg5;
    Py_XDECREF(tmp_data4.func);
  }
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete[] arg5;
    Py_XDECREF(tmp_data4.func);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_hdf5__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::h5file *arg2 = (meep::h5file *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  meep::component *arg5 = (meep::component *) 0 ;
  meep::field_function arg6 = (meep::field_function) 0 ;
  void *arg7 = (void *) 0 ;
  int arg8 ;
  meep::volume *arg9 = 0 ;
  bool arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  py_field_func_data tmp_data4 ;
  int val8 ;
  int ecode8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:fields_output_hdf5",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_hdf5" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_output_hdf5" "', argument " "2"" of type '" "meep::h5file *""'"); 
  }
  arg2 = reinterpret_cast< meep::h5file * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    if (!PySequence_Check(obj3)) {
      PyErr_SetString(PyExc_ValueError, "Expected a sequence");
      SWIG_fail;
    }
    
    PyObject *cs = PyList_GetItem(obj3, 0);
    
    if (!PySequence_Check(cs)) {
      PyErr_SetString(PyExc_ValueError, "Expected first item in list to be a list");
      SWIG_fail;
    }
    
    PyObject *func = PyList_GetItem(obj3, 1);
    
    if (!PyCallable_Check(func)) {
      PyErr_SetString(PyExc_ValueError, "Expected a function");
      SWIG_fail;
    }
    
    arg4 = PyList_Size(cs);
    arg5 = new meep::component[arg4];
    
    for (Py_ssize_t i = 0; i < arg4; i++) {
      arg5[i] = (meep::component)PyInteger_AsLong(PyList_GetItem(cs, i));
    }
    
    arg6 = py_field_func_wrap;
    
    tmp_data4.num_components = arg4;
    tmp_data4.func = func;
    Py_INCREF(tmp_data4.func);
    arg7 = &tmp_data4;
  }
  ecode8 = SWIG_AsVal_int(obj4, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fields_output_hdf5" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  res9 = SWIG_ConvertPtr(obj5, &argp9, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "fields_output_hdf5" "', argument " "9"" of type '" "meep::volume const &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_hdf5" "', argument " "9"" of type '" "meep::volume const &""'"); 
  }
  arg9 = reinterpret_cast< meep::volume * >(argp9);
  ecode10 = SWIG_AsVal_bool(obj6, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "fields_output_hdf5" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  (arg1)->output_hdf5(arg2,(char const *)arg3,arg4,(meep::component const *)arg5,arg6,arg7,arg8,(meep::volume const &)*arg9,arg10);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete[] arg5;
    Py_XDECREF(tmp_data4.func);
  }
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete[] arg5;
    Py_XDECREF(tmp_data4.func);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_hdf5__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::h5file *arg2 = (meep::h5file *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  meep::component *arg5 = (meep::component *) 0 ;
  meep::field_function arg6 = (meep::field_function) 0 ;
  void *arg7 = (void *) 0 ;
  int arg8 ;
  meep::volume *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  py_field_func_data tmp_data4 ;
  int val8 ;
  int ecode8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:fields_output_hdf5",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_hdf5" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_output_hdf5" "', argument " "2"" of type '" "meep::h5file *""'"); 
  }
  arg2 = reinterpret_cast< meep::h5file * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    if (!PySequence_Check(obj3)) {
      PyErr_SetString(PyExc_ValueError, "Expected a sequence");
      SWIG_fail;
    }
    
    PyObject *cs = PyList_GetItem(obj3, 0);
    
    if (!PySequence_Check(cs)) {
      PyErr_SetString(PyExc_ValueError, "Expected first item in list to be a list");
      SWIG_fail;
    }
    
    PyObject *func = PyList_GetItem(obj3, 1);
    
    if (!PyCallable_Check(func)) {
      PyErr_SetString(PyExc_ValueError, "Expected a function");
      SWIG_fail;
    }
    
    arg4 = PyList_Size(cs);
    arg5 = new meep::component[arg4];
    
    for (Py_ssize_t i = 0; i < arg4; i++) {
      arg5[i] = (meep::component)PyInteger_AsLong(PyList_GetItem(cs, i));
    }
    
    arg6 = py_field_func_wrap;
    
    tmp_data4.num_components = arg4;
    tmp_data4.func = func;
    Py_INCREF(tmp_data4.func);
    arg7 = &tmp_data4;
  }
  ecode8 = SWIG_AsVal_int(obj4, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fields_output_hdf5" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  res9 = SWIG_ConvertPtr(obj5, &argp9, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "fields_output_hdf5" "', argument " "9"" of type '" "meep::volume const &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_hdf5" "', argument " "9"" of type '" "meep::volume const &""'"); 
  }
  arg9 = reinterpret_cast< meep::volume * >(argp9);
  (arg1)->output_hdf5(arg2,(char const *)arg3,arg4,(meep::component const *)arg5,arg6,arg7,arg8,(meep::volume const &)*arg9);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete[] arg5;
    Py_XDECREF(tmp_data4.func);
  }
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    delete[] arg5;
    Py_XDECREF(tmp_data4.func);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_hdf5__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  meep::component *arg4 = (meep::component *) 0 ;
  meep::field_function arg5 = (meep::field_function) 0 ;
  void *arg6 = (void *) 0 ;
  meep::volume *arg7 = 0 ;
  meep::h5file *arg8 = (meep::h5file *) 0 ;
  bool arg9 ;
  bool arg10 ;
  char *arg11 = (char *) 0 ;
  bool arg12 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  py_field_func_data tmp_data3 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  int res11 ;
  char *buf11 = 0 ;
  int alloc11 = 0 ;
  bool val12 ;
  int ecode12 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:fields_output_hdf5",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_hdf5" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_output_hdf5" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    if (!PySequence_Check(obj2)) {
      PyErr_SetString(PyExc_ValueError, "Expected a sequence");
      SWIG_fail;
    }
    
    PyObject *cs = PyList_GetItem(obj2, 0);
    
    if (!PySequence_Check(cs)) {
      PyErr_SetString(PyExc_ValueError, "Expected first item in list to be a list");
      SWIG_fail;
    }
    
    PyObject *func = PyList_GetItem(obj2, 1);
    
    if (!PyCallable_Check(func)) {
      PyErr_SetString(PyExc_ValueError, "Expected a function");
      SWIG_fail;
    }
    
    arg3 = PyList_Size(cs);
    arg4 = new meep::component[arg3];
    
    for (Py_ssize_t i = 0; i < arg3; i++) {
      arg4[i] = (meep::component)PyInteger_AsLong(PyList_GetItem(cs, i));
    }
    
    arg5 = py_field_func_wrap;
    
    tmp_data3.num_components = arg3;
    tmp_data3.func = func;
    Py_INCREF(tmp_data3.func);
    arg6 = &tmp_data3;
  }
  res7 = SWIG_ConvertPtr(obj3, &argp7, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_output_hdf5" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_hdf5" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  arg7 = reinterpret_cast< meep::volume * >(argp7);
  res8 = SWIG_ConvertPtr(obj4, &argp8,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "fields_output_hdf5" "', argument " "8"" of type '" "meep::h5file *""'"); 
  }
  arg8 = reinterpret_cast< meep::h5file * >(argp8);
  ecode9 = SWIG_AsVal_bool(obj5, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "fields_output_hdf5" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  ecode10 = SWIG_AsVal_bool(obj6, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "fields_output_hdf5" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  res11 = SWIG_AsCharPtrAndSize(obj7, &buf11, NULL, &alloc11);
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "fields_output_hdf5" "', argument " "11"" of type '" "char const *""'");
  }
  arg11 = reinterpret_cast< char * >(buf11);
  ecode12 = SWIG_AsVal_bool(obj8, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "fields_output_hdf5" "', argument " "12"" of type '" "bool""'");
  } 
  arg12 = static_cast< bool >(val12);
  (arg1)->output_hdf5((char const *)arg2,arg3,(meep::component const *)arg4,arg5,arg6,(meep::volume const &)*arg7,arg8,arg9,arg10,(char const *)arg11,arg12);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete[] arg4;
    Py_XDECREF(tmp_data3.func);
  }
  if (alloc11 == SWIG_NEWOBJ) delete[] buf11;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete[] arg4;
    Py_XDECREF(tmp_data3.func);
  }
  if (alloc11 == SWIG_NEWOBJ) delete[] buf11;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_hdf5__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  meep::component *arg4 = (meep::component *) 0 ;
  meep::field_function arg5 = (meep::field_function) 0 ;
  void *arg6 = (void *) 0 ;
  meep::volume *arg7 = 0 ;
  meep::h5file *arg8 = (meep::h5file *) 0 ;
  bool arg9 ;
  bool arg10 ;
  char *arg11 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  py_field_func_data tmp_data3 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  int res11 ;
  char *buf11 = 0 ;
  int alloc11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:fields_output_hdf5",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_hdf5" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_output_hdf5" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    if (!PySequence_Check(obj2)) {
      PyErr_SetString(PyExc_ValueError, "Expected a sequence");
      SWIG_fail;
    }
    
    PyObject *cs = PyList_GetItem(obj2, 0);
    
    if (!PySequence_Check(cs)) {
      PyErr_SetString(PyExc_ValueError, "Expected first item in list to be a list");
      SWIG_fail;
    }
    
    PyObject *func = PyList_GetItem(obj2, 1);
    
    if (!PyCallable_Check(func)) {
      PyErr_SetString(PyExc_ValueError, "Expected a function");
      SWIG_fail;
    }
    
    arg3 = PyList_Size(cs);
    arg4 = new meep::component[arg3];
    
    for (Py_ssize_t i = 0; i < arg3; i++) {
      arg4[i] = (meep::component)PyInteger_AsLong(PyList_GetItem(cs, i));
    }
    
    arg5 = py_field_func_wrap;
    
    tmp_data3.num_components = arg3;
    tmp_data3.func = func;
    Py_INCREF(tmp_data3.func);
    arg6 = &tmp_data3;
  }
  res7 = SWIG_ConvertPtr(obj3, &argp7, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_output_hdf5" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_hdf5" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  arg7 = reinterpret_cast< meep::volume * >(argp7);
  res8 = SWIG_ConvertPtr(obj4, &argp8,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "fields_output_hdf5" "', argument " "8"" of type '" "meep::h5file *""'"); 
  }
  arg8 = reinterpret_cast< meep::h5file * >(argp8);
  ecode9 = SWIG_AsVal_bool(obj5, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "fields_output_hdf5" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  ecode10 = SWIG_AsVal_bool(obj6, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "fields_output_hdf5" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  res11 = SWIG_AsCharPtrAndSize(obj7, &buf11, NULL, &alloc11);
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "fields_output_hdf5" "', argument " "11"" of type '" "char const *""'");
  }
  arg11 = reinterpret_cast< char * >(buf11);
  (arg1)->output_hdf5((char const *)arg2,arg3,(meep::component const *)arg4,arg5,arg6,(meep::volume const &)*arg7,arg8,arg9,arg10,(char const *)arg11);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete[] arg4;
    Py_XDECREF(tmp_data3.func);
  }
  if (alloc11 == SWIG_NEWOBJ) delete[] buf11;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete[] arg4;
    Py_XDECREF(tmp_data3.func);
  }
  if (alloc11 == SWIG_NEWOBJ) delete[] buf11;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_hdf5__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  meep::component *arg4 = (meep::component *) 0 ;
  meep::field_function arg5 = (meep::field_function) 0 ;
  void *arg6 = (void *) 0 ;
  meep::volume *arg7 = 0 ;
  meep::h5file *arg8 = (meep::h5file *) 0 ;
  bool arg9 ;
  bool arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  py_field_func_data tmp_data3 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:fields_output_hdf5",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_hdf5" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_output_hdf5" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    if (!PySequence_Check(obj2)) {
      PyErr_SetString(PyExc_ValueError, "Expected a sequence");
      SWIG_fail;
    }
    
    PyObject *cs = PyList_GetItem(obj2, 0);
    
    if (!PySequence_Check(cs)) {
      PyErr_SetString(PyExc_ValueError, "Expected first item in list to be a list");
      SWIG_fail;
    }
    
    PyObject *func = PyList_GetItem(obj2, 1);
    
    if (!PyCallable_Check(func)) {
      PyErr_SetString(PyExc_ValueError, "Expected a function");
      SWIG_fail;
    }
    
    arg3 = PyList_Size(cs);
    arg4 = new meep::component[arg3];
    
    for (Py_ssize_t i = 0; i < arg3; i++) {
      arg4[i] = (meep::component)PyInteger_AsLong(PyList_GetItem(cs, i));
    }
    
    arg5 = py_field_func_wrap;
    
    tmp_data3.num_components = arg3;
    tmp_data3.func = func;
    Py_INCREF(tmp_data3.func);
    arg6 = &tmp_data3;
  }
  res7 = SWIG_ConvertPtr(obj3, &argp7, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_output_hdf5" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_hdf5" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  arg7 = reinterpret_cast< meep::volume * >(argp7);
  res8 = SWIG_ConvertPtr(obj4, &argp8,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "fields_output_hdf5" "', argument " "8"" of type '" "meep::h5file *""'"); 
  }
  arg8 = reinterpret_cast< meep::h5file * >(argp8);
  ecode9 = SWIG_AsVal_bool(obj5, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "fields_output_hdf5" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  ecode10 = SWIG_AsVal_bool(obj6, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "fields_output_hdf5" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  (arg1)->output_hdf5((char const *)arg2,arg3,(meep::component const *)arg4,arg5,arg6,(meep::volume const &)*arg7,arg8,arg9,arg10);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete[] arg4;
    Py_XDECREF(tmp_data3.func);
  }
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete[] arg4;
    Py_XDECREF(tmp_data3.func);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_hdf5__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  meep::component *arg4 = (meep::component *) 0 ;
  meep::field_function arg5 = (meep::field_function) 0 ;
  void *arg6 = (void *) 0 ;
  meep::volume *arg7 = 0 ;
  meep::h5file *arg8 = (meep::h5file *) 0 ;
  bool arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  py_field_func_data tmp_data3 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:fields_output_hdf5",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_hdf5" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_output_hdf5" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    if (!PySequence_Check(obj2)) {
      PyErr_SetString(PyExc_ValueError, "Expected a sequence");
      SWIG_fail;
    }
    
    PyObject *cs = PyList_GetItem(obj2, 0);
    
    if (!PySequence_Check(cs)) {
      PyErr_SetString(PyExc_ValueError, "Expected first item in list to be a list");
      SWIG_fail;
    }
    
    PyObject *func = PyList_GetItem(obj2, 1);
    
    if (!PyCallable_Check(func)) {
      PyErr_SetString(PyExc_ValueError, "Expected a function");
      SWIG_fail;
    }
    
    arg3 = PyList_Size(cs);
    arg4 = new meep::component[arg3];
    
    for (Py_ssize_t i = 0; i < arg3; i++) {
      arg4[i] = (meep::component)PyInteger_AsLong(PyList_GetItem(cs, i));
    }
    
    arg5 = py_field_func_wrap;
    
    tmp_data3.num_components = arg3;
    tmp_data3.func = func;
    Py_INCREF(tmp_data3.func);
    arg6 = &tmp_data3;
  }
  res7 = SWIG_ConvertPtr(obj3, &argp7, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_output_hdf5" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_hdf5" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  arg7 = reinterpret_cast< meep::volume * >(argp7);
  res8 = SWIG_ConvertPtr(obj4, &argp8,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "fields_output_hdf5" "', argument " "8"" of type '" "meep::h5file *""'"); 
  }
  arg8 = reinterpret_cast< meep::h5file * >(argp8);
  ecode9 = SWIG_AsVal_bool(obj5, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "fields_output_hdf5" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  (arg1)->output_hdf5((char const *)arg2,arg3,(meep::component const *)arg4,arg5,arg6,(meep::volume const &)*arg7,arg8,arg9);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete[] arg4;
    Py_XDECREF(tmp_data3.func);
  }
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete[] arg4;
    Py_XDECREF(tmp_data3.func);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_hdf5__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  meep::component *arg4 = (meep::component *) 0 ;
  meep::field_function arg5 = (meep::field_function) 0 ;
  void *arg6 = (void *) 0 ;
  meep::volume *arg7 = 0 ;
  meep::h5file *arg8 = (meep::h5file *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  py_field_func_data tmp_data3 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:fields_output_hdf5",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_hdf5" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_output_hdf5" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    if (!PySequence_Check(obj2)) {
      PyErr_SetString(PyExc_ValueError, "Expected a sequence");
      SWIG_fail;
    }
    
    PyObject *cs = PyList_GetItem(obj2, 0);
    
    if (!PySequence_Check(cs)) {
      PyErr_SetString(PyExc_ValueError, "Expected first item in list to be a list");
      SWIG_fail;
    }
    
    PyObject *func = PyList_GetItem(obj2, 1);
    
    if (!PyCallable_Check(func)) {
      PyErr_SetString(PyExc_ValueError, "Expected a function");
      SWIG_fail;
    }
    
    arg3 = PyList_Size(cs);
    arg4 = new meep::component[arg3];
    
    for (Py_ssize_t i = 0; i < arg3; i++) {
      arg4[i] = (meep::component)PyInteger_AsLong(PyList_GetItem(cs, i));
    }
    
    arg5 = py_field_func_wrap;
    
    tmp_data3.num_components = arg3;
    tmp_data3.func = func;
    Py_INCREF(tmp_data3.func);
    arg6 = &tmp_data3;
  }
  res7 = SWIG_ConvertPtr(obj3, &argp7, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_output_hdf5" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_hdf5" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  arg7 = reinterpret_cast< meep::volume * >(argp7);
  res8 = SWIG_ConvertPtr(obj4, &argp8,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "fields_output_hdf5" "', argument " "8"" of type '" "meep::h5file *""'"); 
  }
  arg8 = reinterpret_cast< meep::h5file * >(argp8);
  (arg1)->output_hdf5((char const *)arg2,arg3,(meep::component const *)arg4,arg5,arg6,(meep::volume const &)*arg7,arg8);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete[] arg4;
    Py_XDECREF(tmp_data3.func);
  }
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete[] arg4;
    Py_XDECREF(tmp_data3.func);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_hdf5__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  meep::component *arg4 = (meep::component *) 0 ;
  meep::field_function arg5 = (meep::field_function) 0 ;
  void *arg6 = (void *) 0 ;
  meep::volume *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  py_field_func_data tmp_data3 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fields_output_hdf5",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_hdf5" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_output_hdf5" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    if (!PySequence_Check(obj2)) {
      PyErr_SetString(PyExc_ValueError, "Expected a sequence");
      SWIG_fail;
    }
    
    PyObject *cs = PyList_GetItem(obj2, 0);
    
    if (!PySequence_Check(cs)) {
      PyErr_SetString(PyExc_ValueError, "Expected first item in list to be a list");
      SWIG_fail;
    }
    
    PyObject *func = PyList_GetItem(obj2, 1);
    
    if (!PyCallable_Check(func)) {
      PyErr_SetString(PyExc_ValueError, "Expected a function");
      SWIG_fail;
    }
    
    arg3 = PyList_Size(cs);
    arg4 = new meep::component[arg3];
    
    for (Py_ssize_t i = 0; i < arg3; i++) {
      arg4[i] = (meep::component)PyInteger_AsLong(PyList_GetItem(cs, i));
    }
    
    arg5 = py_field_func_wrap;
    
    tmp_data3.num_components = arg3;
    tmp_data3.func = func;
    Py_INCREF(tmp_data3.func);
    arg6 = &tmp_data3;
  }
  res7 = SWIG_ConvertPtr(obj3, &argp7, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_output_hdf5" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_hdf5" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  arg7 = reinterpret_cast< meep::volume * >(argp7);
  (arg1)->output_hdf5((char const *)arg2,arg3,(meep::component const *)arg4,arg5,arg6,(meep::volume const &)*arg7);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete[] arg4;
    Py_XDECREF(tmp_data3.func);
  }
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    delete[] arg4;
    Py_XDECREF(tmp_data3.func);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_hdf5__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  meep::component *arg4 = (meep::component *) 0 ;
  meep::field_rfunction arg5 = (meep::field_rfunction) 0 ;
  void *arg6 = (void *) 0 ;
  meep::volume *arg7 = 0 ;
  meep::h5file *arg8 = (meep::h5file *) 0 ;
  bool arg9 ;
  bool arg10 ;
  char *arg11 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res6 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  int res11 ;
  char *buf11 = 0 ;
  int alloc11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:fields_output_hdf5",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_hdf5" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_output_hdf5" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_meep__component, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_output_hdf5" "', argument " "4"" of type '" "meep::component const *""'"); 
  }
  arg4 = reinterpret_cast< meep::component * >(argp4);
  {
    int res = SWIG_ConvertFunctionPtr(obj4, (void**)(&arg5), SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fields_output_hdf5" "', argument " "5"" of type '" "meep::field_rfunction""'"); 
    }
  }
  res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6), 0, 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fields_output_hdf5" "', argument " "6"" of type '" "void *""'"); 
  }
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_output_hdf5" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_hdf5" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  arg7 = reinterpret_cast< meep::volume * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "fields_output_hdf5" "', argument " "8"" of type '" "meep::h5file *""'"); 
  }
  arg8 = reinterpret_cast< meep::h5file * >(argp8);
  ecode9 = SWIG_AsVal_bool(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "fields_output_hdf5" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  ecode10 = SWIG_AsVal_bool(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "fields_output_hdf5" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  res11 = SWIG_AsCharPtrAndSize(obj10, &buf11, NULL, &alloc11);
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "fields_output_hdf5" "', argument " "11"" of type '" "char const *""'");
  }
  arg11 = reinterpret_cast< char * >(buf11);
  (arg1)->output_hdf5((char const *)arg2,arg3,(meep::component const *)arg4,arg5,arg6,(meep::volume const &)*arg7,arg8,arg9,arg10,(char const *)arg11);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc11 == SWIG_NEWOBJ) delete[] buf11;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc11 == SWIG_NEWOBJ) delete[] buf11;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_hdf5__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  meep::component *arg4 = (meep::component *) 0 ;
  meep::field_rfunction arg5 = (meep::field_rfunction) 0 ;
  void *arg6 = (void *) 0 ;
  meep::volume *arg7 = 0 ;
  meep::h5file *arg8 = (meep::h5file *) 0 ;
  bool arg9 ;
  bool arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res6 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:fields_output_hdf5",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_hdf5" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_output_hdf5" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_meep__component, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_output_hdf5" "', argument " "4"" of type '" "meep::component const *""'"); 
  }
  arg4 = reinterpret_cast< meep::component * >(argp4);
  {
    int res = SWIG_ConvertFunctionPtr(obj4, (void**)(&arg5), SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fields_output_hdf5" "', argument " "5"" of type '" "meep::field_rfunction""'"); 
    }
  }
  res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6), 0, 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fields_output_hdf5" "', argument " "6"" of type '" "void *""'"); 
  }
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_output_hdf5" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_hdf5" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  arg7 = reinterpret_cast< meep::volume * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "fields_output_hdf5" "', argument " "8"" of type '" "meep::h5file *""'"); 
  }
  arg8 = reinterpret_cast< meep::h5file * >(argp8);
  ecode9 = SWIG_AsVal_bool(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "fields_output_hdf5" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  ecode10 = SWIG_AsVal_bool(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "fields_output_hdf5" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  (arg1)->output_hdf5((char const *)arg2,arg3,(meep::component const *)arg4,arg5,arg6,(meep::volume const &)*arg7,arg8,arg9,arg10);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_hdf5__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  meep::component *arg4 = (meep::component *) 0 ;
  meep::field_rfunction arg5 = (meep::field_rfunction) 0 ;
  void *arg6 = (void *) 0 ;
  meep::volume *arg7 = 0 ;
  meep::h5file *arg8 = (meep::h5file *) 0 ;
  bool arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res6 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:fields_output_hdf5",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_hdf5" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_output_hdf5" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_meep__component, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_output_hdf5" "', argument " "4"" of type '" "meep::component const *""'"); 
  }
  arg4 = reinterpret_cast< meep::component * >(argp4);
  {
    int res = SWIG_ConvertFunctionPtr(obj4, (void**)(&arg5), SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fields_output_hdf5" "', argument " "5"" of type '" "meep::field_rfunction""'"); 
    }
  }
  res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6), 0, 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fields_output_hdf5" "', argument " "6"" of type '" "void *""'"); 
  }
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_output_hdf5" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_hdf5" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  arg7 = reinterpret_cast< meep::volume * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "fields_output_hdf5" "', argument " "8"" of type '" "meep::h5file *""'"); 
  }
  arg8 = reinterpret_cast< meep::h5file * >(argp8);
  ecode9 = SWIG_AsVal_bool(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "fields_output_hdf5" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  (arg1)->output_hdf5((char const *)arg2,arg3,(meep::component const *)arg4,arg5,arg6,(meep::volume const &)*arg7,arg8,arg9);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_hdf5__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  meep::component *arg4 = (meep::component *) 0 ;
  meep::field_rfunction arg5 = (meep::field_rfunction) 0 ;
  void *arg6 = (void *) 0 ;
  meep::volume *arg7 = 0 ;
  meep::h5file *arg8 = (meep::h5file *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res6 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:fields_output_hdf5",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_hdf5" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_output_hdf5" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_meep__component, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_output_hdf5" "', argument " "4"" of type '" "meep::component const *""'"); 
  }
  arg4 = reinterpret_cast< meep::component * >(argp4);
  {
    int res = SWIG_ConvertFunctionPtr(obj4, (void**)(&arg5), SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fields_output_hdf5" "', argument " "5"" of type '" "meep::field_rfunction""'"); 
    }
  }
  res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6), 0, 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fields_output_hdf5" "', argument " "6"" of type '" "void *""'"); 
  }
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_output_hdf5" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_hdf5" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  arg7 = reinterpret_cast< meep::volume * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "fields_output_hdf5" "', argument " "8"" of type '" "meep::h5file *""'"); 
  }
  arg8 = reinterpret_cast< meep::h5file * >(argp8);
  (arg1)->output_hdf5((char const *)arg2,arg3,(meep::component const *)arg4,arg5,arg6,(meep::volume const &)*arg7,arg8);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_hdf5__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  meep::component *arg4 = (meep::component *) 0 ;
  meep::field_rfunction arg5 = (meep::field_rfunction) 0 ;
  void *arg6 = (void *) 0 ;
  meep::volume *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res6 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:fields_output_hdf5",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_hdf5" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_output_hdf5" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_meep__component, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_output_hdf5" "', argument " "4"" of type '" "meep::component const *""'"); 
  }
  arg4 = reinterpret_cast< meep::component * >(argp4);
  {
    int res = SWIG_ConvertFunctionPtr(obj4, (void**)(&arg5), SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fields_output_hdf5" "', argument " "5"" of type '" "meep::field_rfunction""'"); 
    }
  }
  res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6), 0, 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fields_output_hdf5" "', argument " "6"" of type '" "void *""'"); 
  }
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_output_hdf5" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_hdf5" "', argument " "7"" of type '" "meep::volume const &""'"); 
  }
  arg7 = reinterpret_cast< meep::volume * >(argp7);
  (arg1)->output_hdf5((char const *)arg2,arg3,(meep::component const *)arg4,arg5,arg6,(meep::volume const &)*arg7);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_hdf5__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::volume *arg3 = 0 ;
  meep::h5file *arg4 = (meep::h5file *) 0 ;
  bool arg5 ;
  bool arg6 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:fields_output_hdf5",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_hdf5" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_output_hdf5" "', argument " "4"" of type '" "meep::h5file *""'"); 
  }
  arg4 = reinterpret_cast< meep::h5file * >(argp4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_output_hdf5" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_output_hdf5" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  res7 = SWIG_AsCharPtrAndSize(obj6, &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_output_hdf5" "', argument " "7"" of type '" "char const *""'");
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->output_hdf5(arg2,(meep::volume const &)*arg3,arg4,arg5,arg6,(char const *)arg7);
  resultobj = SWIG_Py_Void();
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return resultobj;
fail:
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_hdf5__SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::volume *arg3 = 0 ;
  meep::h5file *arg4 = (meep::h5file *) 0 ;
  bool arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:fields_output_hdf5",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_hdf5" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_output_hdf5" "', argument " "4"" of type '" "meep::h5file *""'"); 
  }
  arg4 = reinterpret_cast< meep::h5file * >(argp4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_output_hdf5" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_output_hdf5" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  (arg1)->output_hdf5(arg2,(meep::volume const &)*arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_hdf5__SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::volume *arg3 = 0 ;
  meep::h5file *arg4 = (meep::h5file *) 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:fields_output_hdf5",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_hdf5" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_output_hdf5" "', argument " "4"" of type '" "meep::h5file *""'"); 
  }
  arg4 = reinterpret_cast< meep::h5file * >(argp4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_output_hdf5" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  (arg1)->output_hdf5(arg2,(meep::volume const &)*arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_hdf5__SWIG_17(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::volume *arg3 = 0 ;
  meep::h5file *arg4 = (meep::h5file *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fields_output_hdf5",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_hdf5" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_output_hdf5" "', argument " "4"" of type '" "meep::h5file *""'"); 
  }
  arg4 = reinterpret_cast< meep::h5file * >(argp4);
  (arg1)->output_hdf5(arg2,(meep::volume const &)*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_hdf5__SWIG_18(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::volume *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_output_hdf5",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_hdf5" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  (arg1)->output_hdf5(arg2,(meep::volume const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_hdf5__SWIG_19(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::derived_component arg2 ;
  meep::volume *arg3 = 0 ;
  meep::h5file *arg4 = (meep::h5file *) 0 ;
  bool arg5 ;
  bool arg6 ;
  char *arg7 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:fields_output_hdf5",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_hdf5" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::derived_component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_output_hdf5" "', argument " "4"" of type '" "meep::h5file *""'"); 
  }
  arg4 = reinterpret_cast< meep::h5file * >(argp4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_output_hdf5" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_output_hdf5" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  res7 = SWIG_AsCharPtrAndSize(obj6, &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_output_hdf5" "', argument " "7"" of type '" "char const *""'");
  }
  arg7 = reinterpret_cast< char * >(buf7);
  (arg1)->output_hdf5(arg2,(meep::volume const &)*arg3,arg4,arg5,arg6,(char const *)arg7);
  resultobj = SWIG_Py_Void();
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return resultobj;
fail:
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_hdf5__SWIG_20(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::derived_component arg2 ;
  meep::volume *arg3 = 0 ;
  meep::h5file *arg4 = (meep::h5file *) 0 ;
  bool arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:fields_output_hdf5",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_hdf5" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::derived_component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_output_hdf5" "', argument " "4"" of type '" "meep::h5file *""'"); 
  }
  arg4 = reinterpret_cast< meep::h5file * >(argp4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_output_hdf5" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_output_hdf5" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  (arg1)->output_hdf5(arg2,(meep::volume const &)*arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_hdf5__SWIG_21(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::derived_component arg2 ;
  meep::volume *arg3 = 0 ;
  meep::h5file *arg4 = (meep::h5file *) 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:fields_output_hdf5",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_hdf5" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::derived_component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_output_hdf5" "', argument " "4"" of type '" "meep::h5file *""'"); 
  }
  arg4 = reinterpret_cast< meep::h5file * >(argp4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_output_hdf5" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  (arg1)->output_hdf5(arg2,(meep::volume const &)*arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_hdf5__SWIG_22(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::derived_component arg2 ;
  meep::volume *arg3 = 0 ;
  meep::h5file *arg4 = (meep::h5file *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fields_output_hdf5",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_hdf5" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::derived_component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_meep__h5file, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_output_hdf5" "', argument " "4"" of type '" "meep::h5file *""'"); 
  }
  arg4 = reinterpret_cast< meep::h5file * >(argp4);
  (arg1)->output_hdf5(arg2,(meep::volume const &)*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_hdf5__SWIG_23(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::derived_component arg2 ;
  meep::volume *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_output_hdf5",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_hdf5" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::derived_component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_hdf5" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  (arg1)->output_hdf5(arg2,(meep::volume const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_hdf5(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[12] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 11) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_fields_output_hdf5__SWIG_18(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) >= 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_fields_output_hdf5__SWIG_23(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) >= 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_meep__h5file, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_fields_output_hdf5__SWIG_22(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_meep__h5file, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_fields_output_hdf5__SWIG_17(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PySequence_Check(argv[2]) &&
          PySequence_Check(PyList_GetItem(argv[2], 0)) &&
          PyCallable_Check(PyList_GetItem(argv[2], 1));
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__volume, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_fields_output_hdf5__SWIG_8(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) >= 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_meep__h5file, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_fields_output_hdf5__SWIG_21(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_meep__h5file, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_fields_output_hdf5__SWIG_16(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PySequence_Check(argv[2]) &&
          PySequence_Check(PyList_GetItem(argv[2], 0)) &&
          PyCallable_Check(PyList_GetItem(argv[2], 1));
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__volume, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_meep__h5file, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_fields_output_hdf5__SWIG_7(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) >= 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_meep__h5file, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_fields_output_hdf5__SWIG_20(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__h5file, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = PySequence_Check(argv[3]) &&
            PySequence_Check(PyList_GetItem(argv[3], 0)) &&
            PyCallable_Check(PyList_GetItem(argv[3], 1));
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_meep__volume, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_fields_output_hdf5__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_meep__h5file, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_fields_output_hdf5__SWIG_15(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PySequence_Check(argv[2]) &&
          PySequence_Check(PyList_GetItem(argv[2], 0)) &&
          PyCallable_Check(PyList_GetItem(argv[2], 1));
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__volume, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_meep__h5file, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_fields_output_hdf5__SWIG_6(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) >= 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_meep__h5file, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_fields_output_hdf5__SWIG_19(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__h5file, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = PySequence_Check(argv[3]) &&
            PySequence_Check(PyList_GetItem(argv[3], 0)) &&
            PyCallable_Check(PyList_GetItem(argv[3], 1));
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_meep__volume, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_fields_output_hdf5__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_meep__h5file, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_fields_output_hdf5__SWIG_14(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PySequence_Check(argv[2]) &&
          PySequence_Check(PyList_GetItem(argv[2], 0)) &&
          PyCallable_Check(PyList_GetItem(argv[2], 1));
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__volume, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_meep__h5file, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_fields_output_hdf5__SWIG_5(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_meep__component, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *ptr = 0;
            int res = SWIG_ConvertFunctionPtr(argv[4], &ptr, SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *ptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &ptr, 0, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_meep__volume, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_fields_output_hdf5__SWIG_13(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__h5file, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = PySequence_Check(argv[3]) &&
            PySequence_Check(PyList_GetItem(argv[3], 0)) &&
            PyCallable_Check(PyList_GetItem(argv[3], 1));
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_meep__volume, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_bool(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_fields_output_hdf5__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PySequence_Check(argv[2]) &&
          PySequence_Check(PyList_GetItem(argv[2], 0)) &&
          PyCallable_Check(PyList_GetItem(argv[2], 1));
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__volume, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_meep__h5file, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_fields_output_hdf5__SWIG_4(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_meep__component, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *ptr = 0;
            int res = SWIG_ConvertFunctionPtr(argv[4], &ptr, SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *ptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &ptr, 0, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_meep__volume, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_meep__h5file, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_fields_output_hdf5__SWIG_12(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PySequence_Check(argv[2]) &&
          PySequence_Check(PyList_GetItem(argv[2], 0)) &&
          PyCallable_Check(PyList_GetItem(argv[2], 1));
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__volume, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_meep__h5file, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_AsCharPtrAndSize(argv[7], 0, NULL, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    {
                      int res = SWIG_AsVal_bool(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_fields_output_hdf5__SWIG_3(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_meep__component, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *ptr = 0;
            int res = SWIG_ConvertFunctionPtr(argv[4], &ptr, SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *ptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &ptr, 0, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_meep__volume, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_meep__h5file, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    {
                      int res = SWIG_AsVal_bool(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_fields_output_hdf5__SWIG_11(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_meep__component, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *ptr = 0;
            int res = SWIG_ConvertFunctionPtr(argv[4], &ptr, SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *ptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &ptr, 0, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_meep__volume, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_meep__h5file, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    {
                      int res = SWIG_AsVal_bool(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_bool(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        return _wrap_fields_output_hdf5__SWIG_10(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_meep__component, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *ptr = 0;
            int res = SWIG_ConvertFunctionPtr(argv[4], &ptr, SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *ptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &ptr, 0, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_meep__volume, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_meep__h5file, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    {
                      int res = SWIG_AsVal_bool(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_bool(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        int res = SWIG_AsCharPtrAndSize(argv[10], 0, NULL, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          return _wrap_fields_output_hdf5__SWIG_9(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_output_hdf5'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::output_hdf5(meep::h5file *,char const *,int,meep::component const *,meep::field_function,void *,int,meep::volume const &,bool,bool)\n"
    "    meep::fields::output_hdf5(meep::h5file *,char const *,int,meep::component const *,meep::field_function,void *,int,meep::volume const &,bool)\n"
    "    meep::fields::output_hdf5(meep::h5file *,char const *,int,meep::component const *,meep::field_function,void *,int,meep::volume const &)\n"
    "    meep::fields::output_hdf5(char const *,int,meep::component const *,meep::field_function,void *,meep::volume const &,meep::h5file *,bool,bool,char const *,bool)\n"
    "    meep::fields::output_hdf5(char const *,int,meep::component const *,meep::field_function,void *,meep::volume const &,meep::h5file *,bool,bool,char const *)\n"
    "    meep::fields::output_hdf5(char const *,int,meep::component const *,meep::field_function,void *,meep::volume const &,meep::h5file *,bool,bool)\n"
    "    meep::fields::output_hdf5(char const *,int,meep::component const *,meep::field_function,void *,meep::volume const &,meep::h5file *,bool)\n"
    "    meep::fields::output_hdf5(char const *,int,meep::component const *,meep::field_function,void *,meep::volume const &,meep::h5file *)\n"
    "    meep::fields::output_hdf5(char const *,int,meep::component const *,meep::field_function,void *,meep::volume const &)\n"
    "    meep::fields::output_hdf5(char const *,int,meep::component const *,meep::field_rfunction,void *,meep::volume const &,meep::h5file *,bool,bool,char const *)\n"
    "    meep::fields::output_hdf5(char const *,int,meep::component const *,meep::field_rfunction,void *,meep::volume const &,meep::h5file *,bool,bool)\n"
    "    meep::fields::output_hdf5(char const *,int,meep::component const *,meep::field_rfunction,void *,meep::volume const &,meep::h5file *,bool)\n"
    "    meep::fields::output_hdf5(char const *,int,meep::component const *,meep::field_rfunction,void *,meep::volume const &,meep::h5file *)\n"
    "    meep::fields::output_hdf5(char const *,int,meep::component const *,meep::field_rfunction,void *,meep::volume const &)\n"
    "    meep::fields::output_hdf5(meep::component,meep::volume const &,meep::h5file *,bool,bool,char const *)\n"
    "    meep::fields::output_hdf5(meep::component,meep::volume const &,meep::h5file *,bool,bool)\n"
    "    meep::fields::output_hdf5(meep::component,meep::volume const &,meep::h5file *,bool)\n"
    "    meep::fields::output_hdf5(meep::component,meep::volume const &,meep::h5file *)\n"
    "    meep::fields::output_hdf5(meep::component,meep::volume const &)\n"
    "    meep::fields::output_hdf5(meep::derived_component,meep::volume const &,meep::h5file *,bool,bool,char const *)\n"
    "    meep::fields::output_hdf5(meep::derived_component,meep::volume const &,meep::h5file *,bool,bool)\n"
    "    meep::fields::output_hdf5(meep::derived_component,meep::volume const &,meep::h5file *,bool)\n"
    "    meep::fields::output_hdf5(meep::derived_component,meep::volume const &,meep::h5file *)\n"
    "    meep::fields::output_hdf5(meep::derived_component,meep::volume const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_open_h5file__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  char *arg2 = (char *) 0 ;
  meep::h5file::access_mode arg3 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  meep::h5file *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:fields_open_h5file",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_open_h5file" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_open_h5file" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_open_h5file" "', argument " "3"" of type '" "meep::h5file::access_mode""'");
  } 
  arg3 = static_cast< meep::h5file::access_mode >(val3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_open_h5file" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_open_h5file" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (meep::h5file *)(arg1)->open_h5file((char const *)arg2,arg3,(char const *)arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__h5file, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_open_h5file__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  char *arg2 = (char *) 0 ;
  meep::h5file::access_mode arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  meep::h5file *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fields_open_h5file",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_open_h5file" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_open_h5file" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_open_h5file" "', argument " "3"" of type '" "meep::h5file::access_mode""'");
  } 
  arg3 = static_cast< meep::h5file::access_mode >(val3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_open_h5file" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (meep::h5file *)(arg1)->open_h5file((char const *)arg2,arg3,(char const *)arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__h5file, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_open_h5file__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  char *arg2 = (char *) 0 ;
  meep::h5file::access_mode arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::h5file *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_open_h5file",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_open_h5file" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_open_h5file" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_open_h5file" "', argument " "3"" of type '" "meep::h5file::access_mode""'");
  } 
  arg3 = static_cast< meep::h5file::access_mode >(val3);
  result = (meep::h5file *)(arg1)->open_h5file((char const *)arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__h5file, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_open_h5file__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::h5file *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_open_h5file",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_open_h5file" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_open_h5file" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (meep::h5file *)(arg1)->open_h5file((char const *)arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__h5file, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_open_h5file(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_fields_open_h5file__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_fields_open_h5file__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_fields_open_h5file__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_fields_open_h5file__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_open_h5file'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::open_h5file(char const *,meep::h5file::access_mode,char const *,bool)\n"
    "    meep::fields::open_h5file(char const *,meep::h5file::access_mode,char const *)\n"
    "    meep::fields::open_h5file(char const *,meep::h5file::access_mode)\n"
    "    meep::fields::open_h5file(char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_h5file_name__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fields_h5file_name",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_h5file_name" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_h5file_name" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_h5file_name" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_h5file_name" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (char *)(arg1)->h5file_name((char const *)arg2,(char const *)arg3,arg4);
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_h5file_name__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_h5file_name",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_h5file_name" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_h5file_name" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_h5file_name" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (char *)(arg1)->h5file_name((char const *)arg2,(char const *)arg3);
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_h5file_name__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_h5file_name",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_h5file_name" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_h5file_name" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (char *)(arg1)->h5file_name((char const *)arg2);
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_h5file_name(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_fields_h5file_name__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_fields_h5file_name__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_fields_h5file_name__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_h5file_name'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::h5file_name(char const *,char const *,bool)\n"
    "    meep::fields::h5file_name(char const *,char const *)\n"
    "    meep::fields::h5file_name(char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_get_array_slice_dimensions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume *arg2 = 0 ;
  size_t *arg3 ;
  void *arg4 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fields_get_array_slice_dimensions",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_array_slice_dimensions" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_array_slice_dimensions" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_array_slice_dimensions" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  {
    arg3 = (size_t *)array_data(obj2);
  }
  res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_get_array_slice_dimensions" "', argument " "4"" of type '" "void *""'"); 
  }
  result = (int)(arg1)->get_array_slice_dimensions((meep::volume const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_array_slice_dimensions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume *arg2 = 0 ;
  size_t *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_get_array_slice_dimensions",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_array_slice_dimensions" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_array_slice_dimensions" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_array_slice_dimensions" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  {
    arg3 = (size_t *)array_data(obj2);
  }
  result = (int)(arg1)->get_array_slice_dimensions((meep::volume const &)*arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_array_slice_dimensions(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__volume, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = is_array(argv[2]);
        }
        if (_v) {
          return _wrap_fields_get_array_slice_dimensions__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__volume, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = is_array(argv[2]);
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &ptr, 0, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_fields_get_array_slice_dimensions__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_get_array_slice_dimensions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::get_array_slice_dimensions(meep::volume const &,size_t [3],void *)\n"
    "    meep::fields::get_array_slice_dimensions(meep::volume const &,size_t [3])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_get_array_slice__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume *arg2 = 0 ;
  SwigValueWrapper< std::vector< enum meep::component,std::allocator< enum meep::component > > > arg3 ;
  meep::field_rfunction arg4 = (meep::field_rfunction) 0 ;
  void *arg5 = (void *) 0 ;
  double *arg6 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int res5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:fields_get_array_slice",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_array_slice" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_array_slice" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_array_slice" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_meep__component_std__allocatorT_meep__component_t_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_get_array_slice" "', argument " "3"" of type '" "std::vector< meep::component,std::allocator< meep::component > >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_array_slice" "', argument " "3"" of type '" "std::vector< meep::component,std::allocator< meep::component > >""'");
    } else {
      std::vector< meep::component,std::allocator< meep::component > > * temp = reinterpret_cast< std::vector< meep::component,std::allocator< meep::component > > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(obj3, (void**)(&arg4), SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fields_get_array_slice" "', argument " "4"" of type '" "meep::field_rfunction""'"); 
    }
  }
  res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "fields_get_array_slice" "', argument " "5"" of type '" "void *""'"); 
  }
  {
    arg6 = (double *)array_data(obj5);
  }
  result = (double *)(arg1)->get_array_slice((meep::volume const &)*arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_array_slice__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume *arg2 = 0 ;
  SwigValueWrapper< std::vector< enum meep::component,std::allocator< enum meep::component > > > arg3 ;
  meep::field_rfunction arg4 = (meep::field_rfunction) 0 ;
  void *arg5 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int res5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:fields_get_array_slice",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_array_slice" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_array_slice" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_array_slice" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_meep__component_std__allocatorT_meep__component_t_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_get_array_slice" "', argument " "3"" of type '" "std::vector< meep::component,std::allocator< meep::component > >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_array_slice" "', argument " "3"" of type '" "std::vector< meep::component,std::allocator< meep::component > >""'");
    } else {
      std::vector< meep::component,std::allocator< meep::component > > * temp = reinterpret_cast< std::vector< meep::component,std::allocator< meep::component > > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(obj3, (void**)(&arg4), SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fields_get_array_slice" "', argument " "4"" of type '" "meep::field_rfunction""'"); 
    }
  }
  res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "fields_get_array_slice" "', argument " "5"" of type '" "void *""'"); 
  }
  result = (double *)(arg1)->get_array_slice((meep::volume const &)*arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_complex_array_slice__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume *arg2 = 0 ;
  SwigValueWrapper< std::vector< enum meep::component,std::allocator< enum meep::component > > > arg3 ;
  meep::field_function arg4 = (meep::field_function) 0 ;
  void *arg5 = (void *) 0 ;
  std::complex< double > *arg6 = (std::complex< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int res5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:fields_get_complex_array_slice",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_complex_array_slice" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_complex_array_slice" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_complex_array_slice" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_meep__component_std__allocatorT_meep__component_t_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_get_complex_array_slice" "', argument " "3"" of type '" "std::vector< meep::component,std::allocator< meep::component > >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_complex_array_slice" "', argument " "3"" of type '" "std::vector< meep::component,std::allocator< meep::component > >""'");
    } else {
      std::vector< meep::component,std::allocator< meep::component > > * temp = reinterpret_cast< std::vector< meep::component,std::allocator< meep::component > > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(obj3, (void**)(&arg4), SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__std__complexT_double_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fields_get_complex_array_slice" "', argument " "4"" of type '" "meep::field_function""'"); 
    }
  }
  res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "fields_get_complex_array_slice" "', argument " "5"" of type '" "void *""'"); 
  }
  {
    arg6 = (std::complex<double> *)array_data(obj5);
  }
  result = (std::complex< double > *)(arg1)->get_complex_array_slice((meep::volume const &)*arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_complex_array_slice__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume *arg2 = 0 ;
  SwigValueWrapper< std::vector< enum meep::component,std::allocator< enum meep::component > > > arg3 ;
  meep::field_function arg4 = (meep::field_function) 0 ;
  void *arg5 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int res5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:fields_get_complex_array_slice",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_complex_array_slice" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_complex_array_slice" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_complex_array_slice" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_meep__component_std__allocatorT_meep__component_t_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_get_complex_array_slice" "', argument " "3"" of type '" "std::vector< meep::component,std::allocator< meep::component > >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_complex_array_slice" "', argument " "3"" of type '" "std::vector< meep::component,std::allocator< meep::component > >""'");
    } else {
      std::vector< meep::component,std::allocator< meep::component > > * temp = reinterpret_cast< std::vector< meep::component,std::allocator< meep::component > > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(obj3, (void**)(&arg4), SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__std__complexT_double_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fields_get_complex_array_slice" "', argument " "4"" of type '" "meep::field_function""'"); 
    }
  }
  res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "fields_get_complex_array_slice" "', argument " "5"" of type '" "void *""'"); 
  }
  result = (std::complex< double > *)(arg1)->get_complex_array_slice((meep::volume const &)*arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_array_slice__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume *arg2 = 0 ;
  meep::component arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fields_get_array_slice",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_array_slice" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_array_slice" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_array_slice" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  {
    arg3 = static_cast<meep::component>(PyInteger_AsLong(obj2));
  }
  {
    arg4 = (double *)array_data(obj3);
  }
  result = (double *)(arg1)->get_array_slice((meep::volume const &)*arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_array_slice__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume *arg2 = 0 ;
  meep::component arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_get_array_slice",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_array_slice" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_array_slice" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_array_slice" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  {
    arg3 = static_cast<meep::component>(PyInteger_AsLong(obj2));
  }
  result = (double *)(arg1)->get_array_slice((meep::volume const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_array_slice__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume *arg2 = 0 ;
  meep::derived_component arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fields_get_array_slice",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_array_slice" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_array_slice" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_array_slice" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  {
    arg3 = static_cast<meep::derived_component>(PyInteger_AsLong(obj2));
  }
  {
    arg4 = (double *)array_data(obj3);
  }
  result = (double *)(arg1)->get_array_slice((meep::volume const &)*arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_array_slice__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume *arg2 = 0 ;
  meep::derived_component arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_get_array_slice",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_array_slice" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_array_slice" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_array_slice" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  {
    arg3 = static_cast<meep::derived_component>(PyInteger_AsLong(obj2));
  }
  result = (double *)(arg1)->get_array_slice((meep::volume const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_array_slice(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__volume, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PyInteger_Check(argv[2]) && PyInteger_AsLong(argv[2]) < 100;
        }
        if (_v) {
          return _wrap_fields_get_array_slice__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__volume, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PyInteger_Check(argv[2]) && PyInteger_AsLong(argv[2]) >= 100;
        }
        if (_v) {
          return _wrap_fields_get_array_slice__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__volume, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PyInteger_Check(argv[2]) && PyInteger_AsLong(argv[2]) >= 100;
        }
        if (_v) {
          {
            _v = is_array(argv[3]);
          }
          if (_v) {
            return _wrap_fields_get_array_slice__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__volume, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PyInteger_Check(argv[2]) && PyInteger_AsLong(argv[2]) < 100;
        }
        if (_v) {
          {
            _v = is_array(argv[3]);
          }
          if (_v) {
            return _wrap_fields_get_array_slice__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__volume, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_meep__component_std__allocatorT_meep__component_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *ptr = 0;
          int res = SWIG_ConvertFunctionPtr(argv[3], &ptr, SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *ptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &ptr, 0, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_fields_get_array_slice__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__volume, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_meep__component_std__allocatorT_meep__component_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *ptr = 0;
          int res = SWIG_ConvertFunctionPtr(argv[3], &ptr, SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *ptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &ptr, 0, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                _v = is_array(argv[5]);
              }
              if (_v) {
                return _wrap_fields_get_array_slice__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_get_array_slice'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::get_array_slice(meep::volume const &,std::vector< meep::component,std::allocator< meep::component > >,meep::field_rfunction,void *,double *)\n"
    "    meep::fields::get_array_slice(meep::volume const &,std::vector< meep::component,std::allocator< meep::component > >,meep::field_rfunction,void *)\n"
    "    meep::fields::get_array_slice(meep::volume const &,meep::component,double *)\n"
    "    meep::fields::get_array_slice(meep::volume const &,meep::component)\n"
    "    meep::fields::get_array_slice(meep::volume const &,meep::derived_component,double *)\n"
    "    meep::fields::get_array_slice(meep::volume const &,meep::derived_component)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_get_complex_array_slice__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume *arg2 = 0 ;
  meep::component arg3 ;
  std::complex< double > *arg4 = (std::complex< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fields_get_complex_array_slice",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_complex_array_slice" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_complex_array_slice" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_complex_array_slice" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  {
    arg3 = static_cast<meep::component>(PyInteger_AsLong(obj2));
  }
  {
    arg4 = (std::complex<double> *)array_data(obj3);
  }
  result = (std::complex< double > *)(arg1)->get_complex_array_slice((meep::volume const &)*arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_complex_array_slice__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume *arg2 = 0 ;
  meep::component arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_get_complex_array_slice",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_complex_array_slice" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_complex_array_slice" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_complex_array_slice" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  {
    arg3 = static_cast<meep::component>(PyInteger_AsLong(obj2));
  }
  result = (std::complex< double > *)(arg1)->get_complex_array_slice((meep::volume const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_complex_array_slice(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__volume, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PyInteger_Check(argv[2]) && PyInteger_AsLong(argv[2]) < 100;
        }
        if (_v) {
          return _wrap_fields_get_complex_array_slice__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__volume, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PyInteger_Check(argv[2]) && PyInteger_AsLong(argv[2]) < 100;
        }
        if (_v) {
          {
            _v = is_array(argv[3]);
          }
          if (_v) {
            return _wrap_fields_get_complex_array_slice__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__volume, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_meep__component_std__allocatorT_meep__component_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *ptr = 0;
          int res = SWIG_ConvertFunctionPtr(argv[3], &ptr, SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__std__complexT_double_t);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *ptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &ptr, 0, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_fields_get_complex_array_slice__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__volume, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_meep__component_std__allocatorT_meep__component_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *ptr = 0;
          int res = SWIG_ConvertFunctionPtr(argv[3], &ptr, SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__std__complexT_double_t);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *ptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &ptr, 0, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                _v = is_array(argv[5]);
              }
              if (_v) {
                return _wrap_fields_get_complex_array_slice__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_get_complex_array_slice'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::get_complex_array_slice(meep::volume const &,std::vector< meep::component,std::allocator< meep::component > >,meep::field_function,void *,std::complex< double > *)\n"
    "    meep::fields::get_complex_array_slice(meep::volume const &,std::vector< meep::component,std::allocator< meep::component > >,meep::field_function,void *)\n"
    "    meep::fields::get_complex_array_slice(meep::volume const &,meep::component,std::complex< double > *)\n"
    "    meep::fields::get_complex_array_slice(meep::volume const &,meep::component)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_do_get_array_slice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume *arg2 = 0 ;
  SwigValueWrapper< std::vector< enum meep::component,std::allocator< enum meep::component > > > arg3 ;
  meep::field_function arg4 = (meep::field_function) 0 ;
  meep::field_rfunction arg5 = (meep::field_rfunction) 0 ;
  void *arg6 = (void *) 0 ;
  void *arg7 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int res6 ;
  int res7 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:fields_do_get_array_slice",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_do_get_array_slice" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_do_get_array_slice" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_do_get_array_slice" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_meep__component_std__allocatorT_meep__component_t_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_do_get_array_slice" "', argument " "3"" of type '" "std::vector< meep::component,std::allocator< meep::component > >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_do_get_array_slice" "', argument " "3"" of type '" "std::vector< meep::component,std::allocator< meep::component > >""'");
    } else {
      std::vector< meep::component,std::allocator< meep::component > > * temp = reinterpret_cast< std::vector< meep::component,std::allocator< meep::component > > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(obj3, (void**)(&arg4), SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__std__complexT_double_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fields_do_get_array_slice" "', argument " "4"" of type '" "meep::field_function""'"); 
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(obj4, (void**)(&arg5), SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fields_do_get_array_slice" "', argument " "5"" of type '" "meep::field_rfunction""'"); 
    }
  }
  res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6), 0, 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fields_do_get_array_slice" "', argument " "6"" of type '" "void *""'"); 
  }
  res7 = SWIG_ConvertPtr(obj6,SWIG_as_voidptrptr(&arg7), 0, 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_do_get_array_slice" "', argument " "7"" of type '" "void *""'"); 
  }
  result = (void *)(arg1)->do_get_array_slice((meep::volume const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_last_step_output_wall_time_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_last_step_output_wall_time_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_last_step_output_wall_time_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_last_step_output_wall_time_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->last_step_output_wall_time = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_last_step_output_wall_time_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_last_step_output_wall_time_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_last_step_output_wall_time_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (double) ((arg1)->last_step_output_wall_time);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_last_step_output_t_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_last_step_output_t_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_last_step_output_t_set" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_last_step_output_t_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->last_step_output_t = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_last_step_output_t_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_last_step_output_t_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_last_step_output_t_get" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (int) ((arg1)->last_step_output_t);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_step(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_step",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_step" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  (arg1)->step();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_round_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_round_time",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_round_time" "', argument " "1"" of type '" "meep::fields const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (double)((meep::fields const *)arg1)->round_time();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_time",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_time" "', argument " "1"" of type '" "meep::fields const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (double)((meep::fields const *)arg1)->time();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_solve_cw__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  double arg2 ;
  int arg3 ;
  std::complex< double > arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::complex< double > val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:fields_solve_cw",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_solve_cw" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_solve_cw" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_solve_cw" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_solve_cw" "', argument " "4"" of type '" "std::complex< double >""'");
  } 
  arg4 = static_cast< std::complex< double > >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_solve_cw" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (bool)(arg1)->solve_cw(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_solve_cw__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  double arg2 ;
  int arg3 ;
  std::complex< double > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::complex< double > val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fields_solve_cw",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_solve_cw" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_solve_cw" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_solve_cw" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_solve_cw" "', argument " "4"" of type '" "std::complex< double >""'");
  } 
  arg4 = static_cast< std::complex< double > >(val4);
  result = (bool)(arg1)->solve_cw(arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_solve_cw__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  double arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fields_solve_cw",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_solve_cw" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_solve_cw" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_solve_cw" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_solve_cw" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (bool)(arg1)->solve_cw(arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_solve_cw__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  double arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_solve_cw",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_solve_cw" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_solve_cw" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_solve_cw" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->solve_cw(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_solve_cw__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_solve_cw",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_solve_cw" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_solve_cw" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (bool)(arg1)->solve_cw(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_solve_cw__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_solve_cw",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_solve_cw" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (bool)(arg1)->solve_cw();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_solve_cw(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_fields_solve_cw__SWIG_5(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_fields_solve_cw__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_fields_solve_cw__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_fields_solve_cw__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_fields_solve_cw__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_fields_solve_cw__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_solve_cw'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::solve_cw(double,int,std::complex< double >,int)\n"
    "    meep::fields::solve_cw(double,int,std::complex< double >)\n"
    "    meep::fields::solve_cw(double,int,int)\n"
    "    meep::fields::solve_cw(double,int)\n"
    "    meep::fields::solve_cw(double)\n"
    "    meep::fields::solve_cw()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_last_source_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_last_source_time",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_last_source_time" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (double)(arg1)->last_source_time();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_point_source__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  meep::vec *arg7 = 0 ;
  std::complex< double > arg8 ;
  int arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  std::complex< double > val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:fields_add_point_source",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_point_source" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_add_point_source" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_add_point_source" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_add_point_source" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_add_point_source" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_add_point_source" "', argument " "7"" of type '" "meep::vec const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_point_source" "', argument " "7"" of type '" "meep::vec const &""'"); 
  }
  arg7 = reinterpret_cast< meep::vec * >(argp7);
  ecode8 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fields_add_point_source" "', argument " "8"" of type '" "std::complex< double >""'");
  } 
  arg8 = static_cast< std::complex< double > >(val8);
  ecode9 = SWIG_AsVal_int(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "fields_add_point_source" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  (arg1)->add_point_source(arg2,arg3,arg4,arg5,arg6,(meep::vec const &)*arg7,arg8,arg9);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_point_source__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  meep::vec *arg7 = 0 ;
  std::complex< double > arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  std::complex< double > val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:fields_add_point_source",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_point_source" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_add_point_source" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_add_point_source" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_add_point_source" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_add_point_source" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_add_point_source" "', argument " "7"" of type '" "meep::vec const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_point_source" "', argument " "7"" of type '" "meep::vec const &""'"); 
  }
  arg7 = reinterpret_cast< meep::vec * >(argp7);
  ecode8 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fields_add_point_source" "', argument " "8"" of type '" "std::complex< double >""'");
  } 
  arg8 = static_cast< std::complex< double > >(val8);
  (arg1)->add_point_source(arg2,arg3,arg4,arg5,arg6,(meep::vec const &)*arg7,arg8);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_point_source__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  meep::vec *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:fields_add_point_source",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_point_source" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_add_point_source" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_add_point_source" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_add_point_source" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_add_point_source" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_add_point_source" "', argument " "7"" of type '" "meep::vec const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_point_source" "', argument " "7"" of type '" "meep::vec const &""'"); 
  }
  arg7 = reinterpret_cast< meep::vec * >(argp7);
  (arg1)->add_point_source(arg2,arg3,arg4,arg5,arg6,(meep::vec const &)*arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_point_source__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::src_time *arg3 = 0 ;
  meep::vec *arg4 = 0 ;
  std::complex< double > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  std::complex< double > val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:fields_add_point_source",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_point_source" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  {
    PyObject *swig_obj = NULL;
    void *tmp_ptr = 0;
    int tmp_res = 0;
    
    if(PyObject_IsInstance(obj2, py_source_time_object())) {
      swig_obj = PyObject_GetAttrString(obj2, "swigobj");
    } else if(PyObject_IsInstance(obj2, py_meep_src_time_object())) {
      swig_obj = obj2;
      Py_XINCREF(swig_obj);
    } else {
      PyErr_SetString(PyExc_TypeError, "Expected a meep.source.SourceTime or a meep.src_time\n");
      SWIG_fail;
    }
    
    tmp_res = SWIG_ConvertPtr(swig_obj, &tmp_ptr, SWIGTYPE_p_meep__src_time, 0);
    Py_XDECREF(swig_obj);
    
    if(!SWIG_IsOK(tmp_res)) {
      SWIG_exception_fail(SWIG_ArgError(tmp_res), "Couldn't convert Python object to meep::src_time");
    }
    arg3 = reinterpret_cast<meep::src_time *>(tmp_ptr);
    
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_add_point_source" "', argument " "4"" of type '" "meep::vec const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_point_source" "', argument " "4"" of type '" "meep::vec const &""'"); 
  }
  arg4 = reinterpret_cast< meep::vec * >(argp4);
  ecode5 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_add_point_source" "', argument " "5"" of type '" "std::complex< double >""'");
  } 
  arg5 = static_cast< std::complex< double > >(val5);
  (arg1)->add_point_source(arg2,(meep::src_time const &)*arg3,(meep::vec const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_point_source__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::src_time *arg3 = 0 ;
  meep::vec *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fields_add_point_source",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_point_source" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  {
    PyObject *swig_obj = NULL;
    void *tmp_ptr = 0;
    int tmp_res = 0;
    
    if(PyObject_IsInstance(obj2, py_source_time_object())) {
      swig_obj = PyObject_GetAttrString(obj2, "swigobj");
    } else if(PyObject_IsInstance(obj2, py_meep_src_time_object())) {
      swig_obj = obj2;
      Py_XINCREF(swig_obj);
    } else {
      PyErr_SetString(PyExc_TypeError, "Expected a meep.source.SourceTime or a meep.src_time\n");
      SWIG_fail;
    }
    
    tmp_res = SWIG_ConvertPtr(swig_obj, &tmp_ptr, SWIGTYPE_p_meep__src_time, 0);
    Py_XDECREF(swig_obj);
    
    if(!SWIG_IsOK(tmp_res)) {
      SWIG_exception_fail(SWIG_ArgError(tmp_res), "Couldn't convert Python object to meep::src_time");
    }
    arg3 = reinterpret_cast<meep::src_time *>(tmp_ptr);
    
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_add_point_source" "', argument " "4"" of type '" "meep::vec const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_point_source" "', argument " "4"" of type '" "meep::vec const &""'"); 
  }
  arg4 = reinterpret_cast< meep::vec * >(argp4);
  (arg1)->add_point_source(arg2,(meep::src_time const &)*arg3,(meep::vec const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_point_source(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        {
          int py_source_time = PyObject_IsInstance(argv[2], py_source_time_object());
          int swig_src_time = PyObject_IsInstance(argv[2], py_meep_src_time_object());
          
          _v = py_source_time || swig_src_time;
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__vec, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_fields_add_point_source__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        {
          int py_source_time = PyObject_IsInstance(argv[2], py_source_time_object());
          int swig_src_time = PyObject_IsInstance(argv[2], py_meep_src_time_object());
          
          _v = py_source_time || swig_src_time;
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__vec, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_fields_add_point_source__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_meep__vec, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_fields_add_point_source__SWIG_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_meep__vec, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_fields_add_point_source__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_meep__vec, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_int(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_fields_add_point_source__SWIG_0(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_add_point_source'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::add_point_source(meep::component,double,double,double,double,meep::vec const &,std::complex< double >,int)\n"
    "    meep::fields::add_point_source(meep::component,double,double,double,double,meep::vec const &,std::complex< double >)\n"
    "    meep::fields::add_point_source(meep::component,double,double,double,double,meep::vec const &)\n"
    "    meep::fields::add_point_source(meep::component,meep::src_time const &,meep::vec const &,std::complex< double >)\n"
    "    meep::fields::add_point_source(meep::component,meep::src_time const &,meep::vec const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_add_volume_source__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::src_time *arg3 = 0 ;
  meep::volume *arg4 = 0 ;
  std::complex< double > (*arg5)(meep::vec const &) = (std::complex< double > (*)(meep::vec const &)) 0 ;
  std::complex< double > arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  std::complex< double > val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:fields_add_volume_source",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_volume_source" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  {
    PyObject *swig_obj = NULL;
    void *tmp_ptr = 0;
    int tmp_res = 0;
    
    if(PyObject_IsInstance(obj2, py_source_time_object())) {
      swig_obj = PyObject_GetAttrString(obj2, "swigobj");
    } else if(PyObject_IsInstance(obj2, py_meep_src_time_object())) {
      swig_obj = obj2;
      Py_XINCREF(swig_obj);
    } else {
      PyErr_SetString(PyExc_TypeError, "Expected a meep.source.SourceTime or a meep.src_time\n");
      SWIG_fail;
    }
    
    tmp_res = SWIG_ConvertPtr(swig_obj, &tmp_ptr, SWIGTYPE_p_meep__src_time, 0);
    Py_XDECREF(swig_obj);
    
    if(!SWIG_IsOK(tmp_res)) {
      SWIG_exception_fail(SWIG_ArgError(tmp_res), "Couldn't convert Python object to meep::src_time");
    }
    arg3 = reinterpret_cast<meep::src_time *>(tmp_ptr);
    
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_add_volume_source" "', argument " "4"" of type '" "meep::volume const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_volume_source" "', argument " "4"" of type '" "meep::volume const &""'"); 
  }
  arg4 = reinterpret_cast< meep::volume * >(argp4);
  {
    arg5 = py_amp_func_wrap;
    py_amp_func = obj4;
    Py_INCREF(py_amp_func);
  }
  ecode6 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_add_volume_source" "', argument " "6"" of type '" "std::complex< double >""'");
  } 
  arg6 = static_cast< std::complex< double > >(val6);
  (arg1)->add_volume_source(arg2,(meep::src_time const &)*arg3,(meep::volume const &)*arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  {
    Py_XDECREF(py_amp_func);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_amp_func);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_volume_source__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::src_time *arg3 = 0 ;
  meep::volume *arg4 = 0 ;
  std::complex< double > (*arg5)(meep::vec const &) = (std::complex< double > (*)(meep::vec const &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:fields_add_volume_source",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_volume_source" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  {
    PyObject *swig_obj = NULL;
    void *tmp_ptr = 0;
    int tmp_res = 0;
    
    if(PyObject_IsInstance(obj2, py_source_time_object())) {
      swig_obj = PyObject_GetAttrString(obj2, "swigobj");
    } else if(PyObject_IsInstance(obj2, py_meep_src_time_object())) {
      swig_obj = obj2;
      Py_XINCREF(swig_obj);
    } else {
      PyErr_SetString(PyExc_TypeError, "Expected a meep.source.SourceTime or a meep.src_time\n");
      SWIG_fail;
    }
    
    tmp_res = SWIG_ConvertPtr(swig_obj, &tmp_ptr, SWIGTYPE_p_meep__src_time, 0);
    Py_XDECREF(swig_obj);
    
    if(!SWIG_IsOK(tmp_res)) {
      SWIG_exception_fail(SWIG_ArgError(tmp_res), "Couldn't convert Python object to meep::src_time");
    }
    arg3 = reinterpret_cast<meep::src_time *>(tmp_ptr);
    
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_add_volume_source" "', argument " "4"" of type '" "meep::volume const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_volume_source" "', argument " "4"" of type '" "meep::volume const &""'"); 
  }
  arg4 = reinterpret_cast< meep::volume * >(argp4);
  {
    arg5 = py_amp_func_wrap;
    py_amp_func = obj4;
    Py_INCREF(py_amp_func);
  }
  (arg1)->add_volume_source(arg2,(meep::src_time const &)*arg3,(meep::volume const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  {
    Py_XDECREF(py_amp_func);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_amp_func);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_volume_source__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::src_time *arg3 = 0 ;
  meep::volume *arg4 = 0 ;
  std::complex< double > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  std::complex< double > val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:fields_add_volume_source",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_volume_source" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  {
    PyObject *swig_obj = NULL;
    void *tmp_ptr = 0;
    int tmp_res = 0;
    
    if(PyObject_IsInstance(obj2, py_source_time_object())) {
      swig_obj = PyObject_GetAttrString(obj2, "swigobj");
    } else if(PyObject_IsInstance(obj2, py_meep_src_time_object())) {
      swig_obj = obj2;
      Py_XINCREF(swig_obj);
    } else {
      PyErr_SetString(PyExc_TypeError, "Expected a meep.source.SourceTime or a meep.src_time\n");
      SWIG_fail;
    }
    
    tmp_res = SWIG_ConvertPtr(swig_obj, &tmp_ptr, SWIGTYPE_p_meep__src_time, 0);
    Py_XDECREF(swig_obj);
    
    if(!SWIG_IsOK(tmp_res)) {
      SWIG_exception_fail(SWIG_ArgError(tmp_res), "Couldn't convert Python object to meep::src_time");
    }
    arg3 = reinterpret_cast<meep::src_time *>(tmp_ptr);
    
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_add_volume_source" "', argument " "4"" of type '" "meep::volume const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_volume_source" "', argument " "4"" of type '" "meep::volume const &""'"); 
  }
  arg4 = reinterpret_cast< meep::volume * >(argp4);
  ecode5 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_add_volume_source" "', argument " "5"" of type '" "std::complex< double >""'");
  } 
  arg5 = static_cast< std::complex< double > >(val5);
  (arg1)->add_volume_source(arg2,(meep::src_time const &)*arg3,(meep::volume const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_volume_source__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::src_time *arg3 = 0 ;
  meep::volume *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fields_add_volume_source",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_volume_source" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  {
    PyObject *swig_obj = NULL;
    void *tmp_ptr = 0;
    int tmp_res = 0;
    
    if(PyObject_IsInstance(obj2, py_source_time_object())) {
      swig_obj = PyObject_GetAttrString(obj2, "swigobj");
    } else if(PyObject_IsInstance(obj2, py_meep_src_time_object())) {
      swig_obj = obj2;
      Py_XINCREF(swig_obj);
    } else {
      PyErr_SetString(PyExc_TypeError, "Expected a meep.source.SourceTime or a meep.src_time\n");
      SWIG_fail;
    }
    
    tmp_res = SWIG_ConvertPtr(swig_obj, &tmp_ptr, SWIGTYPE_p_meep__src_time, 0);
    Py_XDECREF(swig_obj);
    
    if(!SWIG_IsOK(tmp_res)) {
      SWIG_exception_fail(SWIG_ArgError(tmp_res), "Couldn't convert Python object to meep::src_time");
    }
    arg3 = reinterpret_cast<meep::src_time *>(tmp_ptr);
    
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_add_volume_source" "', argument " "4"" of type '" "meep::volume const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_volume_source" "', argument " "4"" of type '" "meep::volume const &""'"); 
  }
  arg4 = reinterpret_cast< meep::volume * >(argp4);
  (arg1)->add_volume_source(arg2,(meep::src_time const &)*arg3,(meep::volume const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_volume_source(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        {
          int py_source_time = PyObject_IsInstance(argv[2], py_source_time_object());
          int swig_src_time = PyObject_IsInstance(argv[2], py_meep_src_time_object());
          
          _v = py_source_time || swig_src_time;
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__volume, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_fields_add_volume_source__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        {
          int py_source_time = PyObject_IsInstance(argv[2], py_source_time_object());
          int swig_src_time = PyObject_IsInstance(argv[2], py_meep_src_time_object());
          
          _v = py_source_time || swig_src_time;
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__volume, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = PyCallable_Check(argv[4]);
            }
            if (_v) {
              return _wrap_fields_add_volume_source__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        {
          int py_source_time = PyObject_IsInstance(argv[2], py_source_time_object());
          int swig_src_time = PyObject_IsInstance(argv[2], py_meep_src_time_object());
          
          _v = py_source_time || swig_src_time;
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__volume, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_fields_add_volume_source__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        {
          int py_source_time = PyObject_IsInstance(argv[2], py_source_time_object());
          int swig_src_time = PyObject_IsInstance(argv[2], py_meep_src_time_object());
          
          _v = py_source_time || swig_src_time;
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__volume, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = PyCallable_Check(argv[4]);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_fields_add_volume_source__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_add_volume_source'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::add_volume_source(meep::component,meep::src_time const &,meep::volume const &,std::complex< double > (*)(meep::vec const &),std::complex< double >)\n"
    "    meep::fields::add_volume_source(meep::component,meep::src_time const &,meep::volume const &,std::complex< double > (*)(meep::vec const &))\n"
    "    meep::fields::add_volume_source(meep::component,meep::src_time const &,meep::volume const &,std::complex< double >)\n"
    "    meep::fields::add_volume_source(meep::component,meep::src_time const &,meep::volume const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_require_component(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_require_component",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_require_component" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  (arg1)->require_component(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_eigenmode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  double arg2 ;
  meep::direction arg3 ;
  SwigValueWrapper< meep::volume > arg4 ;
  SwigValueWrapper< meep::volume > arg5 ;
  int arg6 ;
  meep::vec *arg7 = 0 ;
  bool arg8 ;
  int arg9 ;
  double arg10 ;
  double arg11 ;
  bool arg12 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  bool val12 ;
  int ecode12 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOO:fields_get_eigenmode",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_eigenmode" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_get_eigenmode" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_get_eigenmode" "', argument " "3"" of type '" "meep::direction""'");
  } 
  arg3 = static_cast< meep::direction >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__volume,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_get_eigenmode" "', argument " "4"" of type '" "meep::volume const""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_eigenmode" "', argument " "4"" of type '" "meep::volume const""'");
    } else {
      meep::volume * temp = reinterpret_cast< meep::volume * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_meep__volume,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "fields_get_eigenmode" "', argument " "5"" of type '" "meep::volume const""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_eigenmode" "', argument " "5"" of type '" "meep::volume const""'");
    } else {
      meep::volume * temp = reinterpret_cast< meep::volume * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_get_eigenmode" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_get_eigenmode" "', argument " "7"" of type '" "meep::vec const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_eigenmode" "', argument " "7"" of type '" "meep::vec const &""'"); 
  }
  arg7 = reinterpret_cast< meep::vec * >(argp7);
  ecode8 = SWIG_AsVal_bool(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fields_get_eigenmode" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  ecode9 = SWIG_AsVal_int(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "fields_get_eigenmode" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "fields_get_eigenmode" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "fields_get_eigenmode" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_bool(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "fields_get_eigenmode" "', argument " "12"" of type '" "bool""'");
  } 
  arg12 = static_cast< bool >(val12);
  result = (void *)(arg1)->get_eigenmode(arg2,arg3,arg4,arg5,arg6,(meep::vec const &)*arg7,arg8,arg9,arg10,arg11,arg12);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_eigenmode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  double arg2 ;
  meep::direction arg3 ;
  SwigValueWrapper< meep::volume > arg4 ;
  SwigValueWrapper< meep::volume > arg5 ;
  int arg6 ;
  meep::vec *arg7 = 0 ;
  bool arg8 ;
  int arg9 ;
  double arg10 ;
  double arg11 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:fields_get_eigenmode",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_eigenmode" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_get_eigenmode" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_get_eigenmode" "', argument " "3"" of type '" "meep::direction""'");
  } 
  arg3 = static_cast< meep::direction >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__volume,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_get_eigenmode" "', argument " "4"" of type '" "meep::volume const""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_eigenmode" "', argument " "4"" of type '" "meep::volume const""'");
    } else {
      meep::volume * temp = reinterpret_cast< meep::volume * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_meep__volume,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "fields_get_eigenmode" "', argument " "5"" of type '" "meep::volume const""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_eigenmode" "', argument " "5"" of type '" "meep::volume const""'");
    } else {
      meep::volume * temp = reinterpret_cast< meep::volume * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_get_eigenmode" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_get_eigenmode" "', argument " "7"" of type '" "meep::vec const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_eigenmode" "', argument " "7"" of type '" "meep::vec const &""'"); 
  }
  arg7 = reinterpret_cast< meep::vec * >(argp7);
  ecode8 = SWIG_AsVal_bool(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fields_get_eigenmode" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  ecode9 = SWIG_AsVal_int(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "fields_get_eigenmode" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "fields_get_eigenmode" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "fields_get_eigenmode" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  result = (void *)(arg1)->get_eigenmode(arg2,arg3,arg4,arg5,arg6,(meep::vec const &)*arg7,arg8,arg9,arg10,arg11);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_eigenmode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[13] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 12) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 11) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__volume, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_meep__volume, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_meep__vec, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_bool(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_int(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          return _wrap_fields_get_eigenmode__SWIG_1(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__volume, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_meep__volume, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_meep__vec, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_bool(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_int(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_bool(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            return _wrap_fields_get_eigenmode__SWIG_0(self, args);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_get_eigenmode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::get_eigenmode(double,meep::direction,meep::volume const,meep::volume const,int,meep::vec const &,bool,int,double,double,bool)\n"
    "    meep::fields::get_eigenmode(double,meep::direction,meep::volume const,meep::volume const,int,meep::vec const &,bool,int,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_add_eigenmode_source__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::src_time *arg3 = 0 ;
  meep::direction arg4 ;
  meep::volume *arg5 = 0 ;
  meep::volume *arg6 = 0 ;
  int arg7 ;
  meep::vec *arg8 = 0 ;
  bool arg9 ;
  int arg10 ;
  double arg11 ;
  double arg12 ;
  std::complex< double > arg13 ;
  std::complex< double > (*arg14)(meep::vec const &) = (std::complex< double > (*)(meep::vec const &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  std::complex< double > val13 ;
  int ecode13 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOO:fields_add_eigenmode_source",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_eigenmode_source" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  {
    PyObject *swig_obj = NULL;
    void *tmp_ptr = 0;
    int tmp_res = 0;
    
    if(PyObject_IsInstance(obj2, py_source_time_object())) {
      swig_obj = PyObject_GetAttrString(obj2, "swigobj");
    } else if(PyObject_IsInstance(obj2, py_meep_src_time_object())) {
      swig_obj = obj2;
      Py_XINCREF(swig_obj);
    } else {
      PyErr_SetString(PyExc_TypeError, "Expected a meep.source.SourceTime or a meep.src_time\n");
      SWIG_fail;
    }
    
    tmp_res = SWIG_ConvertPtr(swig_obj, &tmp_ptr, SWIGTYPE_p_meep__src_time, 0);
    Py_XDECREF(swig_obj);
    
    if(!SWIG_IsOK(tmp_res)) {
      SWIG_exception_fail(SWIG_ArgError(tmp_res), "Couldn't convert Python object to meep::src_time");
    }
    arg3 = reinterpret_cast<meep::src_time *>(tmp_ptr);
    
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_add_eigenmode_source" "', argument " "4"" of type '" "meep::direction""'");
  } 
  arg4 = static_cast< meep::direction >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "fields_add_eigenmode_source" "', argument " "5"" of type '" "meep::volume const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_eigenmode_source" "', argument " "5"" of type '" "meep::volume const &""'"); 
  }
  arg5 = reinterpret_cast< meep::volume * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fields_add_eigenmode_source" "', argument " "6"" of type '" "meep::volume const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_eigenmode_source" "', argument " "6"" of type '" "meep::volume const &""'"); 
  }
  arg6 = reinterpret_cast< meep::volume * >(argp6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fields_add_eigenmode_source" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "fields_add_eigenmode_source" "', argument " "8"" of type '" "meep::vec const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_eigenmode_source" "', argument " "8"" of type '" "meep::vec const &""'"); 
  }
  arg8 = reinterpret_cast< meep::vec * >(argp8);
  ecode9 = SWIG_AsVal_bool(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "fields_add_eigenmode_source" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  ecode10 = SWIG_AsVal_int(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "fields_add_eigenmode_source" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "fields_add_eigenmode_source" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "fields_add_eigenmode_source" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "fields_add_eigenmode_source" "', argument " "13"" of type '" "std::complex< double >""'");
  } 
  arg13 = static_cast< std::complex< double > >(val13);
  {
    arg14 = py_amp_func_wrap;
    py_amp_func = obj13;
    Py_INCREF(py_amp_func);
  }
  (arg1)->add_eigenmode_source(arg2,(meep::src_time const &)*arg3,arg4,(meep::volume const &)*arg5,(meep::volume const &)*arg6,arg7,(meep::vec const &)*arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  resultobj = SWIG_Py_Void();
  {
    Py_XDECREF(py_amp_func);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_amp_func);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_eigenmode_source__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::src_time *arg3 = 0 ;
  meep::direction arg4 ;
  meep::volume *arg5 = 0 ;
  meep::volume *arg6 = 0 ;
  int arg7 ;
  meep::vec *arg8 = 0 ;
  bool arg9 ;
  int arg10 ;
  double arg11 ;
  double arg12 ;
  std::complex< double > arg13 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  std::complex< double > val13 ;
  int ecode13 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOO:fields_add_eigenmode_source",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_eigenmode_source" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  {
    PyObject *swig_obj = NULL;
    void *tmp_ptr = 0;
    int tmp_res = 0;
    
    if(PyObject_IsInstance(obj2, py_source_time_object())) {
      swig_obj = PyObject_GetAttrString(obj2, "swigobj");
    } else if(PyObject_IsInstance(obj2, py_meep_src_time_object())) {
      swig_obj = obj2;
      Py_XINCREF(swig_obj);
    } else {
      PyErr_SetString(PyExc_TypeError, "Expected a meep.source.SourceTime or a meep.src_time\n");
      SWIG_fail;
    }
    
    tmp_res = SWIG_ConvertPtr(swig_obj, &tmp_ptr, SWIGTYPE_p_meep__src_time, 0);
    Py_XDECREF(swig_obj);
    
    if(!SWIG_IsOK(tmp_res)) {
      SWIG_exception_fail(SWIG_ArgError(tmp_res), "Couldn't convert Python object to meep::src_time");
    }
    arg3 = reinterpret_cast<meep::src_time *>(tmp_ptr);
    
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_add_eigenmode_source" "', argument " "4"" of type '" "meep::direction""'");
  } 
  arg4 = static_cast< meep::direction >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "fields_add_eigenmode_source" "', argument " "5"" of type '" "meep::volume const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_eigenmode_source" "', argument " "5"" of type '" "meep::volume const &""'"); 
  }
  arg5 = reinterpret_cast< meep::volume * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fields_add_eigenmode_source" "', argument " "6"" of type '" "meep::volume const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_eigenmode_source" "', argument " "6"" of type '" "meep::volume const &""'"); 
  }
  arg6 = reinterpret_cast< meep::volume * >(argp6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fields_add_eigenmode_source" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "fields_add_eigenmode_source" "', argument " "8"" of type '" "meep::vec const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_eigenmode_source" "', argument " "8"" of type '" "meep::vec const &""'"); 
  }
  arg8 = reinterpret_cast< meep::vec * >(argp8);
  ecode9 = SWIG_AsVal_bool(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "fields_add_eigenmode_source" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  ecode10 = SWIG_AsVal_int(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "fields_add_eigenmode_source" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "fields_add_eigenmode_source" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "fields_add_eigenmode_source" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "fields_add_eigenmode_source" "', argument " "13"" of type '" "std::complex< double >""'");
  } 
  arg13 = static_cast< std::complex< double > >(val13);
  (arg1)->add_eigenmode_source(arg2,(meep::src_time const &)*arg3,arg4,(meep::volume const &)*arg5,(meep::volume const &)*arg6,arg7,(meep::vec const &)*arg8,arg9,arg10,arg11,arg12,arg13);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_eigenmode_source(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[15] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 14) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 13) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        {
          int py_source_time = PyObject_IsInstance(argv[2], py_source_time_object());
          int swig_src_time = PyObject_IsInstance(argv[2], py_meep_src_time_object());
          
          _v = py_source_time || swig_src_time;
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_meep__volume, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_meep__volume, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_meep__vec, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    {
                      int res = SWIG_AsVal_bool(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_int(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_double(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            {
                              int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[12], NULL);
                              _v = SWIG_CheckState(res);
                            }
                            if (_v) {
                              return _wrap_fields_add_eigenmode_source__SWIG_1(self, args);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 14) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        {
          int py_source_time = PyObject_IsInstance(argv[2], py_source_time_object());
          int swig_src_time = PyObject_IsInstance(argv[2], py_meep_src_time_object());
          
          _v = py_source_time || swig_src_time;
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_meep__volume, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_meep__volume, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_meep__vec, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    {
                      int res = SWIG_AsVal_bool(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_int(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_double(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            {
                              int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[12], NULL);
                              _v = SWIG_CheckState(res);
                            }
                            if (_v) {
                              {
                                _v = PyCallable_Check(argv[13]);
                              }
                              if (_v) {
                                return _wrap_fields_add_eigenmode_source__SWIG_0(self, args);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_add_eigenmode_source'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::add_eigenmode_source(meep::component,meep::src_time const &,meep::direction,meep::volume const &,meep::volume const &,int,meep::vec const &,bool,int,double,double,std::complex< double >,std::complex< double > (*)(meep::vec const &))\n"
    "    meep::fields::add_eigenmode_source(meep::component,meep::src_time const &,meep::direction,meep::volume const &,meep::volume const &,int,meep::vec const &,bool,int,double,double,std::complex< double >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_get_eigenmode_coefficients__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  SwigValueWrapper< meep::dft_flux > arg2 ;
  meep::volume *arg3 = 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  double arg8 ;
  std::complex< double > *arg9 = (std::complex< double > *) 0 ;
  double *arg10 = (double *) 0 ;
  meep::kpoint_func arg11 = (meep::kpoint_func) 0 ;
  void *arg12 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:fields_get_eigenmode_coefficients",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_eigenmode_coefficients" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__dft_flux,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_eigenmode_coefficients" "', argument " "2"" of type '" "meep::dft_flux""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_eigenmode_coefficients" "', argument " "2"" of type '" "meep::dft_flux""'");
    } else {
      meep::dft_flux * temp = reinterpret_cast< meep::dft_flux * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_get_eigenmode_coefficients" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_eigenmode_coefficients" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  {
    npy_intp size[1] = {
      -1 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_INT,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (int*) array_data(array4);
    arg5 = (int) array_size(array4,0);
  }
  ecode6 = SWIG_AsVal_int(obj4, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_get_eigenmode_coefficients" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_double(obj5, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fields_get_eigenmode_coefficients" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj6, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fields_get_eigenmode_coefficients" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    arg9 = (std::complex<double> *)array_data(obj7);
  }
  res10 = SWIG_ConvertPtr(obj8, &argp10,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "fields_get_eigenmode_coefficients" "', argument " "10"" of type '" "double *""'"); 
  }
  arg10 = reinterpret_cast< double * >(argp10);
  {
    if (obj9 == Py_None) {
      arg11 = NULL;
      arg12 = NULL;
    }
    else {
      arg11 = py_kpoint_func_wrap;
      arg12 = (void*)obj9;
    }
  }
  (arg1)->get_eigenmode_coefficients(arg2,(meep::volume const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_eigenmode_coefficients__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  SwigValueWrapper< meep::dft_flux > arg2 ;
  meep::volume *arg3 = 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  double arg8 ;
  std::complex< double > *arg9 = (std::complex< double > *) 0 ;
  double *arg10 = (double *) 0 ;
  meep::kpoint_func arg11 = (meep::kpoint_func) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:fields_get_eigenmode_coefficients",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_eigenmode_coefficients" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__dft_flux,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_eigenmode_coefficients" "', argument " "2"" of type '" "meep::dft_flux""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_eigenmode_coefficients" "', argument " "2"" of type '" "meep::dft_flux""'");
    } else {
      meep::dft_flux * temp = reinterpret_cast< meep::dft_flux * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_get_eigenmode_coefficients" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_eigenmode_coefficients" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  {
    npy_intp size[1] = {
      -1 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_INT,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (int*) array_data(array4);
    arg5 = (int) array_size(array4,0);
  }
  ecode6 = SWIG_AsVal_int(obj4, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_get_eigenmode_coefficients" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_double(obj5, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fields_get_eigenmode_coefficients" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj6, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fields_get_eigenmode_coefficients" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    arg9 = (std::complex<double> *)array_data(obj7);
  }
  res10 = SWIG_ConvertPtr(obj8, &argp10,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "fields_get_eigenmode_coefficients" "', argument " "10"" of type '" "double *""'"); 
  }
  arg10 = reinterpret_cast< double * >(argp10);
  {
    int res = SWIG_ConvertFunctionPtr(obj9, (void**)(&arg11), SWIGTYPE_p_f_double_int_p_void__meep__vec);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fields_get_eigenmode_coefficients" "', argument " "11"" of type '" "meep::kpoint_func""'"); 
    }
  }
  (arg1)->get_eigenmode_coefficients(arg2,(meep::volume const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_eigenmode_coefficients__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  SwigValueWrapper< meep::dft_flux > arg2 ;
  meep::volume *arg3 = 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  double arg8 ;
  std::complex< double > *arg9 = (std::complex< double > *) 0 ;
  double *arg10 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:fields_get_eigenmode_coefficients",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_eigenmode_coefficients" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__dft_flux,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_eigenmode_coefficients" "', argument " "2"" of type '" "meep::dft_flux""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_eigenmode_coefficients" "', argument " "2"" of type '" "meep::dft_flux""'");
    } else {
      meep::dft_flux * temp = reinterpret_cast< meep::dft_flux * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_get_eigenmode_coefficients" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_eigenmode_coefficients" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  {
    npy_intp size[1] = {
      -1 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_INT,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (int*) array_data(array4);
    arg5 = (int) array_size(array4,0);
  }
  ecode6 = SWIG_AsVal_int(obj4, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_get_eigenmode_coefficients" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_double(obj5, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fields_get_eigenmode_coefficients" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj6, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fields_get_eigenmode_coefficients" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    arg9 = (std::complex<double> *)array_data(obj7);
  }
  res10 = SWIG_ConvertPtr(obj8, &argp10,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "fields_get_eigenmode_coefficients" "', argument " "10"" of type '" "double *""'"); 
  }
  arg10 = reinterpret_cast< double * >(argp10);
  (arg1)->get_eigenmode_coefficients(arg2,(meep::volume const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_eigenmode_coefficients__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  SwigValueWrapper< meep::dft_flux > arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  std::complex< double > *arg6 = (std::complex< double > *) 0 ;
  double *arg7 = (double *) 0 ;
  meep::kpoint_func arg8 = (meep::kpoint_func) 0 ;
  void *arg9 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:fields_get_eigenmode_coefficients",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_eigenmode_coefficients" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__dft_flux,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_eigenmode_coefficients" "', argument " "2"" of type '" "meep::dft_flux""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_eigenmode_coefficients" "', argument " "2"" of type '" "meep::dft_flux""'");
    } else {
      meep::dft_flux * temp = reinterpret_cast< meep::dft_flux * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_INT,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (int*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  ecode5 = SWIG_AsVal_int(obj3, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_get_eigenmode_coefficients" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    arg6 = (std::complex<double> *)array_data(obj4);
  }
  res7 = SWIG_ConvertPtr(obj5, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_get_eigenmode_coefficients" "', argument " "7"" of type '" "double *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  {
    if (obj6 == Py_None) {
      arg8 = NULL;
      arg9 = NULL;
    }
    else {
      arg8 = py_kpoint_func_wrap;
      arg9 = (void*)obj6;
    }
  }
  (arg1)->get_eigenmode_coefficients(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_eigenmode_coefficients__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  SwigValueWrapper< meep::dft_flux > arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  std::complex< double > *arg6 = (std::complex< double > *) 0 ;
  double *arg7 = (double *) 0 ;
  meep::kpoint_func arg8 = (meep::kpoint_func) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:fields_get_eigenmode_coefficients",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_eigenmode_coefficients" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__dft_flux,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_eigenmode_coefficients" "', argument " "2"" of type '" "meep::dft_flux""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_eigenmode_coefficients" "', argument " "2"" of type '" "meep::dft_flux""'");
    } else {
      meep::dft_flux * temp = reinterpret_cast< meep::dft_flux * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_INT,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (int*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  ecode5 = SWIG_AsVal_int(obj3, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_get_eigenmode_coefficients" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    arg6 = (std::complex<double> *)array_data(obj4);
  }
  res7 = SWIG_ConvertPtr(obj5, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_get_eigenmode_coefficients" "', argument " "7"" of type '" "double *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  {
    int res = SWIG_ConvertFunctionPtr(obj6, (void**)(&arg8), SWIGTYPE_p_f_double_int_p_void__meep__vec);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fields_get_eigenmode_coefficients" "', argument " "8"" of type '" "meep::kpoint_func""'"); 
    }
  }
  (arg1)->get_eigenmode_coefficients(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_eigenmode_coefficients__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  SwigValueWrapper< meep::dft_flux > arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  std::complex< double > *arg6 = (std::complex< double > *) 0 ;
  double *arg7 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:fields_get_eigenmode_coefficients",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_eigenmode_coefficients" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__dft_flux,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_eigenmode_coefficients" "', argument " "2"" of type '" "meep::dft_flux""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_eigenmode_coefficients" "', argument " "2"" of type '" "meep::dft_flux""'");
    } else {
      meep::dft_flux * temp = reinterpret_cast< meep::dft_flux * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_INT,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (int*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  ecode5 = SWIG_AsVal_int(obj3, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_get_eigenmode_coefficients" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    arg6 = (std::complex<double> *)array_data(obj4);
  }
  res7 = SWIG_ConvertPtr(obj5, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_get_eigenmode_coefficients" "', argument " "7"" of type '" "double *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  (arg1)->get_eigenmode_coefficients(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_eigenmode_coefficients(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[11] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 10) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__dft_flux, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              _v = is_array(argv[4]);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_fields_get_eigenmode_coefficients__SWIG_5(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__dft_flux, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              _v = is_array(argv[4]);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *ptr = 0;
                int res = SWIG_ConvertFunctionPtr(argv[6], &ptr, SWIGTYPE_p_f_double_int_p_void__meep__vec);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_fields_get_eigenmode_coefficients__SWIG_4(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__dft_flux, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              _v = is_array(argv[4]);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  _v = PyFunction_Check(argv[6]) || argv[6] == Py_None;
                }
                if (_v) {
                  if (argc <= 7) {
                    return _wrap_fields_get_eigenmode_coefficients__SWIG_3(self, args);
                  }
                  return _wrap_fields_get_eigenmode_coefficients__SWIG_3(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__dft_flux, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    _v = is_array(argv[7]);
                  }
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_fields_get_eigenmode_coefficients__SWIG_2(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__dft_flux, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    _v = is_array(argv[7]);
                  }
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      {
                        _v = PyFunction_Check(argv[9]) || argv[9] == Py_None;
                      }
                      if (_v) {
                        if (argc <= 10) {
                          return _wrap_fields_get_eigenmode_coefficients__SWIG_0(self, args);
                        }
                        return _wrap_fields_get_eigenmode_coefficients__SWIG_0(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__dft_flux, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = is_array(argv[3]) || PySequence_Check(argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    _v = is_array(argv[7]);
                  }
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *ptr = 0;
                      int res = SWIG_ConvertFunctionPtr(argv[9], &ptr, SWIGTYPE_p_f_double_int_p_void__meep__vec);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        return _wrap_fields_get_eigenmode_coefficients__SWIG_1(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_get_eigenmode_coefficients'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::get_eigenmode_coefficients(meep::dft_flux,meep::volume const &,int *,int,int,double,double,std::complex< double > *,double *,meep::kpoint_func,void *)\n"
    "    meep::fields::get_eigenmode_coefficients(meep::dft_flux,meep::volume const &,int *,int,int,double,double,std::complex< double > *,double *,meep::kpoint_func)\n"
    "    meep::fields::get_eigenmode_coefficients(meep::dft_flux,meep::volume const &,int *,int,int,double,double,std::complex< double > *,double *)\n"
    "    meep::fields::get_eigenmode_coefficients(meep::dft_flux,int *,int,int,std::complex< double > *,double *,meep::kpoint_func,void *)\n"
    "    meep::fields::get_eigenmode_coefficients(meep::dft_flux,int *,int,int,std::complex< double > *,double *,meep::kpoint_func)\n"
    "    meep::fields::get_eigenmode_coefficients(meep::dft_flux,int *,int,int,std::complex< double > *,double *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_initialize_field(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  std::complex< double > (*arg3)(meep::vec const &) = (std::complex< double > (*)(meep::vec const &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_initialize_field",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_initialize_field" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  {
    arg3 = py_amp_func_wrap;
    py_amp_func = obj2;
    Py_INCREF(py_amp_func);
  }
  (arg1)->initialize_field(arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    Py_XDECREF(py_amp_func);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_amp_func);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_initialize_with_nth_te(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_initialize_with_nth_te",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_initialize_with_nth_te" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_initialize_with_nth_te" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->initialize_with_nth_te(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_initialize_with_nth_tm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_initialize_with_nth_tm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_initialize_with_nth_tm" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_initialize_with_nth_tm" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->initialize_with_nth_tm(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_initialize_with_n_te(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_initialize_with_n_te",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_initialize_with_n_te" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_initialize_with_n_te" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->initialize_with_n_te(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_initialize_with_n_tm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_initialize_with_n_tm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_initialize_with_n_tm" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_initialize_with_n_tm" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->initialize_with_n_tm(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_phase_in_material(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::structure *arg2 = (meep::structure *) 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_phase_in_material",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_phase_in_material" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_phase_in_material" "', argument " "2"" of type '" "meep::structure const *""'"); 
  }
  arg2 = reinterpret_cast< meep::structure * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_phase_in_material" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (int)(arg1)->phase_in_material((meep::structure const *)arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_is_phasing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_is_phasing",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_is_phasing" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (int)(arg1)->is_phasing();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_loop_in_chunks__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::field_chunkloop arg2 = (meep::field_chunkloop) 0 ;
  void *arg3 = (void *) 0 ;
  meep::volume *arg4 = 0 ;
  meep::component arg5 ;
  bool arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:fields_loop_in_chunks",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_loop_in_chunks" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_p_meep__fields_chunk_int_enum_meep__component_meep__ivec_meep__ivec_meep__vec_meep__vec_meep__vec_meep__vec_double_double_meep__ivec_std__complex__double___r_q_const__meep__symmetry_int_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fields_loop_in_chunks" "', argument " "2"" of type '" "meep::field_chunkloop""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_loop_in_chunks" "', argument " "3"" of type '" "void *""'"); 
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_loop_in_chunks" "', argument " "4"" of type '" "meep::volume const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_loop_in_chunks" "', argument " "4"" of type '" "meep::volume const &""'"); 
  }
  arg4 = reinterpret_cast< meep::volume * >(argp4);
  {
    arg5 = static_cast<meep::component>(PyInteger_AsLong(obj4));
  }
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_loop_in_chunks" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fields_loop_in_chunks" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  (arg1)->loop_in_chunks(arg2,arg3,(meep::volume const &)*arg4,arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_loop_in_chunks__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::field_chunkloop arg2 = (meep::field_chunkloop) 0 ;
  void *arg3 = (void *) 0 ;
  meep::volume *arg4 = 0 ;
  meep::component arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:fields_loop_in_chunks",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_loop_in_chunks" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_p_meep__fields_chunk_int_enum_meep__component_meep__ivec_meep__ivec_meep__vec_meep__vec_meep__vec_meep__vec_double_double_meep__ivec_std__complex__double___r_q_const__meep__symmetry_int_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fields_loop_in_chunks" "', argument " "2"" of type '" "meep::field_chunkloop""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_loop_in_chunks" "', argument " "3"" of type '" "void *""'"); 
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_loop_in_chunks" "', argument " "4"" of type '" "meep::volume const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_loop_in_chunks" "', argument " "4"" of type '" "meep::volume const &""'"); 
  }
  arg4 = reinterpret_cast< meep::volume * >(argp4);
  {
    arg5 = static_cast<meep::component>(PyInteger_AsLong(obj4));
  }
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_loop_in_chunks" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  (arg1)->loop_in_chunks(arg2,arg3,(meep::volume const &)*arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_loop_in_chunks__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::field_chunkloop arg2 = (meep::field_chunkloop) 0 ;
  void *arg3 = (void *) 0 ;
  meep::volume *arg4 = 0 ;
  meep::component arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:fields_loop_in_chunks",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_loop_in_chunks" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_p_meep__fields_chunk_int_enum_meep__component_meep__ivec_meep__ivec_meep__vec_meep__vec_meep__vec_meep__vec_double_double_meep__ivec_std__complex__double___r_q_const__meep__symmetry_int_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fields_loop_in_chunks" "', argument " "2"" of type '" "meep::field_chunkloop""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_loop_in_chunks" "', argument " "3"" of type '" "void *""'"); 
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_loop_in_chunks" "', argument " "4"" of type '" "meep::volume const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_loop_in_chunks" "', argument " "4"" of type '" "meep::volume const &""'"); 
  }
  arg4 = reinterpret_cast< meep::volume * >(argp4);
  {
    arg5 = static_cast<meep::component>(PyInteger_AsLong(obj4));
  }
  (arg1)->loop_in_chunks(arg2,arg3,(meep::volume const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_loop_in_chunks__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::field_chunkloop arg2 = (meep::field_chunkloop) 0 ;
  void *arg3 = (void *) 0 ;
  meep::volume *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fields_loop_in_chunks",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_loop_in_chunks" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_p_meep__fields_chunk_int_enum_meep__component_meep__ivec_meep__ivec_meep__vec_meep__vec_meep__vec_meep__vec_double_double_meep__ivec_std__complex__double___r_q_const__meep__symmetry_int_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fields_loop_in_chunks" "', argument " "2"" of type '" "meep::field_chunkloop""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_loop_in_chunks" "', argument " "3"" of type '" "void *""'"); 
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_loop_in_chunks" "', argument " "4"" of type '" "meep::volume const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_loop_in_chunks" "', argument " "4"" of type '" "meep::volume const &""'"); 
  }
  arg4 = reinterpret_cast< meep::volume * >(argp4);
  (arg1)->loop_in_chunks(arg2,arg3,(meep::volume const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_loop_in_chunks(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_p_meep__fields_chunk_int_enum_meep__component_meep__ivec_meep__ivec_meep__vec_meep__vec_meep__vec_meep__vec_double_double_meep__ivec_std__complex__double___r_q_const__meep__symmetry_int_p_void__void);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__volume, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_fields_loop_in_chunks__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_p_meep__fields_chunk_int_enum_meep__component_meep__ivec_meep__ivec_meep__vec_meep__vec_meep__vec_meep__vec_double_double_meep__ivec_std__complex__double___r_q_const__meep__symmetry_int_p_void__void);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__volume, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = PyInteger_Check(argv[4]) && PyInteger_AsLong(argv[4]) < 100;
            }
            if (_v) {
              return _wrap_fields_loop_in_chunks__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_p_meep__fields_chunk_int_enum_meep__component_meep__ivec_meep__ivec_meep__vec_meep__vec_meep__vec_meep__vec_double_double_meep__ivec_std__complex__double___r_q_const__meep__symmetry_int_p_void__void);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__volume, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = PyInteger_Check(argv[4]) && PyInteger_AsLong(argv[4]) < 100;
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_fields_loop_in_chunks__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_p_meep__fields_chunk_int_enum_meep__component_meep__ivec_meep__ivec_meep__vec_meep__vec_meep__vec_meep__vec_double_double_meep__ivec_std__complex__double___r_q_const__meep__symmetry_int_p_void__void);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__volume, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = PyInteger_Check(argv[4]) && PyInteger_AsLong(argv[4]) < 100;
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_fields_loop_in_chunks__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_loop_in_chunks'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::loop_in_chunks(meep::field_chunkloop,void *,meep::volume const &,meep::component,bool,bool)\n"
    "    meep::fields::loop_in_chunks(meep::field_chunkloop,void *,meep::volume const &,meep::component,bool)\n"
    "    meep::fields::loop_in_chunks(meep::field_chunkloop,void *,meep::volume const &,meep::component)\n"
    "    meep::fields::loop_in_chunks(meep::field_chunkloop,void *,meep::volume const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_integrate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  int arg2 ;
  meep::component *arg3 = (meep::component *) 0 ;
  meep::field_function arg4 = (meep::field_function) 0 ;
  void *arg5 = (void *) 0 ;
  meep::volume *arg6 = 0 ;
  double *arg7 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  py_field_func_data tmp_data2 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fields_integrate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_integrate" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_ValueError, "Expected a sequence");
      SWIG_fail;
    }
    
    PyObject *cs = PyList_GetItem(obj1, 0);
    
    if (!PySequence_Check(cs)) {
      PyErr_SetString(PyExc_ValueError, "Expected first item in list to be a list");
      SWIG_fail;
    }
    
    PyObject *func = PyList_GetItem(obj1, 1);
    
    if (!PyCallable_Check(func)) {
      PyErr_SetString(PyExc_ValueError, "Expected a function");
      SWIG_fail;
    }
    
    arg2 = PyList_Size(cs);
    arg3 = new meep::component[arg2];
    
    for (Py_ssize_t i = 0; i < arg2; i++) {
      arg3[i] = (meep::component)PyInteger_AsLong(PyList_GetItem(cs, i));
    }
    
    arg4 = py_field_func_wrap;
    
    tmp_data2.num_components = arg2;
    tmp_data2.func = func;
    Py_INCREF(tmp_data2.func);
    arg5 = &tmp_data2;
  }
  res6 = SWIG_ConvertPtr(obj2, &argp6, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fields_integrate" "', argument " "6"" of type '" "meep::volume const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_integrate" "', argument " "6"" of type '" "meep::volume const &""'"); 
  }
  arg6 = reinterpret_cast< meep::volume * >(argp6);
  res7 = SWIG_ConvertPtr(obj3, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_integrate" "', argument " "7"" of type '" "double *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  result = (arg1)->integrate(arg2,(meep::component const *)arg3,arg4,arg5,(meep::volume const &)*arg6,arg7);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  {
    delete[] arg3;
    Py_XDECREF(tmp_data2.func);
  }
  return resultobj;
fail:
  {
    delete[] arg3;
    Py_XDECREF(tmp_data2.func);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_integrate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  int arg2 ;
  meep::component *arg3 = (meep::component *) 0 ;
  meep::field_function arg4 = (meep::field_function) 0 ;
  void *arg5 = (void *) 0 ;
  meep::volume *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  py_field_func_data tmp_data2 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_integrate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_integrate" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_ValueError, "Expected a sequence");
      SWIG_fail;
    }
    
    PyObject *cs = PyList_GetItem(obj1, 0);
    
    if (!PySequence_Check(cs)) {
      PyErr_SetString(PyExc_ValueError, "Expected first item in list to be a list");
      SWIG_fail;
    }
    
    PyObject *func = PyList_GetItem(obj1, 1);
    
    if (!PyCallable_Check(func)) {
      PyErr_SetString(PyExc_ValueError, "Expected a function");
      SWIG_fail;
    }
    
    arg2 = PyList_Size(cs);
    arg3 = new meep::component[arg2];
    
    for (Py_ssize_t i = 0; i < arg2; i++) {
      arg3[i] = (meep::component)PyInteger_AsLong(PyList_GetItem(cs, i));
    }
    
    arg4 = py_field_func_wrap;
    
    tmp_data2.num_components = arg2;
    tmp_data2.func = func;
    Py_INCREF(tmp_data2.func);
    arg5 = &tmp_data2;
  }
  res6 = SWIG_ConvertPtr(obj2, &argp6, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fields_integrate" "', argument " "6"" of type '" "meep::volume const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_integrate" "', argument " "6"" of type '" "meep::volume const &""'"); 
  }
  arg6 = reinterpret_cast< meep::volume * >(argp6);
  result = (arg1)->integrate(arg2,(meep::component const *)arg3,arg4,arg5,(meep::volume const &)*arg6);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  {
    delete[] arg3;
    Py_XDECREF(tmp_data2.func);
  }
  return resultobj;
fail:
  {
    delete[] arg3;
    Py_XDECREF(tmp_data2.func);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_integrate__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  int arg2 ;
  meep::component *arg3 = (meep::component *) 0 ;
  meep::field_rfunction arg4 = (meep::field_rfunction) 0 ;
  void *arg5 = (void *) 0 ;
  meep::volume *arg6 = 0 ;
  double *arg7 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res5 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:fields_integrate",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_integrate" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_integrate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_meep__component, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_integrate" "', argument " "3"" of type '" "meep::component const *""'"); 
  }
  arg3 = reinterpret_cast< meep::component * >(argp3);
  {
    int res = SWIG_ConvertFunctionPtr(obj3, (void**)(&arg4), SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fields_integrate" "', argument " "4"" of type '" "meep::field_rfunction""'"); 
    }
  }
  res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "fields_integrate" "', argument " "5"" of type '" "void *""'"); 
  }
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fields_integrate" "', argument " "6"" of type '" "meep::volume const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_integrate" "', argument " "6"" of type '" "meep::volume const &""'"); 
  }
  arg6 = reinterpret_cast< meep::volume * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_integrate" "', argument " "7"" of type '" "double *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  result = (double)(arg1)->integrate(arg2,(meep::component const *)arg3,arg4,arg5,(meep::volume const &)*arg6,arg7);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_integrate__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  int arg2 ;
  meep::component *arg3 = (meep::component *) 0 ;
  meep::field_rfunction arg4 = (meep::field_rfunction) 0 ;
  void *arg5 = (void *) 0 ;
  meep::volume *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res5 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:fields_integrate",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_integrate" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_integrate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_meep__component, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_integrate" "', argument " "3"" of type '" "meep::component const *""'"); 
  }
  arg3 = reinterpret_cast< meep::component * >(argp3);
  {
    int res = SWIG_ConvertFunctionPtr(obj3, (void**)(&arg4), SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fields_integrate" "', argument " "4"" of type '" "meep::field_rfunction""'"); 
    }
  }
  res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "fields_integrate" "', argument " "5"" of type '" "void *""'"); 
  }
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fields_integrate" "', argument " "6"" of type '" "meep::volume const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_integrate" "', argument " "6"" of type '" "meep::volume const &""'"); 
  }
  arg6 = reinterpret_cast< meep::volume * >(argp6);
  result = (double)(arg1)->integrate(arg2,(meep::component const *)arg3,arg4,arg5,(meep::volume const &)*arg6);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_integrate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySequence_Check(argv[1]) &&
        PySequence_Check(PyList_GetItem(argv[1], 0)) &&
        PyCallable_Check(PyList_GetItem(argv[1], 1));
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_fields_integrate__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySequence_Check(argv[1]) &&
        PySequence_Check(PyList_GetItem(argv[1], 0)) &&
        PyCallable_Check(PyList_GetItem(argv[1], 1));
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_fields_integrate__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_meep__component, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *ptr = 0;
          int res = SWIG_ConvertFunctionPtr(argv[3], &ptr, SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *ptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &ptr, 0, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_meep__volume, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_fields_integrate__SWIG_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_meep__component, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *ptr = 0;
          int res = SWIG_ConvertFunctionPtr(argv[3], &ptr, SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *ptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &ptr, 0, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_meep__volume, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_fields_integrate__SWIG_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_integrate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::integrate(int,meep::component const *,meep::field_function,void *,meep::volume const &,double *)\n"
    "    meep::fields::integrate(int,meep::component const *,meep::field_function,void *,meep::volume const &)\n"
    "    meep::fields::integrate(int,meep::component const *,meep::field_rfunction,void *,meep::volume const &,double *)\n"
    "    meep::fields::integrate(int,meep::component const *,meep::field_rfunction,void *,meep::volume const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_integrate2__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::fields *arg2 = 0 ;
  int arg3 ;
  meep::component *arg4 = (meep::component *) 0 ;
  int arg5 ;
  meep::component *arg6 = (meep::component *) 0 ;
  meep::field_function arg7 = (meep::field_function) 0 ;
  void *arg8 = (void *) 0 ;
  meep::volume *arg9 = 0 ;
  double *arg10 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  py_field_func_data data3 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:fields_integrate2",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_integrate2" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__fields,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_integrate2" "', argument " "2"" of type '" "meep::fields const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_integrate2" "', argument " "2"" of type '" "meep::fields const &""'"); 
  }
  arg2 = reinterpret_cast< meep::fields * >(argp2);
  {
    if (!PySequence_Check(obj2)) {
      PyErr_SetString(PyExc_ValueError, "Expected a sequence");
      SWIG_fail;
    }
    
    PyObject *cs1 = PyList_GetItem(obj2, 0);
    
    if (!PySequence_Check(cs1)) {
      PyErr_SetString(PyExc_ValueError, "Expected 1st item in list to be a sequence");
      SWIG_fail;
    }
    
    PyObject *cs2 = PyList_GetItem(obj2, 1);
    
    if (!PySequence_Check(cs2)) {
      PyErr_SetString(PyExc_ValueError, "Expected 2nd item in list to be a sequence");
    }
    
    PyObject *func = PyList_GetItem(obj2, 2);
    
    if (!PyCallable_Check(func)) {
      PyErr_SetString(PyExc_ValueError, "Expected 3rd item in list to be a function");
      SWIG_fail;
    }
    
    arg3 = PyList_Size(cs1);
    arg5 = PyList_Size(cs2);
    
    arg4 = new meep::component[arg3];
    arg6 = new meep::component[arg5];
    
    for (Py_ssize_t i = 0; i < arg3; i++) {
      arg4[i] = (meep::component)PyInteger_AsLong(PyList_GetItem(cs1, i));
    }
    
    for (Py_ssize_t i = 0; i < arg5; i++) {
      arg6[i] = (meep::component)PyInteger_AsLong(PyList_GetItem(cs2, i));
    }
    
    arg7 = py_field_func_wrap;
    
    data3.num_components = arg3 + arg5;
    data3.func = func;
    Py_INCREF(func);
    arg8 = &data3;
  }
  res9 = SWIG_ConvertPtr(obj3, &argp9, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "fields_integrate2" "', argument " "9"" of type '" "meep::volume const &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_integrate2" "', argument " "9"" of type '" "meep::volume const &""'"); 
  }
  arg9 = reinterpret_cast< meep::volume * >(argp9);
  res10 = SWIG_ConvertPtr(obj4, &argp10,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "fields_integrate2" "', argument " "10"" of type '" "double *""'"); 
  }
  arg10 = reinterpret_cast< double * >(argp10);
  result = (arg1)->integrate2((meep::fields const &)*arg2,arg3,(meep::component const *)arg4,arg5,(meep::component const *)arg6,arg7,arg8,(meep::volume const &)*arg9,arg10);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  {
    if (arg4) {
      delete[] arg4;
    }
    if (arg6) {
      delete[] arg6;
    }
    Py_XDECREF(data3.func);
  }
  return resultobj;
fail:
  {
    if (arg4) {
      delete[] arg4;
    }
    if (arg6) {
      delete[] arg6;
    }
    Py_XDECREF(data3.func);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_integrate2__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::fields *arg2 = 0 ;
  int arg3 ;
  meep::component *arg4 = (meep::component *) 0 ;
  int arg5 ;
  meep::component *arg6 = (meep::component *) 0 ;
  meep::field_function arg7 = (meep::field_function) 0 ;
  void *arg8 = (void *) 0 ;
  meep::volume *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  py_field_func_data data3 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fields_integrate2",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_integrate2" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__fields,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_integrate2" "', argument " "2"" of type '" "meep::fields const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_integrate2" "', argument " "2"" of type '" "meep::fields const &""'"); 
  }
  arg2 = reinterpret_cast< meep::fields * >(argp2);
  {
    if (!PySequence_Check(obj2)) {
      PyErr_SetString(PyExc_ValueError, "Expected a sequence");
      SWIG_fail;
    }
    
    PyObject *cs1 = PyList_GetItem(obj2, 0);
    
    if (!PySequence_Check(cs1)) {
      PyErr_SetString(PyExc_ValueError, "Expected 1st item in list to be a sequence");
      SWIG_fail;
    }
    
    PyObject *cs2 = PyList_GetItem(obj2, 1);
    
    if (!PySequence_Check(cs2)) {
      PyErr_SetString(PyExc_ValueError, "Expected 2nd item in list to be a sequence");
    }
    
    PyObject *func = PyList_GetItem(obj2, 2);
    
    if (!PyCallable_Check(func)) {
      PyErr_SetString(PyExc_ValueError, "Expected 3rd item in list to be a function");
      SWIG_fail;
    }
    
    arg3 = PyList_Size(cs1);
    arg5 = PyList_Size(cs2);
    
    arg4 = new meep::component[arg3];
    arg6 = new meep::component[arg5];
    
    for (Py_ssize_t i = 0; i < arg3; i++) {
      arg4[i] = (meep::component)PyInteger_AsLong(PyList_GetItem(cs1, i));
    }
    
    for (Py_ssize_t i = 0; i < arg5; i++) {
      arg6[i] = (meep::component)PyInteger_AsLong(PyList_GetItem(cs2, i));
    }
    
    arg7 = py_field_func_wrap;
    
    data3.num_components = arg3 + arg5;
    data3.func = func;
    Py_INCREF(func);
    arg8 = &data3;
  }
  res9 = SWIG_ConvertPtr(obj3, &argp9, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "fields_integrate2" "', argument " "9"" of type '" "meep::volume const &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_integrate2" "', argument " "9"" of type '" "meep::volume const &""'"); 
  }
  arg9 = reinterpret_cast< meep::volume * >(argp9);
  result = (arg1)->integrate2((meep::fields const &)*arg2,arg3,(meep::component const *)arg4,arg5,(meep::component const *)arg6,arg7,arg8,(meep::volume const &)*arg9);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  {
    if (arg4) {
      delete[] arg4;
    }
    if (arg6) {
      delete[] arg6;
    }
    Py_XDECREF(data3.func);
  }
  return resultobj;
fail:
  {
    if (arg4) {
      delete[] arg4;
    }
    if (arg6) {
      delete[] arg6;
    }
    Py_XDECREF(data3.func);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_integrate2__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::fields *arg2 = 0 ;
  int arg3 ;
  meep::component *arg4 = (meep::component *) 0 ;
  int arg5 ;
  meep::component *arg6 = (meep::component *) 0 ;
  meep::field_rfunction arg7 = (meep::field_rfunction) 0 ;
  void *arg8 = (void *) 0 ;
  meep::volume *arg9 = 0 ;
  double *arg10 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int res8 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:fields_integrate2",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_integrate2" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__fields,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_integrate2" "', argument " "2"" of type '" "meep::fields const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_integrate2" "', argument " "2"" of type '" "meep::fields const &""'"); 
  }
  arg2 = reinterpret_cast< meep::fields * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_integrate2" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_meep__component, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_integrate2" "', argument " "4"" of type '" "meep::component const *""'"); 
  }
  arg4 = reinterpret_cast< meep::component * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_integrate2" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_meep__component, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fields_integrate2" "', argument " "6"" of type '" "meep::component const *""'"); 
  }
  arg6 = reinterpret_cast< meep::component * >(argp6);
  {
    int res = SWIG_ConvertFunctionPtr(obj6, (void**)(&arg7), SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fields_integrate2" "', argument " "7"" of type '" "meep::field_rfunction""'"); 
    }
  }
  res8 = SWIG_ConvertPtr(obj7,SWIG_as_voidptrptr(&arg8), 0, 0);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "fields_integrate2" "', argument " "8"" of type '" "void *""'"); 
  }
  res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "fields_integrate2" "', argument " "9"" of type '" "meep::volume const &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_integrate2" "', argument " "9"" of type '" "meep::volume const &""'"); 
  }
  arg9 = reinterpret_cast< meep::volume * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "fields_integrate2" "', argument " "10"" of type '" "double *""'"); 
  }
  arg10 = reinterpret_cast< double * >(argp10);
  result = (double)(arg1)->integrate2((meep::fields const &)*arg2,arg3,(meep::component const *)arg4,arg5,(meep::component const *)arg6,arg7,arg8,(meep::volume const &)*arg9,arg10);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_integrate2__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::fields *arg2 = 0 ;
  int arg3 ;
  meep::component *arg4 = (meep::component *) 0 ;
  int arg5 ;
  meep::component *arg6 = (meep::component *) 0 ;
  meep::field_rfunction arg7 = (meep::field_rfunction) 0 ;
  void *arg8 = (void *) 0 ;
  meep::volume *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int res8 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:fields_integrate2",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_integrate2" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__fields,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_integrate2" "', argument " "2"" of type '" "meep::fields const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_integrate2" "', argument " "2"" of type '" "meep::fields const &""'"); 
  }
  arg2 = reinterpret_cast< meep::fields * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_integrate2" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_meep__component, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_integrate2" "', argument " "4"" of type '" "meep::component const *""'"); 
  }
  arg4 = reinterpret_cast< meep::component * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_integrate2" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_meep__component, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fields_integrate2" "', argument " "6"" of type '" "meep::component const *""'"); 
  }
  arg6 = reinterpret_cast< meep::component * >(argp6);
  {
    int res = SWIG_ConvertFunctionPtr(obj6, (void**)(&arg7), SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fields_integrate2" "', argument " "7"" of type '" "meep::field_rfunction""'"); 
    }
  }
  res8 = SWIG_ConvertPtr(obj7,SWIG_as_voidptrptr(&arg8), 0, 0);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "fields_integrate2" "', argument " "8"" of type '" "void *""'"); 
  }
  res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "fields_integrate2" "', argument " "9"" of type '" "meep::volume const &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_integrate2" "', argument " "9"" of type '" "meep::volume const &""'"); 
  }
  arg9 = reinterpret_cast< meep::volume * >(argp9);
  result = (double)(arg1)->integrate2((meep::fields const &)*arg2,arg3,(meep::component const *)arg4,arg5,(meep::component const *)arg6,arg7,arg8,(meep::volume const &)*arg9);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_integrate2(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[11] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 10) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__fields, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PySequence_Check(argv[2]) &&
          PySequence_Check(PyList_GetItem(argv[2], 0)) &&
          PySequence_Check(PyList_GetItem(argv[2], 1)) &&
          PyCallable_Check(PyList_GetItem(argv[2], 2));
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__volume, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_fields_integrate2__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__fields, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PySequence_Check(argv[2]) &&
          PySequence_Check(PyList_GetItem(argv[2], 0)) &&
          PySequence_Check(PyList_GetItem(argv[2], 1)) &&
          PyCallable_Check(PyList_GetItem(argv[2], 2));
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__volume, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_fields_integrate2__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__fields, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_meep__component, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_meep__component, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *ptr = 0;
                int res = SWIG_ConvertFunctionPtr(argv[6], &ptr, SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *ptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &ptr, 0, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_meep__volume, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_fields_integrate2__SWIG_3(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__fields, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_meep__component, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_meep__component, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *ptr = 0;
                int res = SWIG_ConvertFunctionPtr(argv[6], &ptr, SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *ptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &ptr, 0, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    int res = SWIG_ConvertPtr(argv[8], 0, SWIGTYPE_p_meep__volume, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &vptr, SWIGTYPE_p_double, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        return _wrap_fields_integrate2__SWIG_2(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_integrate2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::integrate2(meep::fields const &,int,meep::component const *,int,meep::component const *,meep::field_function,void *,meep::volume const &,double *)\n"
    "    meep::fields::integrate2(meep::fields const &,int,meep::component const *,int,meep::component const *,meep::field_function,void *,meep::volume const &)\n"
    "    meep::fields::integrate2(meep::fields const &,int,meep::component const *,int,meep::component const *,meep::field_rfunction,void *,meep::volume const &,double *)\n"
    "    meep::fields::integrate2(meep::fields const &,int,meep::component const *,int,meep::component const *,meep::field_rfunction,void *,meep::volume const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_max_abs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  int arg2 ;
  meep::component *arg3 = (meep::component *) 0 ;
  meep::field_function arg4 = (meep::field_function) 0 ;
  void *arg5 = (void *) 0 ;
  meep::volume *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  py_field_func_data tmp_data2 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_max_abs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_max_abs" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_ValueError, "Expected a sequence");
      SWIG_fail;
    }
    
    PyObject *cs = PyList_GetItem(obj1, 0);
    
    if (!PySequence_Check(cs)) {
      PyErr_SetString(PyExc_ValueError, "Expected first item in list to be a list");
      SWIG_fail;
    }
    
    PyObject *func = PyList_GetItem(obj1, 1);
    
    if (!PyCallable_Check(func)) {
      PyErr_SetString(PyExc_ValueError, "Expected a function");
      SWIG_fail;
    }
    
    arg2 = PyList_Size(cs);
    arg3 = new meep::component[arg2];
    
    for (Py_ssize_t i = 0; i < arg2; i++) {
      arg3[i] = (meep::component)PyInteger_AsLong(PyList_GetItem(cs, i));
    }
    
    arg4 = py_field_func_wrap;
    
    tmp_data2.num_components = arg2;
    tmp_data2.func = func;
    Py_INCREF(tmp_data2.func);
    arg5 = &tmp_data2;
  }
  res6 = SWIG_ConvertPtr(obj2, &argp6, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fields_max_abs" "', argument " "6"" of type '" "meep::volume const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_max_abs" "', argument " "6"" of type '" "meep::volume const &""'"); 
  }
  arg6 = reinterpret_cast< meep::volume * >(argp6);
  result = (double)(arg1)->max_abs(arg2,(meep::component const *)arg3,arg4,arg5,(meep::volume const &)*arg6);
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    delete[] arg3;
    Py_XDECREF(tmp_data2.func);
  }
  return resultobj;
fail:
  {
    delete[] arg3;
    Py_XDECREF(tmp_data2.func);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_max_abs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  int arg2 ;
  meep::component *arg3 = (meep::component *) 0 ;
  meep::field_rfunction arg4 = (meep::field_rfunction) 0 ;
  void *arg5 = (void *) 0 ;
  meep::volume *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res5 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:fields_max_abs",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_max_abs" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_max_abs" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_meep__component, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_max_abs" "', argument " "3"" of type '" "meep::component const *""'"); 
  }
  arg3 = reinterpret_cast< meep::component * >(argp3);
  {
    int res = SWIG_ConvertFunctionPtr(obj3, (void**)(&arg4), SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fields_max_abs" "', argument " "4"" of type '" "meep::field_rfunction""'"); 
    }
  }
  res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "fields_max_abs" "', argument " "5"" of type '" "void *""'"); 
  }
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fields_max_abs" "', argument " "6"" of type '" "meep::volume const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_max_abs" "', argument " "6"" of type '" "meep::volume const &""'"); 
  }
  arg6 = reinterpret_cast< meep::volume * >(argp6);
  result = (double)(arg1)->max_abs(arg2,(meep::component const *)arg3,arg4,arg5,(meep::volume const &)*arg6);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_max_abs__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  int arg2 ;
  meep::volume *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_max_abs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_max_abs" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_max_abs" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_max_abs" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_max_abs" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  result = (double)(arg1)->max_abs(arg2,(meep::volume const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_max_abs__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::volume *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_max_abs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_max_abs" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_max_abs" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_max_abs" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  result = (double)(arg1)->max_abs(arg2,(meep::volume const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_max_abs__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::derived_component arg2 ;
  meep::volume *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_max_abs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_max_abs" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::derived_component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_max_abs" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_max_abs" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  result = (double)(arg1)->max_abs(arg2,(meep::volume const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_max_abs(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySequence_Check(argv[1]) &&
        PySequence_Check(PyList_GetItem(argv[1], 0)) &&
        PyCallable_Check(PyList_GetItem(argv[1], 1));
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_fields_max_abs__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_fields_max_abs__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) >= 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_fields_max_abs__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_fields_max_abs__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_meep__component, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *ptr = 0;
          int res = SWIG_ConvertFunctionPtr(argv[3], &ptr, SWIGTYPE_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *ptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &ptr, 0, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_meep__volume, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_fields_max_abs__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_max_abs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::max_abs(int,meep::component const *,meep::field_function,void *,meep::volume const &)\n"
    "    meep::fields::max_abs(int,meep::component const *,meep::field_rfunction,void *,meep::volume const &)\n"
    "    meep::fields::max_abs(int,meep::volume const &)\n"
    "    meep::fields::max_abs(meep::component,meep::volume const &)\n"
    "    meep::fields::max_abs(meep::derived_component,meep::volume const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_add_dft__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::volume *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  bool arg7 ;
  std::complex< double > arg8 ;
  meep::dft_chunk *arg9 = (meep::dft_chunk *) 0 ;
  bool arg10 ;
  std::complex< double > arg11 ;
  bool arg12 ;
  int arg13 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  std::complex< double > val8 ;
  int ecode8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  std::complex< double > val11 ;
  int ecode11 = 0 ;
  bool val12 ;
  int ecode12 = 0 ;
  int val13 ;
  int ecode13 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  meep::dft_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOO:fields_add_dft",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_dft" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_add_dft" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_dft" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_add_dft" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_add_dft" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_add_dft" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fields_add_dft" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fields_add_dft" "', argument " "8"" of type '" "std::complex< double >""'");
  } 
  arg8 = static_cast< std::complex< double > >(val8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "fields_add_dft" "', argument " "9"" of type '" "meep::dft_chunk *""'"); 
  }
  arg9 = reinterpret_cast< meep::dft_chunk * >(argp9);
  ecode10 = SWIG_AsVal_bool(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "fields_add_dft" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  ecode11 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "fields_add_dft" "', argument " "11"" of type '" "std::complex< double >""'");
  } 
  arg11 = static_cast< std::complex< double > >(val11);
  ecode12 = SWIG_AsVal_bool(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "fields_add_dft" "', argument " "12"" of type '" "bool""'");
  } 
  arg12 = static_cast< bool >(val12);
  ecode13 = SWIG_AsVal_int(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "fields_add_dft" "', argument " "13"" of type '" "int""'");
  } 
  arg13 = static_cast< int >(val13);
  result = (meep::dft_chunk *)(arg1)->add_dft(arg2,(meep::volume const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_dft__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::volume *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  bool arg7 ;
  std::complex< double > arg8 ;
  meep::dft_chunk *arg9 = (meep::dft_chunk *) 0 ;
  bool arg10 ;
  std::complex< double > arg11 ;
  bool arg12 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  std::complex< double > val8 ;
  int ecode8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  std::complex< double > val11 ;
  int ecode11 = 0 ;
  bool val12 ;
  int ecode12 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  meep::dft_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOO:fields_add_dft",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_dft" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_add_dft" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_dft" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_add_dft" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_add_dft" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_add_dft" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fields_add_dft" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fields_add_dft" "', argument " "8"" of type '" "std::complex< double >""'");
  } 
  arg8 = static_cast< std::complex< double > >(val8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "fields_add_dft" "', argument " "9"" of type '" "meep::dft_chunk *""'"); 
  }
  arg9 = reinterpret_cast< meep::dft_chunk * >(argp9);
  ecode10 = SWIG_AsVal_bool(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "fields_add_dft" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  ecode11 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "fields_add_dft" "', argument " "11"" of type '" "std::complex< double >""'");
  } 
  arg11 = static_cast< std::complex< double > >(val11);
  ecode12 = SWIG_AsVal_bool(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "fields_add_dft" "', argument " "12"" of type '" "bool""'");
  } 
  arg12 = static_cast< bool >(val12);
  result = (meep::dft_chunk *)(arg1)->add_dft(arg2,(meep::volume const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_dft__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::volume *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  bool arg7 ;
  std::complex< double > arg8 ;
  meep::dft_chunk *arg9 = (meep::dft_chunk *) 0 ;
  bool arg10 ;
  std::complex< double > arg11 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  std::complex< double > val8 ;
  int ecode8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  std::complex< double > val11 ;
  int ecode11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  meep::dft_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:fields_add_dft",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_dft" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_add_dft" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_dft" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_add_dft" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_add_dft" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_add_dft" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fields_add_dft" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fields_add_dft" "', argument " "8"" of type '" "std::complex< double >""'");
  } 
  arg8 = static_cast< std::complex< double > >(val8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "fields_add_dft" "', argument " "9"" of type '" "meep::dft_chunk *""'"); 
  }
  arg9 = reinterpret_cast< meep::dft_chunk * >(argp9);
  ecode10 = SWIG_AsVal_bool(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "fields_add_dft" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  ecode11 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "fields_add_dft" "', argument " "11"" of type '" "std::complex< double >""'");
  } 
  arg11 = static_cast< std::complex< double > >(val11);
  result = (meep::dft_chunk *)(arg1)->add_dft(arg2,(meep::volume const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_dft__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::volume *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  bool arg7 ;
  std::complex< double > arg8 ;
  meep::dft_chunk *arg9 = (meep::dft_chunk *) 0 ;
  bool arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  std::complex< double > val8 ;
  int ecode8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  meep::dft_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:fields_add_dft",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_dft" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_add_dft" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_dft" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_add_dft" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_add_dft" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_add_dft" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fields_add_dft" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fields_add_dft" "', argument " "8"" of type '" "std::complex< double >""'");
  } 
  arg8 = static_cast< std::complex< double > >(val8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "fields_add_dft" "', argument " "9"" of type '" "meep::dft_chunk *""'"); 
  }
  arg9 = reinterpret_cast< meep::dft_chunk * >(argp9);
  ecode10 = SWIG_AsVal_bool(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "fields_add_dft" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  result = (meep::dft_chunk *)(arg1)->add_dft(arg2,(meep::volume const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_dft__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::volume *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  bool arg7 ;
  std::complex< double > arg8 ;
  meep::dft_chunk *arg9 = (meep::dft_chunk *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  std::complex< double > val8 ;
  int ecode8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  meep::dft_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:fields_add_dft",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_dft" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_add_dft" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_dft" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_add_dft" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_add_dft" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_add_dft" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fields_add_dft" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fields_add_dft" "', argument " "8"" of type '" "std::complex< double >""'");
  } 
  arg8 = static_cast< std::complex< double > >(val8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "fields_add_dft" "', argument " "9"" of type '" "meep::dft_chunk *""'"); 
  }
  arg9 = reinterpret_cast< meep::dft_chunk * >(argp9);
  result = (meep::dft_chunk *)(arg1)->add_dft(arg2,(meep::volume const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_dft__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::volume *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  bool arg7 ;
  std::complex< double > arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  std::complex< double > val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  meep::dft_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:fields_add_dft",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_dft" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_add_dft" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_dft" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_add_dft" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_add_dft" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_add_dft" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fields_add_dft" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fields_add_dft" "', argument " "8"" of type '" "std::complex< double >""'");
  } 
  arg8 = static_cast< std::complex< double > >(val8);
  result = (meep::dft_chunk *)(arg1)->add_dft(arg2,(meep::volume const &)*arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_dft__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::volume *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  meep::dft_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:fields_add_dft",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_dft" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_add_dft" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_dft" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_add_dft" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_add_dft" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_add_dft" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fields_add_dft" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  result = (meep::dft_chunk *)(arg1)->add_dft(arg2,(meep::volume const &)*arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_dft__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::volume *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  meep::dft_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:fields_add_dft",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_dft" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_add_dft" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_dft" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_add_dft" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_add_dft" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_add_dft" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = (meep::dft_chunk *)(arg1)->add_dft(arg2,(meep::volume const &)*arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_dft_pt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::vec *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  meep::dft_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:fields_add_dft_pt",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_dft_pt" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_add_dft_pt" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_dft_pt" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  arg3 = reinterpret_cast< meep::vec * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_add_dft_pt" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_add_dft_pt" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_add_dft_pt" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = (meep::dft_chunk *)(arg1)->add_dft_pt(arg2,(meep::vec const &)*arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_dft__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume_list *arg2 = (meep::volume_list *) 0 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  meep::dft_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:fields_add_dft",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_dft" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__volume_list, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_add_dft" "', argument " "2"" of type '" "meep::volume_list const *""'"); 
  }
  arg2 = reinterpret_cast< meep::volume_list * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_add_dft" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_add_dft" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_add_dft" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_add_dft" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  result = (meep::dft_chunk *)(arg1)->add_dft((meep::volume_list const *)arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_dft__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume_list *arg2 = (meep::volume_list *) 0 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  meep::dft_chunk *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:fields_add_dft",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_dft" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__volume_list, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_add_dft" "', argument " "2"" of type '" "meep::volume_list const *""'"); 
  }
  arg2 = reinterpret_cast< meep::volume_list * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_add_dft" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_add_dft" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_add_dft" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (meep::dft_chunk *)(arg1)->add_dft((meep::volume_list const *)arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__dft_chunk, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_dft(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[14] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 13) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__volume_list, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_fields_add_dft__SWIG_9(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__volume_list, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_fields_add_dft__SWIG_8(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_fields_add_dft__SWIG_7(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_fields_add_dft__SWIG_6(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_fields_add_dft__SWIG_5(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_meep__dft_chunk, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_fields_add_dft__SWIG_4(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_meep__dft_chunk, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      {
                        int res = SWIG_AsVal_bool(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        return _wrap_fields_add_dft__SWIG_3(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_meep__dft_chunk, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      {
                        int res = SWIG_AsVal_bool(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          return _wrap_fields_add_dft__SWIG_2(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_meep__dft_chunk, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      {
                        int res = SWIG_AsVal_bool(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_bool(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            return _wrap_fields_add_dft__SWIG_1(self, args);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 13) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_meep__dft_chunk, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      {
                        int res = SWIG_AsVal_bool(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_bool(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            {
                              int res = SWIG_AsVal_int(argv[12], NULL);
                              _v = SWIG_CheckState(res);
                            }
                            if (_v) {
                              return _wrap_fields_add_dft__SWIG_0(self, args);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_add_dft'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::add_dft(meep::component,meep::volume const &,double,double,int,bool,std::complex< double >,meep::dft_chunk *,bool,std::complex< double >,bool,int)\n"
    "    meep::fields::add_dft(meep::component,meep::volume const &,double,double,int,bool,std::complex< double >,meep::dft_chunk *,bool,std::complex< double >,bool)\n"
    "    meep::fields::add_dft(meep::component,meep::volume const &,double,double,int,bool,std::complex< double >,meep::dft_chunk *,bool,std::complex< double >)\n"
    "    meep::fields::add_dft(meep::component,meep::volume const &,double,double,int,bool,std::complex< double >,meep::dft_chunk *,bool)\n"
    "    meep::fields::add_dft(meep::component,meep::volume const &,double,double,int,bool,std::complex< double >,meep::dft_chunk *)\n"
    "    meep::fields::add_dft(meep::component,meep::volume const &,double,double,int,bool,std::complex< double >)\n"
    "    meep::fields::add_dft(meep::component,meep::volume const &,double,double,int,bool)\n"
    "    meep::fields::add_dft(meep::component,meep::volume const &,double,double,int)\n"
    "    meep::fields::add_dft(meep::volume_list const *,double,double,int,bool)\n"
    "    meep::fields::add_dft(meep::volume_list const *,double,double,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_update_dfts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_update_dfts",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_update_dfts" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  (arg1)->update_dfts();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_dft_flux__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::direction arg2 ;
  meep::volume *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  SwigValueWrapper< meep::dft_flux > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:fields_add_dft_flux",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_dft_flux" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_add_dft_flux" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_add_dft_flux" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_dft_flux" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_add_dft_flux" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_add_dft_flux" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_add_dft_flux" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = (arg1)->add_dft_flux(arg2,(meep::volume const &)*arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj((new meep::dft_flux(static_cast< const meep::dft_flux& >(result))), SWIGTYPE_p_meep__dft_flux, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_dft_flux_box(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  SwigValueWrapper< meep::dft_flux > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:fields_add_dft_flux_box",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_dft_flux_box" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_add_dft_flux_box" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_dft_flux_box" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_add_dft_flux_box" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_add_dft_flux_box" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_add_dft_flux_box" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (arg1)->add_dft_flux_box((meep::volume const &)*arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new meep::dft_flux(static_cast< const meep::dft_flux& >(result))), SWIGTYPE_p_meep__dft_flux, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_dft_flux_plane(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  SwigValueWrapper< meep::dft_flux > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:fields_add_dft_flux_plane",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_dft_flux_plane" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_add_dft_flux_plane" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_dft_flux_plane" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_add_dft_flux_plane" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_add_dft_flux_plane" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_add_dft_flux_plane" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (arg1)->add_dft_flux_plane((meep::volume const &)*arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new meep::dft_flux(static_cast< const meep::dft_flux& >(result))), SWIGTYPE_p_meep__dft_flux, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_dft_flux__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume_list *arg2 = (meep::volume_list *) 0 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  SwigValueWrapper< meep::dft_flux > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:fields_add_dft_flux",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_dft_flux" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__volume_list, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_add_dft_flux" "', argument " "2"" of type '" "meep::volume_list const *""'"); 
  }
  arg2 = reinterpret_cast< meep::volume_list * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_add_dft_flux" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_add_dft_flux" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_add_dft_flux" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (arg1)->add_dft_flux((meep::volume_list const *)arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new meep::dft_flux(static_cast< const meep::dft_flux& >(result))), SWIGTYPE_p_meep__dft_flux, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_dft_flux(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__volume_list, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_fields_add_dft_flux__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_fields_add_dft_flux__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_add_dft_flux'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::add_dft_flux(meep::direction,meep::volume const &,double,double,int)\n"
    "    meep::fields::add_dft_flux(meep::volume_list const *,double,double,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_add_dft_fields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component *arg2 = (meep::component *) 0 ;
  int arg3 ;
  SwigValueWrapper< meep::volume > arg4 ;
  double arg5 ;
  double arg6 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  SwigValueWrapper< meep::dft_fields > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:fields_add_dft_fields",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_dft_fields" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    if (!PyList_Check(obj1)) {
      PyErr_SetString(PyExc_ValueError, "Expected a list");
      SWIG_fail;
    }
    arg3 = PyList_Size(obj1);
    arg2 = new meep::component[arg3];
    
    for (Py_ssize_t i = 0; i < arg3; i++) {
      arg2[i] = (meep::component)PyInteger_AsLong(PyList_GetItem(obj1, i));
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj2, &argp4, SWIGTYPE_p_meep__volume,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_add_dft_fields" "', argument " "4"" of type '" "meep::volume const""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_dft_fields" "', argument " "4"" of type '" "meep::volume const""'");
    } else {
      meep::volume * temp = reinterpret_cast< meep::volume * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  ecode5 = SWIG_AsVal_double(obj3, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_add_dft_fields" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj4, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_add_dft_fields" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_int(obj5, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fields_add_dft_fields" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  result = (arg1)->add_dft_fields(arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj((new meep::dft_fields(static_cast< const meep::dft_fields& >(result))), SWIGTYPE_p_meep__dft_fields, SWIG_POINTER_OWN |  0 );
  {
    delete[] arg2;
  }
  return resultobj;
fail:
  {
    delete[] arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_process_dft_component__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::dft_chunk **arg2 = (meep::dft_chunk **) 0 ;
  int arg3 ;
  int arg4 ;
  meep::component arg5 ;
  char *arg6 = (char *) 0 ;
  std::complex< double > **arg7 = (std::complex< double > **) 0 ;
  int *arg8 = (int *) 0 ;
  int *arg9 = (int *) 0 ;
  void *arg10 = (void *) 0 ;
  void *arg11 = (void *) 0 ;
  meep::component arg12 ;
  bool *arg13 = (bool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  int res10 ;
  int res11 ;
  void *argp13 = 0 ;
  int res13 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOO:fields_process_dft_component",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_process_dft_component" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_process_dft_component" "', argument " "2"" of type '" "meep::dft_chunk **""'"); 
  }
  arg2 = reinterpret_cast< meep::dft_chunk ** >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_process_dft_component" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_process_dft_component" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    arg5 = static_cast<meep::component>(PyInteger_AsLong(obj4));
  }
  res6 = SWIG_AsCharPtrAndSize(obj5, &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fields_process_dft_component" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_process_dft_component" "', argument " "7"" of type '" "std::complex< double > **""'"); 
  }
  arg7 = reinterpret_cast< std::complex< double > ** >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "fields_process_dft_component" "', argument " "8"" of type '" "int *""'"); 
  }
  arg8 = reinterpret_cast< int * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "fields_process_dft_component" "', argument " "9"" of type '" "int *""'"); 
  }
  arg9 = reinterpret_cast< int * >(argp9);
  res10 = SWIG_ConvertPtr(obj9,SWIG_as_voidptrptr(&arg10), 0, 0);
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "fields_process_dft_component" "', argument " "10"" of type '" "void *""'"); 
  }
  res11 = SWIG_ConvertPtr(obj10,SWIG_as_voidptrptr(&arg11), 0, 0);
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "fields_process_dft_component" "', argument " "11"" of type '" "void *""'"); 
  }
  {
    arg12 = static_cast<meep::component>(PyInteger_AsLong(obj11));
  }
  res13 = SWIG_ConvertPtr(obj12, &argp13,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "fields_process_dft_component" "', argument " "13"" of type '" "bool *""'"); 
  }
  arg13 = reinterpret_cast< bool * >(argp13);
  result = (arg1)->process_dft_component(arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return resultobj;
fail:
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_process_dft_component__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::dft_chunk **arg2 = (meep::dft_chunk **) 0 ;
  int arg3 ;
  int arg4 ;
  meep::component arg5 ;
  char *arg6 = (char *) 0 ;
  std::complex< double > **arg7 = (std::complex< double > **) 0 ;
  int *arg8 = (int *) 0 ;
  int *arg9 = (int *) 0 ;
  void *arg10 = (void *) 0 ;
  void *arg11 = (void *) 0 ;
  meep::component arg12 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  int res10 ;
  int res11 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOO:fields_process_dft_component",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_process_dft_component" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_process_dft_component" "', argument " "2"" of type '" "meep::dft_chunk **""'"); 
  }
  arg2 = reinterpret_cast< meep::dft_chunk ** >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_process_dft_component" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_process_dft_component" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    arg5 = static_cast<meep::component>(PyInteger_AsLong(obj4));
  }
  res6 = SWIG_AsCharPtrAndSize(obj5, &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fields_process_dft_component" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_process_dft_component" "', argument " "7"" of type '" "std::complex< double > **""'"); 
  }
  arg7 = reinterpret_cast< std::complex< double > ** >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "fields_process_dft_component" "', argument " "8"" of type '" "int *""'"); 
  }
  arg8 = reinterpret_cast< int * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "fields_process_dft_component" "', argument " "9"" of type '" "int *""'"); 
  }
  arg9 = reinterpret_cast< int * >(argp9);
  res10 = SWIG_ConvertPtr(obj9,SWIG_as_voidptrptr(&arg10), 0, 0);
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "fields_process_dft_component" "', argument " "10"" of type '" "void *""'"); 
  }
  res11 = SWIG_ConvertPtr(obj10,SWIG_as_voidptrptr(&arg11), 0, 0);
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "fields_process_dft_component" "', argument " "11"" of type '" "void *""'"); 
  }
  {
    arg12 = static_cast<meep::component>(PyInteger_AsLong(obj11));
  }
  result = (arg1)->process_dft_component(arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return resultobj;
fail:
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_process_dft_component__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::dft_chunk **arg2 = (meep::dft_chunk **) 0 ;
  int arg3 ;
  int arg4 ;
  meep::component arg5 ;
  char *arg6 = (char *) 0 ;
  std::complex< double > **arg7 = (std::complex< double > **) 0 ;
  int *arg8 = (int *) 0 ;
  int *arg9 = (int *) 0 ;
  void *arg10 = (void *) 0 ;
  void *arg11 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  int res10 ;
  int res11 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:fields_process_dft_component",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_process_dft_component" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_process_dft_component" "', argument " "2"" of type '" "meep::dft_chunk **""'"); 
  }
  arg2 = reinterpret_cast< meep::dft_chunk ** >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_process_dft_component" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_process_dft_component" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    arg5 = static_cast<meep::component>(PyInteger_AsLong(obj4));
  }
  res6 = SWIG_AsCharPtrAndSize(obj5, &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fields_process_dft_component" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_process_dft_component" "', argument " "7"" of type '" "std::complex< double > **""'"); 
  }
  arg7 = reinterpret_cast< std::complex< double > ** >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "fields_process_dft_component" "', argument " "8"" of type '" "int *""'"); 
  }
  arg8 = reinterpret_cast< int * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "fields_process_dft_component" "', argument " "9"" of type '" "int *""'"); 
  }
  arg9 = reinterpret_cast< int * >(argp9);
  res10 = SWIG_ConvertPtr(obj9,SWIG_as_voidptrptr(&arg10), 0, 0);
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "fields_process_dft_component" "', argument " "10"" of type '" "void *""'"); 
  }
  res11 = SWIG_ConvertPtr(obj10,SWIG_as_voidptrptr(&arg11), 0, 0);
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "fields_process_dft_component" "', argument " "11"" of type '" "void *""'"); 
  }
  result = (arg1)->process_dft_component(arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8,arg9,arg10,arg11);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return resultobj;
fail:
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_process_dft_component__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::dft_chunk **arg2 = (meep::dft_chunk **) 0 ;
  int arg3 ;
  int arg4 ;
  meep::component arg5 ;
  char *arg6 = (char *) 0 ;
  std::complex< double > **arg7 = (std::complex< double > **) 0 ;
  int *arg8 = (int *) 0 ;
  int *arg9 = (int *) 0 ;
  void *arg10 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  int res10 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:fields_process_dft_component",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_process_dft_component" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_process_dft_component" "', argument " "2"" of type '" "meep::dft_chunk **""'"); 
  }
  arg2 = reinterpret_cast< meep::dft_chunk ** >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_process_dft_component" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_process_dft_component" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    arg5 = static_cast<meep::component>(PyInteger_AsLong(obj4));
  }
  res6 = SWIG_AsCharPtrAndSize(obj5, &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fields_process_dft_component" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_process_dft_component" "', argument " "7"" of type '" "std::complex< double > **""'"); 
  }
  arg7 = reinterpret_cast< std::complex< double > ** >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "fields_process_dft_component" "', argument " "8"" of type '" "int *""'"); 
  }
  arg8 = reinterpret_cast< int * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "fields_process_dft_component" "', argument " "9"" of type '" "int *""'"); 
  }
  arg9 = reinterpret_cast< int * >(argp9);
  res10 = SWIG_ConvertPtr(obj9,SWIG_as_voidptrptr(&arg10), 0, 0);
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "fields_process_dft_component" "', argument " "10"" of type '" "void *""'"); 
  }
  result = (arg1)->process_dft_component(arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return resultobj;
fail:
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_process_dft_component__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::dft_chunk **arg2 = (meep::dft_chunk **) 0 ;
  int arg3 ;
  int arg4 ;
  meep::component arg5 ;
  char *arg6 = (char *) 0 ;
  std::complex< double > **arg7 = (std::complex< double > **) 0 ;
  int *arg8 = (int *) 0 ;
  int *arg9 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:fields_process_dft_component",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_process_dft_component" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_process_dft_component" "', argument " "2"" of type '" "meep::dft_chunk **""'"); 
  }
  arg2 = reinterpret_cast< meep::dft_chunk ** >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_process_dft_component" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_process_dft_component" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    arg5 = static_cast<meep::component>(PyInteger_AsLong(obj4));
  }
  res6 = SWIG_AsCharPtrAndSize(obj5, &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fields_process_dft_component" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_process_dft_component" "', argument " "7"" of type '" "std::complex< double > **""'"); 
  }
  arg7 = reinterpret_cast< std::complex< double > ** >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "fields_process_dft_component" "', argument " "8"" of type '" "int *""'"); 
  }
  arg8 = reinterpret_cast< int * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "fields_process_dft_component" "', argument " "9"" of type '" "int *""'"); 
  }
  arg9 = reinterpret_cast< int * >(argp9);
  result = (arg1)->process_dft_component(arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8,arg9);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return resultobj;
fail:
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_process_dft_component__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::dft_chunk **arg2 = (meep::dft_chunk **) 0 ;
  int arg3 ;
  int arg4 ;
  meep::component arg5 ;
  char *arg6 = (char *) 0 ;
  std::complex< double > **arg7 = (std::complex< double > **) 0 ;
  int *arg8 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:fields_process_dft_component",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_process_dft_component" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_process_dft_component" "', argument " "2"" of type '" "meep::dft_chunk **""'"); 
  }
  arg2 = reinterpret_cast< meep::dft_chunk ** >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_process_dft_component" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_process_dft_component" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    arg5 = static_cast<meep::component>(PyInteger_AsLong(obj4));
  }
  res6 = SWIG_AsCharPtrAndSize(obj5, &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fields_process_dft_component" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_process_dft_component" "', argument " "7"" of type '" "std::complex< double > **""'"); 
  }
  arg7 = reinterpret_cast< std::complex< double > ** >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "fields_process_dft_component" "', argument " "8"" of type '" "int *""'"); 
  }
  arg8 = reinterpret_cast< int * >(argp8);
  result = (arg1)->process_dft_component(arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return resultobj;
fail:
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_process_dft_component__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::dft_chunk **arg2 = (meep::dft_chunk **) 0 ;
  int arg3 ;
  int arg4 ;
  meep::component arg5 ;
  char *arg6 = (char *) 0 ;
  std::complex< double > **arg7 = (std::complex< double > **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:fields_process_dft_component",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_process_dft_component" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_process_dft_component" "', argument " "2"" of type '" "meep::dft_chunk **""'"); 
  }
  arg2 = reinterpret_cast< meep::dft_chunk ** >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_process_dft_component" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_process_dft_component" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    arg5 = static_cast<meep::component>(PyInteger_AsLong(obj4));
  }
  res6 = SWIG_AsCharPtrAndSize(obj5, &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fields_process_dft_component" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fields_process_dft_component" "', argument " "7"" of type '" "std::complex< double > **""'"); 
  }
  arg7 = reinterpret_cast< std::complex< double > ** >(argp7);
  result = (arg1)->process_dft_component(arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return resultobj;
fail:
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_process_dft_component__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::dft_chunk **arg2 = (meep::dft_chunk **) 0 ;
  int arg3 ;
  int arg4 ;
  meep::component arg5 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:fields_process_dft_component",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_process_dft_component" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_process_dft_component" "', argument " "2"" of type '" "meep::dft_chunk **""'"); 
  }
  arg2 = reinterpret_cast< meep::dft_chunk ** >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_process_dft_component" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_process_dft_component" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    arg5 = static_cast<meep::component>(PyInteger_AsLong(obj4));
  }
  res6 = SWIG_AsCharPtrAndSize(obj5, &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fields_process_dft_component" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  result = (arg1)->process_dft_component(arg2,arg3,arg4,arg5,(char const *)arg6);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return resultobj;
fail:
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_process_dft_component(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[14] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 13) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_meep__dft_chunk, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              _v = PyInteger_Check(argv[4]) && PyInteger_AsLong(argv[4]) < 100;
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_fields_process_dft_component__SWIG_7(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_meep__dft_chunk, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              _v = PyInteger_Check(argv[4]) && PyInteger_AsLong(argv[4]) < 100;
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_p_std__complexT_double_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_fields_process_dft_component__SWIG_6(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_meep__dft_chunk, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              _v = PyInteger_Check(argv[4]) && PyInteger_AsLong(argv[4]) < 100;
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_p_std__complexT_double_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_int, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_fields_process_dft_component__SWIG_5(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_meep__dft_chunk, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              _v = PyInteger_Check(argv[4]) && PyInteger_AsLong(argv[4]) < 100;
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_p_std__complexT_double_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_int, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_int, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_fields_process_dft_component__SWIG_4(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_meep__dft_chunk, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              _v = PyInteger_Check(argv[4]) && PyInteger_AsLong(argv[4]) < 100;
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_p_std__complexT_double_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_int, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_int, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *ptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &ptr, 0, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        return _wrap_fields_process_dft_component__SWIG_3(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_meep__dft_chunk, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              _v = PyInteger_Check(argv[4]) && PyInteger_AsLong(argv[4]) < 100;
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_p_std__complexT_double_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_int, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_int, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *ptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &ptr, 0, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        void *ptr = 0;
                        int res = SWIG_ConvertPtr(argv[10], &ptr, 0, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          return _wrap_fields_process_dft_component__SWIG_2(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_meep__dft_chunk, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              _v = PyInteger_Check(argv[4]) && PyInteger_AsLong(argv[4]) < 100;
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_p_std__complexT_double_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_int, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_int, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *ptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &ptr, 0, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        void *ptr = 0;
                        int res = SWIG_ConvertPtr(argv[10], &ptr, 0, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          {
                            _v = PyInteger_Check(argv[11]) && PyInteger_AsLong(argv[11]) < 100;
                          }
                          if (_v) {
                            return _wrap_fields_process_dft_component__SWIG_1(self, args);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 13) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_meep__dft_chunk, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              _v = PyInteger_Check(argv[4]) && PyInteger_AsLong(argv[4]) < 100;
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_p_std__complexT_double_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_int, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_int, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *ptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &ptr, 0, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        void *ptr = 0;
                        int res = SWIG_ConvertPtr(argv[10], &ptr, 0, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          {
                            _v = PyInteger_Check(argv[11]) && PyInteger_AsLong(argv[11]) < 100;
                          }
                          if (_v) {
                            void *vptr = 0;
                            int res = SWIG_ConvertPtr(argv[12], &vptr, SWIGTYPE_p_bool, 0);
                            _v = SWIG_CheckState(res);
                            if (_v) {
                              return _wrap_fields_process_dft_component__SWIG_0(self, args);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_process_dft_component'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::process_dft_component(meep::dft_chunk **,int,int,meep::component,char const *,std::complex< double > **,int *,int *,void *,void *,meep::component,bool *)\n"
    "    meep::fields::process_dft_component(meep::dft_chunk **,int,int,meep::component,char const *,std::complex< double > **,int *,int *,void *,void *,meep::component)\n"
    "    meep::fields::process_dft_component(meep::dft_chunk **,int,int,meep::component,char const *,std::complex< double > **,int *,int *,void *,void *)\n"
    "    meep::fields::process_dft_component(meep::dft_chunk **,int,int,meep::component,char const *,std::complex< double > **,int *,int *,void *)\n"
    "    meep::fields::process_dft_component(meep::dft_chunk **,int,int,meep::component,char const *,std::complex< double > **,int *,int *)\n"
    "    meep::fields::process_dft_component(meep::dft_chunk **,int,int,meep::component,char const *,std::complex< double > **,int *)\n"
    "    meep::fields::process_dft_component(meep::dft_chunk **,int,int,meep::component,char const *,std::complex< double > **)\n"
    "    meep::fields::process_dft_component(meep::dft_chunk **,int,int,meep::component,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_output_dft_components(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::dft_chunk **arg2 = (meep::dft_chunk **) 0 ;
  int arg3 ;
  SwigValueWrapper< meep::volume > arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:fields_output_dft_components",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_dft_components" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_meep__dft_chunk, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_output_dft_components" "', argument " "2"" of type '" "meep::dft_chunk **""'"); 
  }
  arg2 = reinterpret_cast< meep::dft_chunk ** >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_output_dft_components" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__volume,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_output_dft_components" "', argument " "4"" of type '" "meep::volume""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_dft_components" "', argument " "4"" of type '" "meep::volume""'");
    } else {
      meep::volume * temp = reinterpret_cast< meep::volume * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "fields_output_dft_components" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  (arg1)->output_dft_components(arg2,arg3,arg4,(char const *)arg5);
  resultobj = SWIG_Py_Void();
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_dft__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  SwigValueWrapper< meep::dft_flux > arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_output_dft",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_dft" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__dft_flux,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_output_dft" "', argument " "2"" of type '" "meep::dft_flux""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_dft" "', argument " "2"" of type '" "meep::dft_flux""'");
    } else {
      meep::dft_flux * temp = reinterpret_cast< meep::dft_flux * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_output_dft" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->output_dft(arg2,(char const *)arg3);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_dft__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  SwigValueWrapper< meep::dft_force > arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_output_dft",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_dft" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__dft_force,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_output_dft" "', argument " "2"" of type '" "meep::dft_force""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_dft" "', argument " "2"" of type '" "meep::dft_force""'");
    } else {
      meep::dft_force * temp = reinterpret_cast< meep::dft_force * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_output_dft" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->output_dft(arg2,(char const *)arg3);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_dft__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  SwigValueWrapper< meep::dft_near2far > arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_output_dft",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_dft" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__dft_near2far,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_output_dft" "', argument " "2"" of type '" "meep::dft_near2far""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_dft" "', argument " "2"" of type '" "meep::dft_near2far""'");
    } else {
      meep::dft_near2far * temp = reinterpret_cast< meep::dft_near2far * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_output_dft" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->output_dft(arg2,(char const *)arg3);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_dft__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  SwigValueWrapper< meep::dft_fields > arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_output_dft",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_dft" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__dft_fields,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_output_dft" "', argument " "2"" of type '" "meep::dft_fields""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_dft" "', argument " "2"" of type '" "meep::dft_fields""'");
    } else {
      meep::dft_fields * temp = reinterpret_cast< meep::dft_fields * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_output_dft" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->output_dft(arg2,(char const *)arg3);
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_output_dft(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__dft_flux, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_fields_output_dft__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__dft_force, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_fields_output_dft__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__dft_near2far, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_fields_output_dft__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__dft_fields, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_fields_output_dft__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_output_dft'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::output_dft(meep::dft_flux,char const *)\n"
    "    meep::fields::output_dft(meep::dft_force,char const *)\n"
    "    meep::fields::output_dft(meep::dft_near2far,char const *)\n"
    "    meep::fields::output_dft(meep::dft_fields,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_output_mode_fields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigValueWrapper< meep::dft_flux > arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fields_output_mode_fields",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_output_mode_fields" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_output_mode_fields" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__dft_flux,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_output_mode_fields" "', argument " "3"" of type '" "meep::dft_flux""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_output_mode_fields" "', argument " "3"" of type '" "meep::dft_flux""'");
    } else {
      meep::dft_flux * temp = reinterpret_cast< meep::dft_flux * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_output_mode_fields" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->output_mode_fields(arg2,arg3,(char const *)arg4);
  resultobj = SWIG_Py_Void();
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_dft_array__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  SwigValueWrapper< meep::dft_flux > arg2 ;
  meep::component arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  int *arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyArrayObject *array6 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:fields_get_dft_array",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_dft_array" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__dft_flux,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_dft_array" "', argument " "2"" of type '" "meep::dft_flux""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_dft_array" "', argument " "2"" of type '" "meep::dft_flux""'");
    } else {
      meep::dft_flux * temp = reinterpret_cast< meep::dft_flux * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    arg3 = static_cast<meep::component>(PyInteger_AsLong(obj2));
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_get_dft_array" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "fields_get_dft_array" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  {
    npy_intp size[1] = {
      3 
    };
    array6 = obj_to_array_no_conversion(obj5, NPY_INT);
    if (!array6 || !require_dimensions(array6,1) || !require_size(array6, size, 1) ||
      !require_contiguous(array6) || !require_native(array6)) SWIG_fail;
    arg6 = (int *) array_data(array6);
  }
  result = (std::complex< double > *)(arg1)->get_dft_array(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_dft_array__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  SwigValueWrapper< meep::dft_fields > arg2 ;
  meep::component arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  int *arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyArrayObject *array6 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:fields_get_dft_array",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_dft_array" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__dft_fields,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_dft_array" "', argument " "2"" of type '" "meep::dft_fields""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_dft_array" "', argument " "2"" of type '" "meep::dft_fields""'");
    } else {
      meep::dft_fields * temp = reinterpret_cast< meep::dft_fields * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    arg3 = static_cast<meep::component>(PyInteger_AsLong(obj2));
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_get_dft_array" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "fields_get_dft_array" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  {
    npy_intp size[1] = {
      3 
    };
    array6 = obj_to_array_no_conversion(obj5, NPY_INT);
    if (!array6 || !require_dimensions(array6,1) || !require_size(array6, size, 1) ||
      !require_contiguous(array6) || !require_native(array6)) SWIG_fail;
    arg6 = (int *) array_data(array6);
  }
  result = (std::complex< double > *)(arg1)->get_dft_array(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_dft_array__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  SwigValueWrapper< meep::dft_force > arg2 ;
  meep::component arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  int *arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyArrayObject *array6 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:fields_get_dft_array",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_dft_array" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__dft_force,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_dft_array" "', argument " "2"" of type '" "meep::dft_force""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_dft_array" "', argument " "2"" of type '" "meep::dft_force""'");
    } else {
      meep::dft_force * temp = reinterpret_cast< meep::dft_force * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    arg3 = static_cast<meep::component>(PyInteger_AsLong(obj2));
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_get_dft_array" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "fields_get_dft_array" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  {
    npy_intp size[1] = {
      3 
    };
    array6 = obj_to_array_no_conversion(obj5, NPY_INT);
    if (!array6 || !require_dimensions(array6,1) || !require_size(array6, size, 1) ||
      !require_contiguous(array6) || !require_native(array6)) SWIG_fail;
    arg6 = (int *) array_data(array6);
  }
  result = (std::complex< double > *)(arg1)->get_dft_array(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_dft_array__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  SwigValueWrapper< meep::dft_near2far > arg2 ;
  meep::component arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  int *arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyArrayObject *array6 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:fields_get_dft_array",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_dft_array" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__dft_near2far,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_dft_array" "', argument " "2"" of type '" "meep::dft_near2far""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_dft_array" "', argument " "2"" of type '" "meep::dft_near2far""'");
    } else {
      meep::dft_near2far * temp = reinterpret_cast< meep::dft_near2far * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    arg3 = static_cast<meep::component>(PyInteger_AsLong(obj2));
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_get_dft_array" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "fields_get_dft_array" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  {
    npy_intp size[1] = {
      3 
    };
    array6 = obj_to_array_no_conversion(obj5, NPY_INT);
    if (!array6 || !require_dimensions(array6,1) || !require_size(array6, size, 1) ||
      !require_contiguous(array6) || !require_native(array6)) SWIG_fail;
    arg6 = (int *) array_data(array6);
  }
  result = (std::complex< double > *)(arg1)->get_dft_array(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_dft_array(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__dft_flux, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PyInteger_Check(argv[2]) && PyInteger_AsLong(argv[2]) < 100;
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_int, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                _v = is_array(argv[5]) && PyArray_EquivTypenums(array_type(argv[5]),
                  NPY_INT);
              }
              if (_v) {
                return _wrap_fields_get_dft_array__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__dft_fields, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PyInteger_Check(argv[2]) && PyInteger_AsLong(argv[2]) < 100;
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_int, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                _v = is_array(argv[5]) && PyArray_EquivTypenums(array_type(argv[5]),
                  NPY_INT);
              }
              if (_v) {
                return _wrap_fields_get_dft_array__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__dft_force, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PyInteger_Check(argv[2]) && PyInteger_AsLong(argv[2]) < 100;
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_int, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                _v = is_array(argv[5]) && PyArray_EquivTypenums(array_type(argv[5]),
                  NPY_INT);
              }
              if (_v) {
                return _wrap_fields_get_dft_array__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__dft_near2far, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PyInteger_Check(argv[2]) && PyInteger_AsLong(argv[2]) < 100;
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_int, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                _v = is_array(argv[5]) && PyArray_EquivTypenums(array_type(argv[5]),
                  NPY_INT);
              }
              if (_v) {
                return _wrap_fields_get_dft_array__SWIG_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_get_dft_array'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::get_dft_array(meep::dft_flux,meep::component,int,int *,int [3])\n"
    "    meep::fields::get_dft_array(meep::dft_fields,meep::component,int,int *,int [3])\n"
    "    meep::fields::get_dft_array(meep::dft_force,meep::component,int,int *,int [3])\n"
    "    meep::fields::get_dft_array(meep::dft_near2far,meep::component,int,int *,int [3])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_get_overlap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigValueWrapper< meep::dft_flux > arg4 ;
  int arg5 ;
  std::complex< double > *arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int res3 ;
  void *argp4 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:fields_get_overlap",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_overlap" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_overlap" "', argument " "2"" of type '" "void *""'"); 
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_get_overlap" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__dft_flux,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_get_overlap" "', argument " "4"" of type '" "meep::dft_flux""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_overlap" "', argument " "4"" of type '" "meep::dft_flux""'");
    } else {
      meep::dft_flux * temp = reinterpret_cast< meep::dft_flux * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_get_overlap" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fields_get_overlap" "', argument " "6"" of type '" "std::complex< double > [2]""'"); 
  } 
  arg6 = reinterpret_cast< std::complex< double > * >(argp6);
  (arg1)->get_overlap(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_mode_flux_overlap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *arg2 = (void *) 0 ;
  SwigValueWrapper< meep::dft_flux > arg3 ;
  int arg4 ;
  std::complex< double > *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:fields_get_mode_flux_overlap",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_mode_flux_overlap" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_mode_flux_overlap" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__dft_flux,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_get_mode_flux_overlap" "', argument " "3"" of type '" "meep::dft_flux""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_mode_flux_overlap" "', argument " "3"" of type '" "meep::dft_flux""'");
    } else {
      meep::dft_flux * temp = reinterpret_cast< meep::dft_flux * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_get_mode_flux_overlap" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "fields_get_mode_flux_overlap" "', argument " "5"" of type '" "std::complex< double > [2]""'"); 
  } 
  arg5 = reinterpret_cast< std::complex< double > * >(argp5);
  (arg1)->get_mode_flux_overlap(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_mode_mode_overlap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  SwigValueWrapper< meep::dft_flux > arg4 ;
  std::complex< double > *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int res3 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:fields_get_mode_mode_overlap",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_mode_mode_overlap" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_mode_mode_overlap" "', argument " "2"" of type '" "void *""'"); 
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_get_mode_mode_overlap" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__dft_flux,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_get_mode_mode_overlap" "', argument " "4"" of type '" "meep::dft_flux""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_mode_mode_overlap" "', argument " "4"" of type '" "meep::dft_flux""'");
    } else {
      meep::dft_flux * temp = reinterpret_cast< meep::dft_flux * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "fields_get_mode_mode_overlap" "', argument " "5"" of type '" "std::complex< double > [2]""'"); 
  } 
  arg5 = reinterpret_cast< std::complex< double > * >(argp5);
  (arg1)->get_mode_mode_overlap(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_dft_force(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume_list *arg2 = (meep::volume_list *) 0 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  SwigValueWrapper< meep::dft_force > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:fields_add_dft_force",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_dft_force" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__volume_list, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_add_dft_force" "', argument " "2"" of type '" "meep::volume_list const *""'"); 
  }
  arg2 = reinterpret_cast< meep::volume_list * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_add_dft_force" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_add_dft_force" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_add_dft_force" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (arg1)->add_dft_force((meep::volume_list const *)arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new meep::dft_force(static_cast< const meep::dft_force& >(result))), SWIGTYPE_p_meep__dft_force, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_dft_near2far(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume_list *arg2 = (meep::volume_list *) 0 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  SwigValueWrapper< meep::dft_near2far > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:fields_add_dft_near2far",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_dft_near2far" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__volume_list, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_add_dft_near2far" "', argument " "2"" of type '" "meep::volume_list const *""'"); 
  }
  arg2 = reinterpret_cast< meep::volume_list * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_add_dft_near2far" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_add_dft_near2far" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_add_dft_near2far" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (arg1)->add_dft_near2far((meep::volume_list const *)arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new meep::dft_near2far(static_cast< const meep::dft_near2far& >(result))), SWIGTYPE_p_meep__dft_near2far, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_chi1inv__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::direction arg3 ;
  meep::vec *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fields_get_chi1inv",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_chi1inv" "', argument " "1"" of type '" "meep::fields const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_get_chi1inv" "', argument " "3"" of type '" "meep::direction""'");
  } 
  arg3 = static_cast< meep::direction >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_get_chi1inv" "', argument " "4"" of type '" "meep::vec const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_chi1inv" "', argument " "4"" of type '" "meep::vec const &""'"); 
  }
  arg4 = reinterpret_cast< meep::vec * >(argp4);
  result = (double)((meep::fields const *)arg1)->get_chi1inv(arg2,arg3,(meep::vec const &)*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_inveps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::direction arg3 ;
  meep::vec *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fields_get_inveps",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_inveps" "', argument " "1"" of type '" "meep::fields const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_get_inveps" "', argument " "3"" of type '" "meep::direction""'");
  } 
  arg3 = static_cast< meep::direction >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_get_inveps" "', argument " "4"" of type '" "meep::vec const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_inveps" "', argument " "4"" of type '" "meep::vec const &""'"); 
  }
  arg4 = reinterpret_cast< meep::vec * >(argp4);
  result = (double)((meep::fields const *)arg1)->get_inveps(arg2,arg3,(meep::vec const &)*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_eps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_get_eps",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_eps" "', argument " "1"" of type '" "meep::fields const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_eps" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_eps" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = (double)((meep::fields const *)arg1)->get_eps((meep::vec const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_mu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_get_mu",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_mu" "', argument " "1"" of type '" "meep::fields const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_mu" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_mu" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = (double)((meep::fields const *)arg1)->get_mu((meep::vec const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_point(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::monitor_point *arg2 = (meep::monitor_point *) 0 ;
  meep::vec *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_get_point",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_point" "', argument " "1"" of type '" "meep::fields const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__monitor_point, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_point" "', argument " "2"" of type '" "meep::monitor_point *""'"); 
  }
  arg2 = reinterpret_cast< meep::monitor_point * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_get_point" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_point" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  arg3 = reinterpret_cast< meep::vec * >(argp3);
  ((meep::fields const *)arg1)->get_point(arg2,(meep::vec const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_new_point__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::vec *arg2 = 0 ;
  meep::monitor_point *arg3 = (meep::monitor_point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::monitor_point *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_get_new_point",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_new_point" "', argument " "1"" of type '" "meep::fields const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_new_point" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_new_point" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_meep__monitor_point, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_get_new_point" "', argument " "3"" of type '" "meep::monitor_point *""'"); 
  }
  arg3 = reinterpret_cast< meep::monitor_point * >(argp3);
  result = (meep::monitor_point *)((meep::fields const *)arg1)->get_new_point((meep::vec const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__monitor_point, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_new_point__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::vec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::monitor_point *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_get_new_point",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_new_point" "', argument " "1"" of type '" "meep::fields const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_get_new_point" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_new_point" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  result = (meep::monitor_point *)((meep::fields const *)arg1)->get_new_point((meep::vec const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__monitor_point, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_new_point(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__vec, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_fields_get_new_point__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__vec, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_meep__monitor_point, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_fields_get_new_point__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_get_new_point'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::get_new_point(meep::vec const &,meep::monitor_point *) const\n"
    "    meep::fields::get_new_point(meep::vec const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_get_field__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  int arg2 ;
  meep::vec *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_get_field",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_field" "', argument " "1"" of type '" "meep::fields const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_get_field" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_get_field" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_field" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  arg3 = reinterpret_cast< meep::vec * >(argp3);
  result = ((meep::fields const *)arg1)->get_field(arg2,(meep::vec const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_field_from_comp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::vec *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_get_field_from_comp",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_field_from_comp" "', argument " "1"" of type '" "meep::fields const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_get_field_from_comp" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_field_from_comp" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  arg3 = reinterpret_cast< meep::vec * >(argp3);
  result = ((meep::fields const *)arg1)->get_field(arg2,(meep::vec const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_field__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::derived_component arg2 ;
  meep::vec *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_get_field",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_field" "', argument " "1"" of type '" "meep::fields const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::derived_component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_get_field" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_field" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  arg3 = reinterpret_cast< meep::vec * >(argp3);
  result = (double)((meep::fields const *)arg1)->get_field(arg2,(meep::vec const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_synchronize_magnetic_fields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_synchronize_magnetic_fields",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_synchronize_magnetic_fields" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  (arg1)->synchronize_magnetic_fields();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_restore_magnetic_fields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_restore_magnetic_fields",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_restore_magnetic_fields" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  (arg1)->restore_magnetic_fields();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_energy_in_box(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_energy_in_box",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_energy_in_box" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_energy_in_box" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_energy_in_box" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  result = (double)(arg1)->energy_in_box((meep::volume const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_electric_energy_in_box(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_electric_energy_in_box",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_electric_energy_in_box" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_electric_energy_in_box" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_electric_energy_in_box" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  result = (double)(arg1)->electric_energy_in_box((meep::volume const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_magnetic_energy_in_box(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_magnetic_energy_in_box",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_magnetic_energy_in_box" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_magnetic_energy_in_box" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_magnetic_energy_in_box" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  result = (double)(arg1)->magnetic_energy_in_box((meep::volume const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_thermo_energy_in_box(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_thermo_energy_in_box",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_thermo_energy_in_box" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_thermo_energy_in_box" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_thermo_energy_in_box" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  result = (double)(arg1)->thermo_energy_in_box((meep::volume const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_total_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_total_energy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_total_energy" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (double)(arg1)->total_energy();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_field_energy_in_box__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_field_energy_in_box",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_field_energy_in_box" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_field_energy_in_box" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_field_energy_in_box" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  result = (double)(arg1)->field_energy_in_box((meep::volume const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_field_energy_in_box__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::volume *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_field_energy_in_box",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_field_energy_in_box" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_field_energy_in_box" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_field_energy_in_box" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  result = (double)(arg1)->field_energy_in_box(arg2,(meep::volume const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_field_energy_in_box(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__volume, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_fields_field_energy_in_box__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__volume, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_fields_field_energy_in_box__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_field_energy_in_box'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::field_energy_in_box(meep::volume const &)\n"
    "    meep::fields::field_energy_in_box(meep::component,meep::volume const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_field_energy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_field_energy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_field_energy" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (double)(arg1)->field_energy();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_flux_in_box_wrongH(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::direction arg2 ;
  meep::volume *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_flux_in_box_wrongH",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_flux_in_box_wrongH" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_flux_in_box_wrongH" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_flux_in_box_wrongH" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_flux_in_box_wrongH" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  result = (double)(arg1)->flux_in_box_wrongH(arg2,(meep::volume const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_flux_in_box(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::direction arg2 ;
  meep::volume *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_flux_in_box",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_flux_in_box" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_flux_in_box" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_flux_in_box" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_flux_in_box" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  result = (double)(arg1)->flux_in_box(arg2,(meep::volume const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_flux_vol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::direction arg2 ;
  meep::volume *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::flux_vol *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_add_flux_vol",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_flux_vol" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_add_flux_vol" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_add_flux_vol" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_flux_vol" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  result = (meep::flux_vol *)(arg1)->add_flux_vol(arg2,(meep::volume const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__flux_vol, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_flux_plane__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::flux_vol *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_add_flux_plane",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_flux_plane" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_add_flux_plane" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_flux_plane" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  result = (meep::flux_vol *)(arg1)->add_flux_plane((meep::volume const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__flux_vol, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_flux_plane__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::vec *arg2 = 0 ;
  meep::vec *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::flux_vol *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_add_flux_plane",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_add_flux_plane" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_add_flux_plane" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_flux_plane" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_add_flux_plane" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_add_flux_plane" "', argument " "3"" of type '" "meep::vec const &""'"); 
  }
  arg3 = reinterpret_cast< meep::vec * >(argp3);
  result = (meep::flux_vol *)(arg1)->add_flux_plane((meep::vec const &)*arg2,(meep::vec const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__flux_vol, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_add_flux_plane(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__volume, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_fields_add_flux_plane__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_meep__vec, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__vec, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_fields_add_flux_plane__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_add_flux_plane'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::add_flux_plane(meep::volume const &)\n"
    "    meep::fields::add_flux_plane(meep::vec const &,meep::vec const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_electric_energy_max_in_box(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_electric_energy_max_in_box",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_electric_energy_max_in_box" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_electric_energy_max_in_box" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_electric_energy_max_in_box" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  result = (double)(arg1)->electric_energy_max_in_box((meep::volume const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_modal_volume_in_box(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_modal_volume_in_box",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_modal_volume_in_box" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_modal_volume_in_box" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_modal_volume_in_box" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  result = (double)(arg1)->modal_volume_in_box((meep::volume const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_electric_sqr_weighted_integral(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  double (*arg2)(meep::vec const &) = (double (*)(meep::vec const &)) 0 ;
  meep::volume *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_electric_sqr_weighted_integral",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_electric_sqr_weighted_integral" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    if (obj1 == Py_None) {
      arg2 = NULL;
      py_callback = NULL;
    } else {
      arg2 = py_callback_wrap;
      py_callback = obj1;
      Py_INCREF(py_callback);
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_electric_sqr_weighted_integral" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_electric_sqr_weighted_integral" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  result = (double)(arg1)->electric_sqr_weighted_integral(arg2,(meep::volume const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    Py_XDECREF(py_callback);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_callback);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_electric_energy_weighted_integral(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  double (*arg2)(meep::vec const &) = (double (*)(meep::vec const &)) 0 ;
  meep::volume *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_electric_energy_weighted_integral",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_electric_energy_weighted_integral" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    if (obj1 == Py_None) {
      arg2 = NULL;
      py_callback = NULL;
    } else {
      arg2 = py_callback_wrap;
      py_callback = obj1;
      Py_INCREF(py_callback);
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_electric_energy_weighted_integral" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_electric_energy_weighted_integral" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  result = (double)(arg1)->electric_energy_weighted_integral(arg2,(meep::volume const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    Py_XDECREF(py_callback);
  }
  return resultobj;
fail:
  {
    Py_XDECREF(py_callback);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_set_output_directory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_set_output_directory",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_set_output_directory" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_set_output_directory" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->set_output_directory((char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_verbose__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_verbose",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_verbose" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_verbose" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->verbose(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_verbose__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_verbose",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_verbose" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  (arg1)->verbose();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_verbose(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_fields_verbose__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_fields_verbose__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_verbose'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::verbose(int)\n"
    "    meep::fields::verbose()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_count_volume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_count_volume",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_count_volume" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  result = (double)(arg1)->count_volume(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_have_component(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_have_component",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_have_component" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  result = (bool)(arg1)->have_component(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_max_eps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_max_eps",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_max_eps" "', argument " "1"" of type '" "meep::fields const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  result = (double)((meep::fields const *)arg1)->max_eps();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_step_boundaries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::field_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_step_boundaries",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_step_boundaries" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_step_boundaries" "', argument " "2"" of type '" "meep::field_type""'");
  } 
  arg2 = static_cast< meep::field_type >(val2);
  (arg1)->step_boundaries(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_nosize_direction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::direction arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_nosize_direction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_nosize_direction" "', argument " "1"" of type '" "meep::fields const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_nosize_direction" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  result = (bool)((meep::fields const *)arg1)->nosize_direction(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_normal_direction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::volume *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::direction result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_normal_direction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_normal_direction" "', argument " "1"" of type '" "meep::fields const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_normal_direction" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_normal_direction" "', argument " "2"" of type '" "meep::volume const &""'"); 
  }
  arg2 = reinterpret_cast< meep::volume * >(argp2);
  result = (meep::direction)((meep::fields const *)arg1)->normal_direction((meep::volume const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_casimir_stress_dct_integral__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::direction arg2 ;
  meep::direction arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  meep::field_type arg7 ;
  SwigValueWrapper< meep::volume > arg8 ;
  bool arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:fields_casimir_stress_dct_integral",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_casimir_stress_dct_integral" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_casimir_stress_dct_integral" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_casimir_stress_dct_integral" "', argument " "3"" of type '" "meep::direction""'");
  } 
  arg3 = static_cast< meep::direction >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_casimir_stress_dct_integral" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_casimir_stress_dct_integral" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_casimir_stress_dct_integral" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fields_casimir_stress_dct_integral" "', argument " "7"" of type '" "meep::field_type""'");
  } 
  arg7 = static_cast< meep::field_type >(val7);
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_meep__volume,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "fields_casimir_stress_dct_integral" "', argument " "8"" of type '" "meep::volume""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_casimir_stress_dct_integral" "', argument " "8"" of type '" "meep::volume""'");
    } else {
      meep::volume * temp = reinterpret_cast< meep::volume * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  ecode9 = SWIG_AsVal_bool(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "fields_casimir_stress_dct_integral" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  result = (arg1)->casimir_stress_dct_integral(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_casimir_stress_dct_integral__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::direction arg2 ;
  meep::direction arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  meep::field_type arg7 ;
  SwigValueWrapper< meep::volume > arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:fields_casimir_stress_dct_integral",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_casimir_stress_dct_integral" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_casimir_stress_dct_integral" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_casimir_stress_dct_integral" "', argument " "3"" of type '" "meep::direction""'");
  } 
  arg3 = static_cast< meep::direction >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fields_casimir_stress_dct_integral" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fields_casimir_stress_dct_integral" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fields_casimir_stress_dct_integral" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fields_casimir_stress_dct_integral" "', argument " "7"" of type '" "meep::field_type""'");
  } 
  arg7 = static_cast< meep::field_type >(val7);
  {
    res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_meep__volume,  0  | 0);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "fields_casimir_stress_dct_integral" "', argument " "8"" of type '" "meep::volume""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_casimir_stress_dct_integral" "', argument " "8"" of type '" "meep::volume""'");
    } else {
      meep::volume * temp = reinterpret_cast< meep::volume * >(argp8);
      arg8 = *temp;
      if (SWIG_IsNewObj(res8)) delete temp;
    }
  }
  result = (arg1)->casimir_stress_dct_integral(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_casimir_stress_dct_integral(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_meep__volume, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_fields_casimir_stress_dct_integral__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  int res = SWIG_ConvertPtr(argv[7], 0, SWIGTYPE_p_meep__volume, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    {
                      int res = SWIG_AsVal_bool(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_fields_casimir_stress_dct_integral__SWIG_0(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_casimir_stress_dct_integral'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::casimir_stress_dct_integral(meep::direction,meep::direction,double,double,double,meep::field_type,meep::volume,bool)\n"
    "    meep::fields::casimir_stress_dct_integral(meep::direction,meep::direction,double,double,double,meep::field_type,meep::volume)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_set_solve_cw_omega(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  std::complex< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fields_set_solve_cw_omega",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_set_solve_cw_omega" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fields_set_solve_cw_omega" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  (arg1)->set_solve_cw_omega(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_unset_solve_cw_omega(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fields_unset_solve_cw_omega",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_unset_solve_cw_omega" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  (arg1)->unset_solve_cw_omega();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_field__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::ivec *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fields_get_field",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_field" "', argument " "1"" of type '" "meep::fields const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_get_field" "', argument " "3"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_field" "', argument " "3"" of type '" "meep::ivec const &""'"); 
  }
  arg3 = reinterpret_cast< meep::ivec * >(argp3);
  result = ((meep::fields const *)arg1)->get_field(arg2,(meep::ivec const &)*arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_field(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) >= 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__vec, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_fields_get_field__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__ivec, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_fields_get_field__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_meep__vec, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_fields_get_field__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_get_field'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::get_field(int,meep::vec const &) const\n"
    "    meep::fields::get_field(meep::derived_component,meep::vec const &) const\n"
    "    meep::fields::get_field(meep::component,meep::ivec const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_get_chi1inv__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component arg2 ;
  meep::direction arg3 ;
  meep::ivec *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fields_get_chi1inv",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_get_chi1inv" "', argument " "1"" of type '" "meep::fields const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  {
    arg2 = static_cast<meep::component>(PyInteger_AsLong(obj1));
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fields_get_chi1inv" "', argument " "3"" of type '" "meep::direction""'");
  } 
  arg3 = static_cast< meep::direction >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_meep__ivec,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_get_chi1inv" "', argument " "4"" of type '" "meep::ivec const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fields_get_chi1inv" "', argument " "4"" of type '" "meep::ivec const &""'"); 
  }
  arg4 = reinterpret_cast< meep::ivec * >(argp4);
  result = (double)((meep::fields const *)arg1)->get_chi1inv(arg2,arg3,(meep::ivec const &)*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fields_get_chi1inv(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__vec, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_fields_get_chi1inv__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__fields, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyInteger_Check(argv[1]) && PyInteger_AsLong(argv[1]) < 100;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_meep__ivec, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_fields_get_chi1inv__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fields_get_chi1inv'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::fields::get_chi1inv(meep::component,meep::direction,meep::vec const &) const\n"
    "    meep::fields::get_chi1inv(meep::component,meep::direction,meep::ivec const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fields_locate_component_point(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::component *arg2 = (meep::component *) 0 ;
  meep::ivec *arg3 = (meep::ivec *) 0 ;
  std::complex< double > *arg4 = (std::complex< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:fields_locate_component_point",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fields_locate_component_point" "', argument " "1"" of type '" "meep::fields const *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__component, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fields_locate_component_point" "', argument " "2"" of type '" "meep::component *""'"); 
  }
  arg2 = reinterpret_cast< meep::component * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_meep__ivec, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fields_locate_component_point" "', argument " "3"" of type '" "meep::ivec *""'"); 
  }
  arg3 = reinterpret_cast< meep::ivec * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fields_locate_component_point" "', argument " "4"" of type '" "std::complex< double > *""'"); 
  }
  arg4 = reinterpret_cast< std::complex< double > * >(argp4);
  result = (bool)((meep::fields const *)arg1)->locate_component_point(arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *fields_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__fields, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_flux_vol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::fields *arg1 = (meep::fields *) 0 ;
  meep::direction arg2 ;
  meep::volume *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::flux_vol *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_flux_vol",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__fields, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_flux_vol" "', argument " "1"" of type '" "meep::fields *""'"); 
  }
  arg1 = reinterpret_cast< meep::fields * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_flux_vol" "', argument " "2"" of type '" "meep::direction""'");
  } 
  arg2 = static_cast< meep::direction >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_meep__volume,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_flux_vol" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_flux_vol" "', argument " "3"" of type '" "meep::volume const &""'"); 
  }
  arg3 = reinterpret_cast< meep::volume * >(argp3);
  result = (meep::flux_vol *)new meep::flux_vol(arg1,arg2,(meep::volume const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__flux_vol, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_flux_vol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::flux_vol *arg1 = (meep::flux_vol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_flux_vol",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__flux_vol, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_flux_vol" "', argument " "1"" of type '" "meep::flux_vol *""'"); 
  }
  arg1 = reinterpret_cast< meep::flux_vol * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_vol_update_half(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::flux_vol *arg1 = (meep::flux_vol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:flux_vol_update_half",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__flux_vol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_vol_update_half" "', argument " "1"" of type '" "meep::flux_vol *""'"); 
  }
  arg1 = reinterpret_cast< meep::flux_vol * >(argp1);
  (arg1)->update_half();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_vol_update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::flux_vol *arg1 = (meep::flux_vol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:flux_vol_update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__flux_vol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_vol_update" "', argument " "1"" of type '" "meep::flux_vol *""'"); 
  }
  arg1 = reinterpret_cast< meep::flux_vol * >(argp1);
  (arg1)->update();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_vol_flux(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::flux_vol *arg1 = (meep::flux_vol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:flux_vol_flux",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__flux_vol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_vol_flux" "', argument " "1"" of type '" "meep::flux_vol *""'"); 
  }
  arg1 = reinterpret_cast< meep::flux_vol * >(argp1);
  result = (double)(arg1)->flux();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_vol_next_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::flux_vol *arg1 = (meep::flux_vol *) 0 ;
  meep::flux_vol *arg2 = (meep::flux_vol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:flux_vol_next_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__flux_vol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_vol_next_set" "', argument " "1"" of type '" "meep::flux_vol *""'"); 
  }
  arg1 = reinterpret_cast< meep::flux_vol * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__flux_vol, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "flux_vol_next_set" "', argument " "2"" of type '" "meep::flux_vol *""'"); 
  }
  arg2 = reinterpret_cast< meep::flux_vol * >(argp2);
  if (arg1) (arg1)->next = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flux_vol_next_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::flux_vol *arg1 = (meep::flux_vol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::flux_vol *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:flux_vol_next_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__flux_vol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flux_vol_next_get" "', argument " "1"" of type '" "meep::flux_vol *""'"); 
  }
  arg1 = reinterpret_cast< meep::flux_vol * >(argp1);
  result = (meep::flux_vol *) ((arg1)->next);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__flux_vol, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *flux_vol_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__flux_vol, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_make_output_directory__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:make_output_directory",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "make_output_directory" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "make_output_directory" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (char *)meep::make_output_directory((char const *)arg1,(char const *)arg2);
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_make_output_directory__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:make_output_directory",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "make_output_directory" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (char *)meep::make_output_directory((char const *)arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_make_output_directory(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_make_output_directory__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_make_output_directory__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'make_output_directory'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::make_output_directory(char const *,char const *)\n"
    "    meep::make_output_directory(char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_trash_output_directory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:trash_output_directory",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trash_output_directory" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  meep::trash_output_directory((char const *)arg1);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_create_output_file(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FILE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:create_output_file",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_output_file" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "create_output_file" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (FILE *)meep::create_output_file((char const *)arg1,(char const *)arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FILE, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_deal_with_ctrl_c__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:deal_with_ctrl_c",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "deal_with_ctrl_c" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  meep::deal_with_ctrl_c(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_deal_with_ctrl_c__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":deal_with_ctrl_c")) SWIG_fail;
  meep::deal_with_ctrl_c();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_deal_with_ctrl_c(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_deal_with_ctrl_c__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_deal_with_ctrl_c__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'deal_with_ctrl_c'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::deal_with_ctrl_c(int)\n"
    "    meep::deal_with_ctrl_c()\n");
  return 0;
}


SWIGINTERN int Swig_var_interrupt_set(PyObject *_val) {
  {
    int val;
    int res = SWIG_AsVal_int(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""meep::interrupt""' of type '""int""'");
    }
    meep::interrupt = static_cast< int >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_interrupt_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(meep::interrupt));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_do_harminv__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  std::complex< double > *arg7 = (std::complex< double > *) 0 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  double arg11 ;
  double arg12 ;
  double arg13 ;
  double arg14 ;
  double arg15 ;
  double arg16 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  double val16 ;
  int ecode16 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  PyObject * obj14 = 0 ;
  PyObject * obj15 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOO:do_harminv",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "do_harminv" "', argument " "1"" of type '" "std::complex< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "do_harminv" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "do_harminv" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "do_harminv" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "do_harminv" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "do_harminv" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "do_harminv" "', argument " "7"" of type '" "std::complex< double > *""'"); 
  }
  arg7 = reinterpret_cast< std::complex< double > * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "do_harminv" "', argument " "8"" of type '" "double *""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "do_harminv" "', argument " "9"" of type '" "double *""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "do_harminv" "', argument " "10"" of type '" "double *""'"); 
  }
  arg10 = reinterpret_cast< double * >(argp10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "do_harminv" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "do_harminv" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_double(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "do_harminv" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  ecode14 = SWIG_AsVal_double(obj13, &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "do_harminv" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  ecode15 = SWIG_AsVal_double(obj14, &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "do_harminv" "', argument " "15"" of type '" "double""'");
  } 
  arg15 = static_cast< double >(val15);
  ecode16 = SWIG_AsVal_double(obj15, &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "do_harminv" "', argument " "16"" of type '" "double""'");
  } 
  arg16 = static_cast< double >(val16);
  result = (int)meep::do_harminv(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_do_harminv__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  std::complex< double > *arg7 = (std::complex< double > *) 0 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  double arg11 ;
  double arg12 ;
  double arg13 ;
  double arg14 ;
  double arg15 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  PyObject * obj14 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOO:do_harminv",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "do_harminv" "', argument " "1"" of type '" "std::complex< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "do_harminv" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "do_harminv" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "do_harminv" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "do_harminv" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "do_harminv" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "do_harminv" "', argument " "7"" of type '" "std::complex< double > *""'"); 
  }
  arg7 = reinterpret_cast< std::complex< double > * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "do_harminv" "', argument " "8"" of type '" "double *""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "do_harminv" "', argument " "9"" of type '" "double *""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "do_harminv" "', argument " "10"" of type '" "double *""'"); 
  }
  arg10 = reinterpret_cast< double * >(argp10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "do_harminv" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "do_harminv" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_double(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "do_harminv" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  ecode14 = SWIG_AsVal_double(obj13, &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "do_harminv" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  ecode15 = SWIG_AsVal_double(obj14, &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "do_harminv" "', argument " "15"" of type '" "double""'");
  } 
  arg15 = static_cast< double >(val15);
  result = (int)meep::do_harminv(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_do_harminv__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  std::complex< double > *arg7 = (std::complex< double > *) 0 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  double arg11 ;
  double arg12 ;
  double arg13 ;
  double arg14 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOO:do_harminv",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "do_harminv" "', argument " "1"" of type '" "std::complex< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "do_harminv" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "do_harminv" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "do_harminv" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "do_harminv" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "do_harminv" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "do_harminv" "', argument " "7"" of type '" "std::complex< double > *""'"); 
  }
  arg7 = reinterpret_cast< std::complex< double > * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "do_harminv" "', argument " "8"" of type '" "double *""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "do_harminv" "', argument " "9"" of type '" "double *""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "do_harminv" "', argument " "10"" of type '" "double *""'"); 
  }
  arg10 = reinterpret_cast< double * >(argp10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "do_harminv" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "do_harminv" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_double(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "do_harminv" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  ecode14 = SWIG_AsVal_double(obj13, &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "do_harminv" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  result = (int)meep::do_harminv(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_do_harminv__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  std::complex< double > *arg7 = (std::complex< double > *) 0 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  double arg11 ;
  double arg12 ;
  double arg13 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOO:do_harminv",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "do_harminv" "', argument " "1"" of type '" "std::complex< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "do_harminv" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "do_harminv" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "do_harminv" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "do_harminv" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "do_harminv" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "do_harminv" "', argument " "7"" of type '" "std::complex< double > *""'"); 
  }
  arg7 = reinterpret_cast< std::complex< double > * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "do_harminv" "', argument " "8"" of type '" "double *""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "do_harminv" "', argument " "9"" of type '" "double *""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "do_harminv" "', argument " "10"" of type '" "double *""'"); 
  }
  arg10 = reinterpret_cast< double * >(argp10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "do_harminv" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "do_harminv" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_double(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "do_harminv" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  result = (int)meep::do_harminv(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_do_harminv__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  std::complex< double > *arg7 = (std::complex< double > *) 0 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  double arg11 ;
  double arg12 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOO:do_harminv",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "do_harminv" "', argument " "1"" of type '" "std::complex< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "do_harminv" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "do_harminv" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "do_harminv" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "do_harminv" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "do_harminv" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "do_harminv" "', argument " "7"" of type '" "std::complex< double > *""'"); 
  }
  arg7 = reinterpret_cast< std::complex< double > * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "do_harminv" "', argument " "8"" of type '" "double *""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "do_harminv" "', argument " "9"" of type '" "double *""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "do_harminv" "', argument " "10"" of type '" "double *""'"); 
  }
  arg10 = reinterpret_cast< double * >(argp10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "do_harminv" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "do_harminv" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  result = (int)meep::do_harminv(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_do_harminv__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  std::complex< double > *arg7 = (std::complex< double > *) 0 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  double arg11 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:do_harminv",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "do_harminv" "', argument " "1"" of type '" "std::complex< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "do_harminv" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "do_harminv" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "do_harminv" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "do_harminv" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "do_harminv" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "do_harminv" "', argument " "7"" of type '" "std::complex< double > *""'"); 
  }
  arg7 = reinterpret_cast< std::complex< double > * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "do_harminv" "', argument " "8"" of type '" "double *""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "do_harminv" "', argument " "9"" of type '" "double *""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "do_harminv" "', argument " "10"" of type '" "double *""'"); 
  }
  arg10 = reinterpret_cast< double * >(argp10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "do_harminv" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  result = (int)meep::do_harminv(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_do_harminv__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  std::complex< double > *arg7 = (std::complex< double > *) 0 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:do_harminv",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "do_harminv" "', argument " "1"" of type '" "std::complex< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "do_harminv" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "do_harminv" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "do_harminv" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "do_harminv" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "do_harminv" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "do_harminv" "', argument " "7"" of type '" "std::complex< double > *""'"); 
  }
  arg7 = reinterpret_cast< std::complex< double > * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "do_harminv" "', argument " "8"" of type '" "double *""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "do_harminv" "', argument " "9"" of type '" "double *""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "do_harminv" "', argument " "10"" of type '" "double *""'"); 
  }
  arg10 = reinterpret_cast< double * >(argp10);
  result = (int)meep::do_harminv(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_do_harminv__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  std::complex< double > *arg7 = (std::complex< double > *) 0 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:do_harminv",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "do_harminv" "', argument " "1"" of type '" "std::complex< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "do_harminv" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "do_harminv" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "do_harminv" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "do_harminv" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "do_harminv" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "do_harminv" "', argument " "7"" of type '" "std::complex< double > *""'"); 
  }
  arg7 = reinterpret_cast< std::complex< double > * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "do_harminv" "', argument " "8"" of type '" "double *""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "do_harminv" "', argument " "9"" of type '" "double *""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  result = (int)meep::do_harminv(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_do_harminv(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[17] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 16) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_do_harminv__SWIG_7(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &vptr, SWIGTYPE_p_double, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        return _wrap_do_harminv__SWIG_6(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &vptr, SWIGTYPE_p_double, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          return _wrap_do_harminv__SWIG_5(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &vptr, SWIGTYPE_p_double, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_double(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            return _wrap_do_harminv__SWIG_4(self, args);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 13) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &vptr, SWIGTYPE_p_double, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_double(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            {
                              int res = SWIG_AsVal_double(argv[12], NULL);
                              _v = SWIG_CheckState(res);
                            }
                            if (_v) {
                              return _wrap_do_harminv__SWIG_3(self, args);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 14) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &vptr, SWIGTYPE_p_double, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_double(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            {
                              int res = SWIG_AsVal_double(argv[12], NULL);
                              _v = SWIG_CheckState(res);
                            }
                            if (_v) {
                              {
                                int res = SWIG_AsVal_double(argv[13], NULL);
                                _v = SWIG_CheckState(res);
                              }
                              if (_v) {
                                return _wrap_do_harminv__SWIG_2(self, args);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 15) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &vptr, SWIGTYPE_p_double, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_double(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            {
                              int res = SWIG_AsVal_double(argv[12], NULL);
                              _v = SWIG_CheckState(res);
                            }
                            if (_v) {
                              {
                                int res = SWIG_AsVal_double(argv[13], NULL);
                                _v = SWIG_CheckState(res);
                              }
                              if (_v) {
                                {
                                  int res = SWIG_AsVal_double(argv[14], NULL);
                                  _v = SWIG_CheckState(res);
                                }
                                if (_v) {
                                  return _wrap_do_harminv__SWIG_1(self, args);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 16) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &vptr, SWIGTYPE_p_double, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_double(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            {
                              int res = SWIG_AsVal_double(argv[12], NULL);
                              _v = SWIG_CheckState(res);
                            }
                            if (_v) {
                              {
                                int res = SWIG_AsVal_double(argv[13], NULL);
                                _v = SWIG_CheckState(res);
                              }
                              if (_v) {
                                {
                                  int res = SWIG_AsVal_double(argv[14], NULL);
                                  _v = SWIG_CheckState(res);
                                }
                                if (_v) {
                                  {
                                    int res = SWIG_AsVal_double(argv[15], NULL);
                                    _v = SWIG_CheckState(res);
                                  }
                                  if (_v) {
                                    return _wrap_do_harminv__SWIG_0(self, args);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'do_harminv'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::do_harminv(std::complex< double > *,int,double,double,double,int,std::complex< double > *,double *,double *,double *,double,double,double,double,double,double)\n"
    "    meep::do_harminv(std::complex< double > *,int,double,double,double,int,std::complex< double > *,double *,double *,double *,double,double,double,double,double)\n"
    "    meep::do_harminv(std::complex< double > *,int,double,double,double,int,std::complex< double > *,double *,double *,double *,double,double,double,double)\n"
    "    meep::do_harminv(std::complex< double > *,int,double,double,double,int,std::complex< double > *,double *,double *,double *,double,double,double)\n"
    "    meep::do_harminv(std::complex< double > *,int,double,double,double,int,std::complex< double > *,double *,double *,double *,double,double)\n"
    "    meep::do_harminv(std::complex< double > *,int,double,double,double,int,std::complex< double > *,double *,double *,double *,double)\n"
    "    meep::do_harminv(std::complex< double > *,int,double,double,double,int,std::complex< double > *,double *,double *,double *)\n"
    "    meep::do_harminv(std::complex< double > *,int,double,double,double,int,std::complex< double > *,double *,double *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_make_casimir_gfunc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  meep::field_type arg4 ;
  std::complex< double > (*arg5)(std::complex< double >) = (std::complex< double > (*)(std::complex< double >)) 0 ;
  double arg6 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:make_casimir_gfunc",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "make_casimir_gfunc" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "make_casimir_gfunc" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "make_casimir_gfunc" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "make_casimir_gfunc" "', argument " "4"" of type '" "meep::field_type""'");
  } 
  arg4 = static_cast< meep::field_type >(val4);
  {
    int res = SWIG_ConvertFunctionPtr(obj4, (void**)(&arg5), SWIGTYPE_p_f_std__complex__double____std__complexT_double_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "make_casimir_gfunc" "', argument " "5"" of type '" "std::complex< double > (*)(std::complex< double >)""'"); 
    }
  }
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "make_casimir_gfunc" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  result = (std::complex< double > *)meep::make_casimir_gfunc(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_make_casimir_gfunc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  meep::field_type arg4 ;
  std::complex< double > (*arg5)(std::complex< double >) = (std::complex< double > (*)(std::complex< double >)) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:make_casimir_gfunc",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "make_casimir_gfunc" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "make_casimir_gfunc" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "make_casimir_gfunc" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "make_casimir_gfunc" "', argument " "4"" of type '" "meep::field_type""'");
  } 
  arg4 = static_cast< meep::field_type >(val4);
  {
    int res = SWIG_ConvertFunctionPtr(obj4, (void**)(&arg5), SWIGTYPE_p_f_std__complex__double____std__complexT_double_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "make_casimir_gfunc" "', argument " "5"" of type '" "std::complex< double > (*)(std::complex< double >)""'"); 
    }
  }
  result = (std::complex< double > *)meep::make_casimir_gfunc(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_make_casimir_gfunc__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  meep::field_type arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:make_casimir_gfunc",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "make_casimir_gfunc" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "make_casimir_gfunc" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "make_casimir_gfunc" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "make_casimir_gfunc" "', argument " "4"" of type '" "meep::field_type""'");
  } 
  arg4 = static_cast< meep::field_type >(val4);
  result = (std::complex< double > *)meep::make_casimir_gfunc(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_make_casimir_gfunc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_make_casimir_gfunc__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *ptr = 0;
            int res = SWIG_ConvertFunctionPtr(argv[4], &ptr, SWIGTYPE_p_f_std__complex__double____std__complexT_double_t);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_make_casimir_gfunc__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *ptr = 0;
            int res = SWIG_ConvertFunctionPtr(argv[4], &ptr, SWIGTYPE_p_f_std__complex__double____std__complexT_double_t);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_make_casimir_gfunc__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'make_casimir_gfunc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::make_casimir_gfunc(double,double,double,meep::field_type,std::complex< double > (*)(std::complex< double >),double)\n"
    "    meep::make_casimir_gfunc(double,double,double,meep::field_type,std::complex< double > (*)(std::complex< double >))\n"
    "    meep::make_casimir_gfunc(double,double,double,meep::field_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_make_casimir_gfunc_kz(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  meep::field_type arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:make_casimir_gfunc_kz",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "make_casimir_gfunc_kz" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "make_casimir_gfunc_kz" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "make_casimir_gfunc_kz" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "make_casimir_gfunc_kz" "', argument " "4"" of type '" "meep::field_type""'");
  } 
  arg4 = static_cast< meep::field_type >(val4);
  result = (std::complex< double > *)meep::make_casimir_gfunc_kz(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_random_seed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned long arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set_random_seed",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_random_seed" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  meep::set_random_seed(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_uniform_random(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:uniform_random",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "uniform_random" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uniform_random" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (double)meep::uniform_random(arg1,arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gaussian_random(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:gaussian_random",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "gaussian_random" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gaussian_random" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (double)meep::gaussian_random(arg1,arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_random_int(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:random_int",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "random_int" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "random_int" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)meep::random_int(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BesselJ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BesselJ",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "BesselJ" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BesselJ" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (double)meep::BesselJ(arg1,arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_green2d(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  meep::vec *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  meep::vec *arg6 = 0 ;
  meep::component arg7 ;
  std::complex< double > arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  std::complex< double > val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:green2d",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "green2d" "', argument " "1"" of type '" "std::complex< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "green2d" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "green2d" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "green2d" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "green2d" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "green2d" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "green2d" "', argument " "6"" of type '" "meep::vec const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "green2d" "', argument " "6"" of type '" "meep::vec const &""'"); 
  }
  arg6 = reinterpret_cast< meep::vec * >(argp6);
  {
    arg7 = static_cast<meep::component>(PyInteger_AsLong(obj6));
  }
  ecode8 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "green2d" "', argument " "8"" of type '" "std::complex< double >""'");
  } 
  arg8 = static_cast< std::complex< double > >(val8);
  meep::green2d(arg1,(meep::vec const &)*arg2,arg3,arg4,arg5,(meep::vec const &)*arg6,arg7,arg8);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_green3d(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  meep::vec *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  meep::vec *arg6 = 0 ;
  meep::component arg7 ;
  std::complex< double > arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  std::complex< double > val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:green3d",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "green3d" "', argument " "1"" of type '" "std::complex< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "green3d" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "green3d" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "green3d" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "green3d" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "green3d" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "green3d" "', argument " "6"" of type '" "meep::vec const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "green3d" "', argument " "6"" of type '" "meep::vec const &""'"); 
  }
  arg6 = reinterpret_cast< meep::vec * >(argp6);
  {
    arg7 = static_cast<meep::component>(PyInteger_AsLong(obj6));
  }
  ecode8 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "green3d" "', argument " "8"" of type '" "std::complex< double >""'");
  } 
  arg8 = static_cast< std::complex< double > >(val8);
  meep::green3d(arg1,(meep::vec const &)*arg2,arg3,arg4,arg5,(meep::vec const &)*arg6,arg7,arg8);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_destroy_eigenmode_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  void *arg1 = (void *) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:destroy_eigenmode_data",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "destroy_eigenmode_data" "', argument " "1"" of type '" "void *""'"); 
  }
  meep::destroy_eigenmode_data(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_eigenmode_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  void *arg1 = (void *) 0 ;
  meep::vec *arg2 = 0 ;
  meep::component arg3 ;
  int res1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:eigenmode_amplitude",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eigenmode_amplitude" "', argument " "1"" of type '" "void *""'"); 
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "eigenmode_amplitude" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "eigenmode_amplitude" "', argument " "2"" of type '" "meep::vec const &""'"); 
  }
  arg2 = reinterpret_cast< meep::vec * >(argp2);
  {
    arg3 = static_cast<meep::component>(PyInteger_AsLong(obj2));
  }
  result = meep::eigenmode_amplitude(arg1,(meep::vec const &)*arg2,arg3);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_group_velocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  void *arg1 = (void *) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:get_group_velocity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_group_velocity" "', argument " "1"" of type '" "void *""'"); 
  }
  result = (double)meep::get_group_velocity(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_k(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  void *arg1 = (void *) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:get_k",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_k" "', argument " "1"" of type '" "void *""'"); 
  }
  result = meep::get_k(arg1);
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_wall_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)":wall_time")) SWIG_fail;
  result = (double)meep::wall_time();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = 0 ;
  char ***arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep::initialize *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_initialize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_initialize" "', argument " "1"" of type '" "int &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_initialize" "', argument " "1"" of type '" "int &""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_p_p_char,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_initialize" "', argument " "2"" of type '" "char **&""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_initialize" "', argument " "2"" of type '" "char **&""'"); 
  }
  arg2 = reinterpret_cast< char *** >(argp2);
  result = (meep::initialize *)new meep::initialize(*arg1,*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep__initialize, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::initialize *arg1 = (meep::initialize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_initialize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__initialize, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_initialize" "', argument " "1"" of type '" "meep::initialize *""'"); 
  }
  arg1 = reinterpret_cast< meep::initialize * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_initialize_elapsed_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::initialize *arg1 = (meep::initialize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:initialize_elapsed_time",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__initialize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "initialize_elapsed_time" "', argument " "1"" of type '" "meep::initialize *""'"); 
  }
  arg1 = reinterpret_cast< meep::initialize * >(argp1);
  result = (double)(arg1)->elapsed_time();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *initialize_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep__initialize, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_all_wait(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":all_wait")) SWIG_fail;
  meep::all_wait();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_count_processors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":count_processors")) SWIG_fail;
  result = (int)meep::count_processors();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_my_rank(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":my_rank")) SWIG_fail;
  result = (int)meep::my_rank();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_am_really_master(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":am_really_master")) SWIG_fail;
  result = (bool)meep::am_really_master();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_am_master(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":am_master")) SWIG_fail;
  result = (int)meep::am_master();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_with_mpi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":with_mpi")) SWIG_fail;
  result = (bool)meep::with_mpi();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_send__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:send",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "send" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "send" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "send" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "send" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  meep::send(arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_send__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:send",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "send" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "send" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "send" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  meep::send(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_send(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_send__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_send__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'send'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::send(int,int,double *,int)\n"
    "    meep::send(int,int,double *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_broadcast__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:broadcast",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "broadcast" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "broadcast" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "broadcast" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  meep::broadcast(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_broadcast__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:broadcast",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "broadcast" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "broadcast" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "broadcast" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  meep::broadcast(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_broadcast__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:broadcast",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "broadcast" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "broadcast" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "broadcast" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  meep::broadcast(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_broadcast__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  size_t *arg2 = (size_t *) 0 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:broadcast",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "broadcast" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "broadcast" "', argument " "2"" of type '" "size_t *""'"); 
  }
  arg2 = reinterpret_cast< size_t * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "broadcast" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  meep::broadcast(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_broadcast__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:broadcast",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "broadcast" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "broadcast" "', argument " "2"" of type '" "std::complex< double > *""'"); 
  }
  arg2 = reinterpret_cast< std::complex< double > * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "broadcast" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  meep::broadcast(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_broadcast__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::complex< double > arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:broadcast",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "broadcast" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "broadcast" "', argument " "2"" of type '" "std::complex< double >""'");
  } 
  arg2 = static_cast< std::complex< double > >(val2);
  result = meep::broadcast(arg1,arg2);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_broadcast__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:broadcast",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "broadcast" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "broadcast" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (double)meep::broadcast(arg1,arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_broadcast__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:broadcast",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "broadcast" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "broadcast" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)meep::broadcast(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_broadcast__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  bool arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:broadcast",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "broadcast" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "broadcast" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)meep::broadcast(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_broadcast(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_broadcast__SWIG_8(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_broadcast__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_broadcast__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_broadcast__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_broadcast__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_broadcast__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_broadcast__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_size_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_broadcast__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_broadcast__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'broadcast'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::broadcast(int,double *,int)\n"
    "    meep::broadcast(int,char *,int)\n"
    "    meep::broadcast(int,int *,int)\n"
    "    meep::broadcast(int,size_t *,int)\n"
    "    meep::broadcast(int,std::complex< double > *,int)\n"
    "    meep::broadcast(int,std::complex< double >)\n"
    "    meep::broadcast(int,double)\n"
    "    meep::broadcast(int,int)\n"
    "    meep::broadcast(int,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_max_to_master(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:max_to_master",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "max_to_master" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)meep::max_to_master(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_max_to_all__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:max_to_all",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "max_to_all" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)meep::max_to_all(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_max_to_all__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:max_to_all",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "max_to_all" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (int)meep::max_to_all(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_max_to_all(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_meep__ivec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_max_to_all__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_max_to_all__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_max_to_all__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'max_to_all'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::max_to_all(meep::ivec const &)\n"
    "    meep::max_to_all(double)\n"
    "    meep::max_to_all(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sum_to_master__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sum_to_master",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "sum_to_master" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = (float)meep::sum_to_master(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sum_to_master__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sum_to_master",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "sum_to_master" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)meep::sum_to_master(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sum_to_all__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sum_to_all",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "sum_to_all" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)meep::sum_to_all(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sum_to_all__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:sum_to_all",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sum_to_all" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sum_to_all" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sum_to_all" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  meep::sum_to_all((double const *)arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sum_to_master__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:sum_to_master",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sum_to_master" "', argument " "1"" of type '" "float const *""'"); 
  }
  arg1 = reinterpret_cast< float * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sum_to_master" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sum_to_master" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  meep::sum_to_master((float const *)arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sum_to_master__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:sum_to_master",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sum_to_master" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sum_to_master" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sum_to_master" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  meep::sum_to_master((double const *)arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sum_to_all__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float *arg1 = (float *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:sum_to_all",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sum_to_all" "', argument " "1"" of type '" "float const *""'"); 
  }
  arg1 = reinterpret_cast< float * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sum_to_all" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sum_to_all" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  meep::sum_to_all((float const *)arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sum_to_all__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:sum_to_all",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sum_to_all" "', argument " "1"" of type '" "std::complex< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sum_to_all" "', argument " "2"" of type '" "std::complex< double > *""'"); 
  }
  arg2 = reinterpret_cast< std::complex< double > * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sum_to_all" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  meep::sum_to_all((std::complex< float > const *)arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sum_to_all__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:sum_to_all",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sum_to_all" "', argument " "1"" of type '" "std::complex< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sum_to_all" "', argument " "2"" of type '" "std::complex< double > *""'"); 
  }
  arg2 = reinterpret_cast< std::complex< double > * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sum_to_all" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  meep::sum_to_all((std::complex< double > const *)arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sum_to_master__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = (std::complex< float > *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:sum_to_master",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sum_to_master" "', argument " "1"" of type '" "std::complex< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sum_to_master" "', argument " "2"" of type '" "std::complex< float > *""'"); 
  }
  arg2 = reinterpret_cast< std::complex< float > * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sum_to_master" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  meep::sum_to_master((std::complex< float > const *)arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sum_to_master__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = (std::complex< double > *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:sum_to_master",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sum_to_master" "', argument " "1"" of type '" "std::complex< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::complex< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sum_to_master" "', argument " "2"" of type '" "std::complex< double > *""'"); 
  }
  arg2 = reinterpret_cast< std::complex< double > * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sum_to_master" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  meep::sum_to_master((std::complex< double > const *)arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sum_to_all__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long double arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sum_to_all",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sum_to_all" "', argument " "1"" of type '" "long double""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sum_to_all" "', argument " "1"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (long double)meep::sum_to_all(arg1);
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sum_to_all__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< double > arg1 ;
  std::complex< double > val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sum_to_all",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "sum_to_all" "', argument " "1"" of type '" "std::complex< double >""'");
  } 
  arg1 = static_cast< std::complex< double > >(val1);
  result = meep::sum_to_all(arg1);
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sum_to_all__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::complex< long double > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< long double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sum_to_all",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__complexT_long_double_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sum_to_all" "', argument " "1"" of type '" "std::complex< long double >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sum_to_all" "', argument " "1"" of type '" "std::complex< long double >""'");
    } else {
      std::complex< long double > * temp = reinterpret_cast< std::complex< long double > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = meep::sum_to_all(arg1);
  resultobj = SWIG_NewPointerObj((new std::complex< long double >(static_cast< const std::complex< long double >& >(result))), SWIGTYPE_p_std__complexT_long_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sum_to_all__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sum_to_all",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "sum_to_all" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (int)meep::sum_to_all(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_partial_sum_to_all__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:partial_sum_to_all",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "partial_sum_to_all" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (int)meep::partial_sum_to_all(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sum_to_all__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sum_to_all",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "sum_to_all" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = meep::sum_to_all(arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_partial_sum_to_all__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:partial_sum_to_all",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "partial_sum_to_all" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = meep::partial_sum_to_all(arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_partial_sum_to_all(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_partial_sum_to_all__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_partial_sum_to_all__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'partial_sum_to_all'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::partial_sum_to_all(int)\n"
    "    meep::partial_sum_to_all(size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sum_to_all__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t *arg1 = (size_t *) 0 ;
  size_t *arg2 = (size_t *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:sum_to_all",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sum_to_all" "', argument " "1"" of type '" "size_t const *""'"); 
  }
  arg1 = reinterpret_cast< size_t * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sum_to_all" "', argument " "2"" of type '" "size_t *""'"); 
  }
  arg2 = reinterpret_cast< size_t * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sum_to_all" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  meep::sum_to_all((size_t const *)arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sum_to_all(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_long_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_sum_to_all__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__complexT_long_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_sum_to_all__SWIG_7(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_sum_to_all__SWIG_8(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_sum_to_all__SWIG_9(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_sum_to_all__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_sum_to_all__SWIG_6(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_float, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_sum_to_all__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_sum_to_all__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_sum_to_all__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_sum_to_all__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_size_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_size_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_sum_to_all__SWIG_10(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'sum_to_all'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::sum_to_all(double)\n"
    "    meep::sum_to_all(double const *,double *,int)\n"
    "    meep::sum_to_all(float const *,double *,int)\n"
    "    meep::sum_to_all(std::complex< float > const *,std::complex< double > *,int)\n"
    "    meep::sum_to_all(std::complex< double > const *,std::complex< double > *,int)\n"
    "    meep::sum_to_all(long double)\n"
    "    meep::sum_to_all(std::complex< double >)\n"
    "    meep::sum_to_all(std::complex< long double >)\n"
    "    meep::sum_to_all(int)\n"
    "    meep::sum_to_all(size_t)\n"
    "    meep::sum_to_all(size_t const *,size_t *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sum_to_master__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t *arg1 = (size_t *) 0 ;
  size_t *arg2 = (size_t *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:sum_to_master",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sum_to_master" "', argument " "1"" of type '" "size_t const *""'"); 
  }
  arg1 = reinterpret_cast< size_t * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sum_to_master" "', argument " "2"" of type '" "size_t *""'"); 
  }
  arg2 = reinterpret_cast< size_t * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sum_to_master" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  meep::sum_to_master((size_t const *)arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sum_to_master(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_sum_to_master__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_sum_to_master__SWIG_1(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_float, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_sum_to_master__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_sum_to_master__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__complexT_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_sum_to_master__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__complexT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_sum_to_master__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_size_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_size_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_sum_to_master__SWIG_6(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'sum_to_master'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::sum_to_master(float)\n"
    "    meep::sum_to_master(double)\n"
    "    meep::sum_to_master(float const *,float *,int)\n"
    "    meep::sum_to_master(double const *,double *,int)\n"
    "    meep::sum_to_master(std::complex< float > const *,std::complex< float > *,int)\n"
    "    meep::sum_to_master(std::complex< double > const *,std::complex< double > *,int)\n"
    "    meep::sum_to_master(size_t const *,size_t *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_or_to_all__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:or_to_all",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "or_to_all" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = (bool)meep::or_to_all(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_or_to_all__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:or_to_all",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "or_to_all" "', argument " "1"" of type '" "int const *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "or_to_all" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "or_to_all" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  meep::or_to_all((int const *)arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_or_to_all(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_or_to_all__SWIG_0(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_int, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_or_to_all__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'or_to_all'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::or_to_all(bool)\n"
    "    meep::or_to_all(int const *,int *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_and_to_all__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:and_to_all",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "and_to_all" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = (bool)meep::and_to_all(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_and_to_all__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:and_to_all",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "and_to_all" "', argument " "1"" of type '" "int const *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "and_to_all" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "and_to_all" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  meep::and_to_all((int const *)arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_and_to_all(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_and_to_all__SWIG_0(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_int, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_and_to_all__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'and_to_all'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep::and_to_all(bool)\n"
    "    meep::and_to_all(int const *,int *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_master_printf__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:master_printf",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "master_printf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  meep::master_printf((char const *)arg1,arg2);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_master_printf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,1);
  varargs = PyTuple_GetSlice(args,1,PyTuple_Size(args));
  resultobj = _wrap_master_printf__varargs__(NULL,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_debug_printf__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:debug_printf",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debug_printf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  meep::debug_printf((char const *)arg1,arg2);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_debug_printf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,1);
  varargs = PyTuple_GetSlice(args,1,PyTuple_Size(args));
  resultobj = _wrap_debug_printf__varargs__(NULL,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_master_fprintf__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  FILE *arg1 = (FILE *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:master_fprintf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "master_fprintf" "', argument " "1"" of type '" "FILE *""'"); 
  }
  arg1 = reinterpret_cast< FILE * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "master_fprintf" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  meep::master_fprintf(arg1,(char const *)arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_master_fprintf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,2);
  varargs = PyTuple_GetSlice(args,2,PyTuple_Size(args));
  resultobj = _wrap_master_fprintf__varargs__(NULL,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_master_fopen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FILE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:master_fopen",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "master_fopen" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "master_fopen" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (FILE *)meep::master_fopen((char const *)arg1,(char const *)arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FILE, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_master_fclose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FILE *arg1 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:master_fclose",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "master_fclose" "', argument " "1"" of type '" "FILE *""'"); 
  }
  arg1 = reinterpret_cast< FILE * >(argp1);
  meep::master_fclose(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_begin_critical_section(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:begin_critical_section",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "begin_critical_section" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  meep::begin_critical_section(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_end_critical_section(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:end_critical_section",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "end_critical_section" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  meep::end_critical_section(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_divide_parallel_processes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:divide_parallel_processes",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "divide_parallel_processes" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (int)meep::divide_parallel_processes(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_begin_global_communications(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":begin_global_communications")) SWIG_fail;
  meep::begin_global_communications();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_end_global_communications(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":end_global_communications")) SWIG_fail;
  meep::end_global_communications();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_end_divide_parallel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":end_divide_parallel")) SWIG_fail;
  meep::end_divide_parallel();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_my_global_rank(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":my_global_rank")) SWIG_fail;
  result = (int)meep::my_global_rank();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_data_num_freqs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::dft_data *arg1 = (meep_geom::dft_data *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_data_num_freqs_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__dft_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_data_num_freqs_set" "', argument " "1"" of type '" "meep_geom::dft_data *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::dft_data * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_data_num_freqs_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->num_freqs = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_data_num_freqs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::dft_data *arg1 = (meep_geom::dft_data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_data_num_freqs_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__dft_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_data_num_freqs_get" "', argument " "1"" of type '" "meep_geom::dft_data *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::dft_data * >(argp1);
  result = (int) ((arg1)->num_freqs);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_data_num_components_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::dft_data *arg1 = (meep_geom::dft_data *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_data_num_components_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__dft_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_data_num_components_set" "', argument " "1"" of type '" "meep_geom::dft_data *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::dft_data * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dft_data_num_components_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->num_components = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_data_num_components_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::dft_data *arg1 = (meep_geom::dft_data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_data_num_components_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__dft_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_data_num_components_get" "', argument " "1"" of type '" "meep_geom::dft_data *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::dft_data * >(argp1);
  result = (int) ((arg1)->num_components);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_data_vols_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::dft_data *arg1 = (meep_geom::dft_data *) 0 ;
  std::vector< meep::volume,std::allocator< meep::volume > > *arg2 = (std::vector< meep::volume,std::allocator< meep::volume > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dft_data_vols_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__dft_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_data_vols_set" "', argument " "1"" of type '" "meep_geom::dft_data *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::dft_data * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dft_data_vols_set" "', argument " "2"" of type '" "std::vector< meep::volume,std::allocator< meep::volume > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< meep::volume,std::allocator< meep::volume > > * >(argp2);
  if (arg1) (arg1)->vols = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dft_data_vols_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::dft_data *arg1 = (meep_geom::dft_data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< meep::volume,std::allocator< meep::volume > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dft_data_vols_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__dft_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dft_data_vols_get" "', argument " "1"" of type '" "meep_geom::dft_data *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::dft_data * >(argp1);
  result = (std::vector< meep::volume,std::allocator< meep::volume > > *)& ((arg1)->vols);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_dft_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::vector< meep::volume,std::allocator< meep::volume > > arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep_geom::dft_data *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_dft_data",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_dft_data" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_dft_data" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::vector< meep::volume,std::allocator< meep::volume > > *ptr = (std::vector< meep::volume,std::allocator< meep::volume > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_dft_data" "', argument " "3"" of type '" "std::vector< meep::volume,std::allocator< meep::volume > >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (meep_geom::dft_data *)new meep_geom::dft_data(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep_geom__dft_data, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_dft_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::dft_data *arg1 = (meep_geom::dft_data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_dft_data",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__dft_data, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_dft_data" "', argument " "1"" of type '" "meep_geom::dft_data *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::dft_data * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *dft_data_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep_geom__dft_data, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_fragment_stats_tol_set(PyObject *_val) {
  {
    double val;
    int res = SWIG_AsVal_double(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""meep_geom::fragment_stats::tol""' of type '""double""'");
    }
    meep_geom::fragment_stats::tol = static_cast< double >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_fragment_stats_tol_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(meep_geom::fragment_stats::tol));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_fragment_stats_tol_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_fragment_stats_tol_get();
}


SWIGINTERN PyObject *_wrap_fragment_stats_tol_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_fragment_stats_tol_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_fragment_stats_maxeval_set(PyObject *_val) {
  {
    int val;
    int res = SWIG_AsVal_int(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""meep_geom::fragment_stats::maxeval""' of type '""int""'");
    }
    meep_geom::fragment_stats::maxeval = static_cast< int >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_fragment_stats_maxeval_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(meep_geom::fragment_stats::maxeval));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_fragment_stats_maxeval_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_fragment_stats_maxeval_get();
}


SWIGINTERN PyObject *_wrap_fragment_stats_maxeval_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_fragment_stats_maxeval_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_fragment_stats_resolution_set(PyObject *_val) {
  {
    int val;
    int res = SWIG_AsVal_int(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""meep_geom::fragment_stats::resolution""' of type '""int""'");
    }
    meep_geom::fragment_stats::resolution = static_cast< int >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_fragment_stats_resolution_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(meep_geom::fragment_stats::resolution));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_fragment_stats_resolution_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_fragment_stats_resolution_get();
}


SWIGINTERN PyObject *_wrap_fragment_stats_resolution_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_fragment_stats_resolution_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_fragment_stats_dims_set(PyObject *_val) {
  if (sizeof(int) != sizeof(meep_geom::fragment_stats::dims)) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_AttributeError), "in variable '""arch, read-only meep_geom::fragment_stats::dims""' of type '""meep::ndim""'");
  }  else {
    int ecode = SWIG_AsVal_int (_val, reinterpret_cast< int* >(&meep_geom::fragment_stats::dims));
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in variable '""meep_geom::fragment_stats::dims""' of type '""meep::ndim""'");
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_fragment_stats_dims_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(meep_geom::fragment_stats::dims));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_fragment_stats_dims_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_fragment_stats_dims_get();
}


SWIGINTERN PyObject *_wrap_fragment_stats_dims_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_fragment_stats_dims_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN PyObject *_wrap_fragment_stats_num_anisotropic_eps_pixels_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *arg1 = (meep_geom::fragment_stats *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fragment_stats_num_anisotropic_eps_pixels_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fragment_stats_num_anisotropic_eps_pixels_set" "', argument " "1"" of type '" "meep_geom::fragment_stats *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::fragment_stats * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fragment_stats_num_anisotropic_eps_pixels_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->num_anisotropic_eps_pixels = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fragment_stats_num_anisotropic_eps_pixels_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *arg1 = (meep_geom::fragment_stats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fragment_stats_num_anisotropic_eps_pixels_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fragment_stats_num_anisotropic_eps_pixels_get" "', argument " "1"" of type '" "meep_geom::fragment_stats *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::fragment_stats * >(argp1);
  result =  ((arg1)->num_anisotropic_eps_pixels);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fragment_stats_num_anisotropic_mu_pixels_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *arg1 = (meep_geom::fragment_stats *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fragment_stats_num_anisotropic_mu_pixels_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fragment_stats_num_anisotropic_mu_pixels_set" "', argument " "1"" of type '" "meep_geom::fragment_stats *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::fragment_stats * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fragment_stats_num_anisotropic_mu_pixels_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->num_anisotropic_mu_pixels = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fragment_stats_num_anisotropic_mu_pixels_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *arg1 = (meep_geom::fragment_stats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fragment_stats_num_anisotropic_mu_pixels_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fragment_stats_num_anisotropic_mu_pixels_get" "', argument " "1"" of type '" "meep_geom::fragment_stats *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::fragment_stats * >(argp1);
  result =  ((arg1)->num_anisotropic_mu_pixels);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fragment_stats_num_nonlinear_pixels_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *arg1 = (meep_geom::fragment_stats *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fragment_stats_num_nonlinear_pixels_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fragment_stats_num_nonlinear_pixels_set" "', argument " "1"" of type '" "meep_geom::fragment_stats *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::fragment_stats * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fragment_stats_num_nonlinear_pixels_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->num_nonlinear_pixels = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fragment_stats_num_nonlinear_pixels_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *arg1 = (meep_geom::fragment_stats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fragment_stats_num_nonlinear_pixels_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fragment_stats_num_nonlinear_pixels_get" "', argument " "1"" of type '" "meep_geom::fragment_stats *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::fragment_stats * >(argp1);
  result =  ((arg1)->num_nonlinear_pixels);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fragment_stats_num_susceptibility_pixels_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *arg1 = (meep_geom::fragment_stats *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fragment_stats_num_susceptibility_pixels_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fragment_stats_num_susceptibility_pixels_set" "', argument " "1"" of type '" "meep_geom::fragment_stats *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::fragment_stats * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fragment_stats_num_susceptibility_pixels_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->num_susceptibility_pixels = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fragment_stats_num_susceptibility_pixels_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *arg1 = (meep_geom::fragment_stats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fragment_stats_num_susceptibility_pixels_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fragment_stats_num_susceptibility_pixels_get" "', argument " "1"" of type '" "meep_geom::fragment_stats *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::fragment_stats * >(argp1);
  result =  ((arg1)->num_susceptibility_pixels);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fragment_stats_num_nonzero_conductivity_pixels_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *arg1 = (meep_geom::fragment_stats *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fragment_stats_num_nonzero_conductivity_pixels_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fragment_stats_num_nonzero_conductivity_pixels_set" "', argument " "1"" of type '" "meep_geom::fragment_stats *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::fragment_stats * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fragment_stats_num_nonzero_conductivity_pixels_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->num_nonzero_conductivity_pixels = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fragment_stats_num_nonzero_conductivity_pixels_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *arg1 = (meep_geom::fragment_stats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fragment_stats_num_nonzero_conductivity_pixels_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fragment_stats_num_nonzero_conductivity_pixels_get" "', argument " "1"" of type '" "meep_geom::fragment_stats *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::fragment_stats * >(argp1);
  result =  ((arg1)->num_nonzero_conductivity_pixels);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fragment_stats_num_dft_pixels_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *arg1 = (meep_geom::fragment_stats *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fragment_stats_num_dft_pixels_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fragment_stats_num_dft_pixels_set" "', argument " "1"" of type '" "meep_geom::fragment_stats *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::fragment_stats * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fragment_stats_num_dft_pixels_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->num_dft_pixels = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fragment_stats_num_dft_pixels_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *arg1 = (meep_geom::fragment_stats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fragment_stats_num_dft_pixels_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fragment_stats_num_dft_pixels_get" "', argument " "1"" of type '" "meep_geom::fragment_stats *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::fragment_stats * >(argp1);
  result =  ((arg1)->num_dft_pixels);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fragment_stats_num_pixels_in_box_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *arg1 = (meep_geom::fragment_stats *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fragment_stats_num_pixels_in_box_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fragment_stats_num_pixels_in_box_set" "', argument " "1"" of type '" "meep_geom::fragment_stats *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::fragment_stats * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fragment_stats_num_pixels_in_box_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->num_pixels_in_box = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fragment_stats_num_pixels_in_box_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *arg1 = (meep_geom::fragment_stats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fragment_stats_num_pixels_in_box_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fragment_stats_num_pixels_in_box_get" "', argument " "1"" of type '" "meep_geom::fragment_stats *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::fragment_stats * >(argp1);
  result =  ((arg1)->num_pixels_in_box);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fragment_stats_box_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *arg1 = (meep_geom::fragment_stats *) 0 ;
  geom_box *arg2 = (geom_box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fragment_stats_box_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fragment_stats_box_set" "', argument " "1"" of type '" "meep_geom::fragment_stats *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::fragment_stats * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_geom_box, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fragment_stats_box_set" "', argument " "2"" of type '" "geom_box *""'"); 
  }
  arg2 = reinterpret_cast< geom_box * >(argp2);
  if (arg1) (arg1)->box = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fragment_stats_box_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *arg1 = (meep_geom::fragment_stats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  geom_box *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fragment_stats_box_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fragment_stats_box_get" "', argument " "1"" of type '" "meep_geom::fragment_stats *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::fragment_stats * >(argp1);
  result = (geom_box *)& ((arg1)->box);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_geom_box, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fragment_stats__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_fragment_stats")) SWIG_fail;
  result = (meep_geom::fragment_stats *)new meep_geom::fragment_stats();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep_geom__fragment_stats, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fragment_stats__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  geom_box *arg1 = 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  meep_geom::fragment_stats *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_fragment_stats",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_geom_box,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_fragment_stats" "', argument " "1"" of type '" "geom_box &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_fragment_stats" "', argument " "1"" of type '" "geom_box &""'"); 
  }
  arg1 = reinterpret_cast< geom_box * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_fragment_stats" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (meep_geom::fragment_stats *)new meep_geom::fragment_stats(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep_geom__fragment_stats, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fragment_stats(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_fragment_stats__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_geom_box, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_fragment_stats__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_fragment_stats'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep_geom::fragment_stats::fragment_stats()\n"
    "    meep_geom::fragment_stats::fragment_stats(geom_box &,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fragment_stats_update_stats_from_material(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *arg1 = (meep_geom::fragment_stats *) 0 ;
  material_type arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fragment_stats_update_stats_from_material",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fragment_stats_update_stats_from_material" "', argument " "1"" of type '" "meep_geom::fragment_stats *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::fragment_stats * >(argp1);
  {
    if(!pymaterial_to_material(obj1, &arg2)) {
      SWIG_fail;
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fragment_stats_update_stats_from_material" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->update_stats_from_material(arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    if (arg2->medium.E_susceptibilities.items) {
      delete[] arg2->medium.E_susceptibilities.items;
    }
    if (arg2->medium.H_susceptibilities.items) {
      delete[] arg2->medium.H_susceptibilities.items;
    }
    free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2->medium.E_susceptibilities.items) {
      delete[] arg2->medium.E_susceptibilities.items;
    }
    if (arg2->medium.H_susceptibilities.items) {
      delete[] arg2->medium.H_susceptibilities.items;
    }
    free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fragment_stats_compute_stats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *arg1 = (meep_geom::fragment_stats *) 0 ;
  geometric_object_list *arg2 = (geometric_object_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fragment_stats_compute_stats",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fragment_stats_compute_stats" "', argument " "1"" of type '" "meep_geom::fragment_stats *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::fragment_stats * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_geometric_object_list, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fragment_stats_compute_stats" "', argument " "2"" of type '" "geometric_object_list *""'"); 
  }
  arg2 = reinterpret_cast< geometric_object_list * >(argp2);
  (arg1)->compute_stats(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fragment_stats_count_anisotropic_pixels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *arg1 = (meep_geom::fragment_stats *) 0 ;
  medium_struct *arg2 = (medium_struct *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fragment_stats_count_anisotropic_pixels",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fragment_stats_count_anisotropic_pixels" "', argument " "1"" of type '" "meep_geom::fragment_stats *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::fragment_stats * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_medium_struct, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fragment_stats_count_anisotropic_pixels" "', argument " "2"" of type '" "medium_struct *""'"); 
  }
  arg2 = reinterpret_cast< medium_struct * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fragment_stats_count_anisotropic_pixels" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->count_anisotropic_pixels(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fragment_stats_count_nonlinear_pixels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *arg1 = (meep_geom::fragment_stats *) 0 ;
  medium_struct *arg2 = (medium_struct *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fragment_stats_count_nonlinear_pixels",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fragment_stats_count_nonlinear_pixels" "', argument " "1"" of type '" "meep_geom::fragment_stats *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::fragment_stats * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_medium_struct, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fragment_stats_count_nonlinear_pixels" "', argument " "2"" of type '" "medium_struct *""'"); 
  }
  arg2 = reinterpret_cast< medium_struct * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fragment_stats_count_nonlinear_pixels" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->count_nonlinear_pixels(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fragment_stats_count_susceptibility_pixels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *arg1 = (meep_geom::fragment_stats *) 0 ;
  medium_struct *arg2 = (medium_struct *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fragment_stats_count_susceptibility_pixels",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fragment_stats_count_susceptibility_pixels" "', argument " "1"" of type '" "meep_geom::fragment_stats *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::fragment_stats * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_medium_struct, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fragment_stats_count_susceptibility_pixels" "', argument " "2"" of type '" "medium_struct *""'"); 
  }
  arg2 = reinterpret_cast< medium_struct * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fragment_stats_count_susceptibility_pixels" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->count_susceptibility_pixels(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fragment_stats_count_nonzero_conductivity_pixels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *arg1 = (meep_geom::fragment_stats *) 0 ;
  medium_struct *arg2 = (medium_struct *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fragment_stats_count_nonzero_conductivity_pixels",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fragment_stats_count_nonzero_conductivity_pixels" "', argument " "1"" of type '" "meep_geom::fragment_stats *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::fragment_stats * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_medium_struct, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fragment_stats_count_nonzero_conductivity_pixels" "', argument " "2"" of type '" "medium_struct *""'"); 
  }
  arg2 = reinterpret_cast< medium_struct * >(argp2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fragment_stats_count_nonzero_conductivity_pixels" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->count_nonzero_conductivity_pixels(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fragment_stats_compute_dft_stats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *arg1 = (meep_geom::fragment_stats *) 0 ;
  std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > *arg2 = (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:fragment_stats_compute_dft_stats",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fragment_stats_compute_dft_stats" "', argument " "1"" of type '" "meep_geom::fragment_stats *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::fragment_stats * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fragment_stats_compute_dft_stats" "', argument " "2"" of type '" "std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > * >(argp2);
  (arg1)->compute_dft_stats(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fragment_stats_print_stats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *arg1 = (meep_geom::fragment_stats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fragment_stats_print_stats",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__fragment_stats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fragment_stats_print_stats" "', argument " "1"" of type '" "meep_geom::fragment_stats *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::fragment_stats * >(argp1);
  (arg1)->print_stats();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_fragment_stats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::fragment_stats *arg1 = (meep_geom::fragment_stats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_fragment_stats",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__fragment_stats, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_fragment_stats" "', argument " "1"" of type '" "meep_geom::fragment_stats *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::fragment_stats * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *fragment_stats_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep_geom__fragment_stats, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_compute_fragment_stats__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  geometric_object_list arg1 ;
  meep::grid_volume *arg2 = (meep::grid_volume *) 0 ;
  vector3 arg3 ;
  vector3 arg4 ;
  material_type arg5 ;
  std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > arg6 ;
  double arg7 ;
  int arg8 ;
  bool arg9 ;
  double arg10 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:compute_fragment_stats",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  {
    if(!py_list_to_gobj_list(obj0, &arg1)) {
      SWIG_fail;
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compute_fragment_stats" "', argument " "2"" of type '" "meep::grid_volume *""'"); 
  }
  arg2 = reinterpret_cast< meep::grid_volume * >(argp2);
  {
    if(!pyv3_to_v3(obj2, &arg3)) {
      SWIG_fail;
    }
  }
  {
    if(!pyv3_to_v3(obj3, &arg4)) {
      SWIG_fail;
    }
  }
  {
    if(!pymaterial_to_material(obj4, &arg5)) {
      SWIG_fail;
    }
  }
  {
    std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > *ptr = (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "compute_fragment_stats" "', argument " "6"" of type '" "std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "compute_fragment_stats" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "compute_fragment_stats" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_bool(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "compute_fragment_stats" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "compute_fragment_stats" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  result = meep_geom::compute_fragment_stats(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = swig::from(static_cast< std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > >(result));
  {
    for(int i = 0; i < (&arg1)->num_items; i++) {
      if (((material_data *)(&arg1)->items[i].material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg1)->items[i].material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg1)->items[i].material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg1)->items[i].material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg1)->items[i].material);
      geometric_object_destroy((&arg1)->items[i]);
    }
    delete[] (&arg1)->items;
  }
  {
    if (arg5->medium.E_susceptibilities.items) {
      delete[] arg5->medium.E_susceptibilities.items;
    }
    if (arg5->medium.H_susceptibilities.items) {
      delete[] arg5->medium.H_susceptibilities.items;
    }
    free(arg5);
  }
  return resultobj;
fail:
  {
    for(int i = 0; i < (&arg1)->num_items; i++) {
      if (((material_data *)(&arg1)->items[i].material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg1)->items[i].material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg1)->items[i].material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg1)->items[i].material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg1)->items[i].material);
      geometric_object_destroy((&arg1)->items[i]);
    }
    delete[] (&arg1)->items;
  }
  {
    if (arg5->medium.E_susceptibilities.items) {
      delete[] arg5->medium.E_susceptibilities.items;
    }
    if (arg5->medium.H_susceptibilities.items) {
      delete[] arg5->medium.H_susceptibilities.items;
    }
    free(arg5);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_compute_fragment_stats__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  geometric_object_list arg1 ;
  meep::grid_volume *arg2 = (meep::grid_volume *) 0 ;
  vector3 arg3 ;
  vector3 arg4 ;
  material_type arg5 ;
  std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > arg6 ;
  double arg7 ;
  int arg8 ;
  bool arg9 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:compute_fragment_stats",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  {
    if(!py_list_to_gobj_list(obj0, &arg1)) {
      SWIG_fail;
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_meep__grid_volume, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compute_fragment_stats" "', argument " "2"" of type '" "meep::grid_volume *""'"); 
  }
  arg2 = reinterpret_cast< meep::grid_volume * >(argp2);
  {
    if(!pyv3_to_v3(obj2, &arg3)) {
      SWIG_fail;
    }
  }
  {
    if(!pyv3_to_v3(obj3, &arg4)) {
      SWIG_fail;
    }
  }
  {
    if(!pymaterial_to_material(obj4, &arg5)) {
      SWIG_fail;
    }
  }
  {
    std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > *ptr = (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "compute_fragment_stats" "', argument " "6"" of type '" "std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "compute_fragment_stats" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "compute_fragment_stats" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_bool(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "compute_fragment_stats" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  result = meep_geom::compute_fragment_stats(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = swig::from(static_cast< std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > >(result));
  {
    for(int i = 0; i < (&arg1)->num_items; i++) {
      if (((material_data *)(&arg1)->items[i].material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg1)->items[i].material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg1)->items[i].material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg1)->items[i].material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg1)->items[i].material);
      geometric_object_destroy((&arg1)->items[i]);
    }
    delete[] (&arg1)->items;
  }
  {
    if (arg5->medium.E_susceptibilities.items) {
      delete[] arg5->medium.E_susceptibilities.items;
    }
    if (arg5->medium.H_susceptibilities.items) {
      delete[] arg5->medium.H_susceptibilities.items;
    }
    free(arg5);
  }
  return resultobj;
fail:
  {
    for(int i = 0; i < (&arg1)->num_items; i++) {
      if (((material_data *)(&arg1)->items[i].material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg1)->items[i].material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg1)->items[i].material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg1)->items[i].material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg1)->items[i].material);
      geometric_object_destroy((&arg1)->items[i]);
    }
    delete[] (&arg1)->items;
  }
  {
    if (arg5->medium.E_susceptibilities.items) {
      delete[] arg5->medium.E_susceptibilities.items;
    }
    if (arg5->medium.H_susceptibilities.items) {
      delete[] arg5->medium.H_susceptibilities.items;
    }
    free(arg5);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_compute_fragment_stats(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[11] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 10) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 9) {
    int _v;
    {
      _v = PyList_Check(argv[0]);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PyObject_IsInstance(argv[2], py_vector3_object());
        }
        if (_v) {
          {
            _v = PyObject_IsInstance(argv[3], py_vector3_object());
          }
          if (_v) {
            {
              int py_material = PyObject_IsInstance(argv[4], py_material_object());
              int user_material = PyFunction_Check(argv[4]);
              int file_material = IsPyString(argv[4]);
              
              _v = py_material || user_material || file_material;
            }
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_bool(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_compute_fragment_stats__SWIG_1(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      _v = PyList_Check(argv[0]);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_meep__grid_volume, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = PyObject_IsInstance(argv[2], py_vector3_object());
        }
        if (_v) {
          {
            _v = PyObject_IsInstance(argv[3], py_vector3_object());
          }
          if (_v) {
            {
              int py_material = PyObject_IsInstance(argv[4], py_material_object());
              int user_material = PyFunction_Check(argv[4]);
              int file_material = IsPyString(argv[4]);
              
              _v = py_material || user_material || file_material;
            }
            if (_v) {
              int res = swig::asptr(argv[5], (std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_bool(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        return _wrap_compute_fragment_stats__SWIG_0(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'compute_fragment_stats'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep_geom::compute_fragment_stats(geometric_object_list,meep::grid_volume *,vector3,vector3,material_type,std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >,double,int,bool,double)\n"
    "    meep_geom::compute_fragment_stats(geometric_object_list,meep::grid_volume *,vector3,vector3,material_type,std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > >,double,int,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_absorber_thickness_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::absorber *arg1 = (meep_geom::absorber *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:absorber_thickness_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__absorber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "absorber_thickness_set" "', argument " "1"" of type '" "meep_geom::absorber *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::absorber * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "absorber_thickness_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->thickness = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_absorber_thickness_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::absorber *arg1 = (meep_geom::absorber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:absorber_thickness_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__absorber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "absorber_thickness_get" "', argument " "1"" of type '" "meep_geom::absorber *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::absorber * >(argp1);
  result = (double) ((arg1)->thickness);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_absorber_direction_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::absorber *arg1 = (meep_geom::absorber *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:absorber_direction_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__absorber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "absorber_direction_set" "', argument " "1"" of type '" "meep_geom::absorber *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::absorber * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "absorber_direction_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->direction = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_absorber_direction_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::absorber *arg1 = (meep_geom::absorber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:absorber_direction_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__absorber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "absorber_direction_get" "', argument " "1"" of type '" "meep_geom::absorber *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::absorber * >(argp1);
  result = (int) ((arg1)->direction);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_absorber_side_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::absorber *arg1 = (meep_geom::absorber *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:absorber_side_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__absorber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "absorber_side_set" "', argument " "1"" of type '" "meep_geom::absorber *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::absorber * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "absorber_side_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->side = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_absorber_side_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::absorber *arg1 = (meep_geom::absorber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:absorber_side_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__absorber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "absorber_side_get" "', argument " "1"" of type '" "meep_geom::absorber *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::absorber * >(argp1);
  result = (int) ((arg1)->side);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_absorber_R_asymptotic_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::absorber *arg1 = (meep_geom::absorber *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:absorber_R_asymptotic_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__absorber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "absorber_R_asymptotic_set" "', argument " "1"" of type '" "meep_geom::absorber *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::absorber * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "absorber_R_asymptotic_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->R_asymptotic = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_absorber_R_asymptotic_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::absorber *arg1 = (meep_geom::absorber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:absorber_R_asymptotic_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__absorber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "absorber_R_asymptotic_get" "', argument " "1"" of type '" "meep_geom::absorber *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::absorber * >(argp1);
  result = (double) ((arg1)->R_asymptotic);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_absorber_mean_stretch_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::absorber *arg1 = (meep_geom::absorber *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:absorber_mean_stretch_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__absorber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "absorber_mean_stretch_set" "', argument " "1"" of type '" "meep_geom::absorber *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::absorber * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "absorber_mean_stretch_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->mean_stretch = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_absorber_mean_stretch_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::absorber *arg1 = (meep_geom::absorber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:absorber_mean_stretch_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__absorber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "absorber_mean_stretch_get" "', argument " "1"" of type '" "meep_geom::absorber *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::absorber * >(argp1);
  result = (double) ((arg1)->mean_stretch);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_absorber_pml_profile_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::absorber *arg1 = (meep_geom::absorber *) 0 ;
  meep::pml_profile_func arg2 = (meep::pml_profile_func) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:absorber_pml_profile_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__absorber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "absorber_pml_profile_set" "', argument " "1"" of type '" "meep_geom::absorber *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::absorber * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_double_p_void__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "absorber_pml_profile_set" "', argument " "2"" of type '" "meep::pml_profile_func""'"); 
    }
  }
  if (arg1) (arg1)->pml_profile = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_absorber_pml_profile_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::absorber *arg1 = (meep_geom::absorber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  meep::pml_profile_func result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:absorber_pml_profile_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__absorber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "absorber_pml_profile_get" "', argument " "1"" of type '" "meep_geom::absorber *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::absorber * >(argp1);
  result = (meep::pml_profile_func) ((arg1)->pml_profile);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_double_p_void__double);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_absorber_pml_profile_data_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::absorber *arg1 = (meep_geom::absorber *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:absorber_pml_profile_data_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__absorber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "absorber_pml_profile_data_set" "', argument " "1"" of type '" "meep_geom::absorber *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::absorber * >(argp1);
  {
    arg2 = (void*)obj1;
  }
  if (arg1) (arg1)->pml_profile_data = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_absorber_pml_profile_data_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::absorber *arg1 = (meep_geom::absorber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:absorber_pml_profile_data_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__absorber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "absorber_pml_profile_data_get" "', argument " "1"" of type '" "meep_geom::absorber *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::absorber * >(argp1);
  result = (void *) ((arg1)->pml_profile_data);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_absorber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::absorber *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_absorber")) SWIG_fail;
  result = (meep_geom::absorber *)new meep_geom::absorber();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_meep_geom__absorber, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_absorber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::absorber *arg1 = (meep_geom::absorber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_absorber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep_geom__absorber, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_absorber" "', argument " "1"" of type '" "meep_geom::absorber *""'"); 
  }
  arg1 = reinterpret_cast< meep_geom::absorber * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *absorber_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_meep_geom__absorber, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_create_absorber_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::absorber_list result;
  
  if (!PyArg_ParseTuple(args,(char *)":create_absorber_list")) SWIG_fail;
  result = (meep_geom::absorber_list)meep_geom::create_absorber_list();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_meep_geom__absorber_std__allocatorT_meep_geom__absorber_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_destroy_absorber_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::absorber_list arg1 = (meep_geom::absorber_list) 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:destroy_absorber_list",&obj0)) SWIG_fail;
  {
    if (obj0 == Py_None) {
      arg1 = 0;
    } else {
      arg1 = create_absorber_list();
      
      Py_ssize_t len = PyList_Size(obj0);
      
      for (Py_ssize_t i = 0; i < len; i++) {
        absorber a;
        PyObject *py_absorber = PyList_GetItem(obj0, i);
        
        if (!pyabsorber_to_absorber(py_absorber, &a)) {
          SWIG_fail;
        }
        
        add_absorbing_layer(arg1, a.thickness, a.direction, a.side,
          a.R_asymptotic, a.mean_stretch, py_pml_profile,
          a.pml_profile_data);
        Py_DECREF((PyObject *)a.pml_profile_data);
      }
    }
  }
  meep_geom::destroy_absorber_list(arg1);
  resultobj = SWIG_Py_Void();
  {
    if (arg1) {
      destroy_absorber_list(arg1);
    }
  }
  return resultobj;
fail:
  {
    if (arg1) {
      destroy_absorber_list(arg1);
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_add_absorbing_layer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::absorber_list arg1 = (meep_geom::absorber_list) 0 ;
  double arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  meep::pml_profile_func arg7 = (meep::pml_profile_func) 0 ;
  void *arg8 = (void *) 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int res8 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:add_absorbing_layer",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    if (obj0 == Py_None) {
      arg1 = 0;
    } else {
      arg1 = create_absorber_list();
      
      Py_ssize_t len = PyList_Size(obj0);
      
      for (Py_ssize_t i = 0; i < len; i++) {
        absorber a;
        PyObject *py_absorber = PyList_GetItem(obj0, i);
        
        if (!pyabsorber_to_absorber(py_absorber, &a)) {
          SWIG_fail;
        }
        
        add_absorbing_layer(arg1, a.thickness, a.direction, a.side,
          a.R_asymptotic, a.mean_stretch, py_pml_profile,
          a.pml_profile_data);
        Py_DECREF((PyObject *)a.pml_profile_data);
      }
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_absorbing_layer" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "add_absorbing_layer" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "add_absorbing_layer" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "add_absorbing_layer" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "add_absorbing_layer" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    int res = SWIG_ConvertFunctionPtr(obj6, (void**)(&arg7), SWIGTYPE_p_f_double_p_void__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "add_absorbing_layer" "', argument " "7"" of type '" "meep::pml_profile_func""'"); 
    }
  }
  res8 = SWIG_ConvertPtr(obj7,SWIG_as_voidptrptr(&arg8), 0, 0);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "add_absorbing_layer" "', argument " "8"" of type '" "void *""'"); 
  }
  meep_geom::add_absorbing_layer(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_Py_Void();
  {
    if (arg1) {
      destroy_absorber_list(arg1);
    }
  }
  return resultobj;
fail:
  {
    if (arg1) {
      destroy_absorber_list(arg1);
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_add_absorbing_layer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::absorber_list arg1 = (meep_geom::absorber_list) 0 ;
  double arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  meep::pml_profile_func arg7 = (meep::pml_profile_func) 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:add_absorbing_layer",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  {
    if (obj0 == Py_None) {
      arg1 = 0;
    } else {
      arg1 = create_absorber_list();
      
      Py_ssize_t len = PyList_Size(obj0);
      
      for (Py_ssize_t i = 0; i < len; i++) {
        absorber a;
        PyObject *py_absorber = PyList_GetItem(obj0, i);
        
        if (!pyabsorber_to_absorber(py_absorber, &a)) {
          SWIG_fail;
        }
        
        add_absorbing_layer(arg1, a.thickness, a.direction, a.side,
          a.R_asymptotic, a.mean_stretch, py_pml_profile,
          a.pml_profile_data);
        Py_DECREF((PyObject *)a.pml_profile_data);
      }
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_absorbing_layer" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "add_absorbing_layer" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "add_absorbing_layer" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "add_absorbing_layer" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "add_absorbing_layer" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    int res = SWIG_ConvertFunctionPtr(obj6, (void**)(&arg7), SWIGTYPE_p_f_double_p_void__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "add_absorbing_layer" "', argument " "7"" of type '" "meep::pml_profile_func""'"); 
    }
  }
  meep_geom::add_absorbing_layer(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  {
    if (arg1) {
      destroy_absorber_list(arg1);
    }
  }
  return resultobj;
fail:
  {
    if (arg1) {
      destroy_absorber_list(arg1);
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_add_absorbing_layer__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::absorber_list arg1 = (meep_geom::absorber_list) 0 ;
  double arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:add_absorbing_layer",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    if (obj0 == Py_None) {
      arg1 = 0;
    } else {
      arg1 = create_absorber_list();
      
      Py_ssize_t len = PyList_Size(obj0);
      
      for (Py_ssize_t i = 0; i < len; i++) {
        absorber a;
        PyObject *py_absorber = PyList_GetItem(obj0, i);
        
        if (!pyabsorber_to_absorber(py_absorber, &a)) {
          SWIG_fail;
        }
        
        add_absorbing_layer(arg1, a.thickness, a.direction, a.side,
          a.R_asymptotic, a.mean_stretch, py_pml_profile,
          a.pml_profile_data);
        Py_DECREF((PyObject *)a.pml_profile_data);
      }
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_absorbing_layer" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "add_absorbing_layer" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "add_absorbing_layer" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "add_absorbing_layer" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "add_absorbing_layer" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  meep_geom::add_absorbing_layer(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  {
    if (arg1) {
      destroy_absorber_list(arg1);
    }
  }
  return resultobj;
fail:
  {
    if (arg1) {
      destroy_absorber_list(arg1);
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_add_absorbing_layer__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::absorber_list arg1 = (meep_geom::absorber_list) 0 ;
  double arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:add_absorbing_layer",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    if (obj0 == Py_None) {
      arg1 = 0;
    } else {
      arg1 = create_absorber_list();
      
      Py_ssize_t len = PyList_Size(obj0);
      
      for (Py_ssize_t i = 0; i < len; i++) {
        absorber a;
        PyObject *py_absorber = PyList_GetItem(obj0, i);
        
        if (!pyabsorber_to_absorber(py_absorber, &a)) {
          SWIG_fail;
        }
        
        add_absorbing_layer(arg1, a.thickness, a.direction, a.side,
          a.R_asymptotic, a.mean_stretch, py_pml_profile,
          a.pml_profile_data);
        Py_DECREF((PyObject *)a.pml_profile_data);
      }
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_absorbing_layer" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "add_absorbing_layer" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "add_absorbing_layer" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "add_absorbing_layer" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  meep_geom::add_absorbing_layer(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  {
    if (arg1) {
      destroy_absorber_list(arg1);
    }
  }
  return resultobj;
fail:
  {
    if (arg1) {
      destroy_absorber_list(arg1);
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_add_absorbing_layer__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::absorber_list arg1 = (meep_geom::absorber_list) 0 ;
  double arg2 ;
  int arg3 ;
  int arg4 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:add_absorbing_layer",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    if (obj0 == Py_None) {
      arg1 = 0;
    } else {
      arg1 = create_absorber_list();
      
      Py_ssize_t len = PyList_Size(obj0);
      
      for (Py_ssize_t i = 0; i < len; i++) {
        absorber a;
        PyObject *py_absorber = PyList_GetItem(obj0, i);
        
        if (!pyabsorber_to_absorber(py_absorber, &a)) {
          SWIG_fail;
        }
        
        add_absorbing_layer(arg1, a.thickness, a.direction, a.side,
          a.R_asymptotic, a.mean_stretch, py_pml_profile,
          a.pml_profile_data);
        Py_DECREF((PyObject *)a.pml_profile_data);
      }
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_absorbing_layer" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "add_absorbing_layer" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "add_absorbing_layer" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  meep_geom::add_absorbing_layer(arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  {
    if (arg1) {
      destroy_absorber_list(arg1);
    }
  }
  return resultobj;
fail:
  {
    if (arg1) {
      destroy_absorber_list(arg1);
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_add_absorbing_layer__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::absorber_list arg1 = (meep_geom::absorber_list) 0 ;
  double arg2 ;
  int arg3 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:add_absorbing_layer",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if (obj0 == Py_None) {
      arg1 = 0;
    } else {
      arg1 = create_absorber_list();
      
      Py_ssize_t len = PyList_Size(obj0);
      
      for (Py_ssize_t i = 0; i < len; i++) {
        absorber a;
        PyObject *py_absorber = PyList_GetItem(obj0, i);
        
        if (!pyabsorber_to_absorber(py_absorber, &a)) {
          SWIG_fail;
        }
        
        add_absorbing_layer(arg1, a.thickness, a.direction, a.side,
          a.R_asymptotic, a.mean_stretch, py_pml_profile,
          a.pml_profile_data);
        Py_DECREF((PyObject *)a.pml_profile_data);
      }
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_absorbing_layer" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "add_absorbing_layer" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  meep_geom::add_absorbing_layer(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    if (arg1) {
      destroy_absorber_list(arg1);
    }
  }
  return resultobj;
fail:
  {
    if (arg1) {
      destroy_absorber_list(arg1);
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_add_absorbing_layer__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep_geom::absorber_list arg1 = (meep_geom::absorber_list) 0 ;
  double arg2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:add_absorbing_layer",&obj0,&obj1)) SWIG_fail;
  {
    if (obj0 == Py_None) {
      arg1 = 0;
    } else {
      arg1 = create_absorber_list();
      
      Py_ssize_t len = PyList_Size(obj0);
      
      for (Py_ssize_t i = 0; i < len; i++) {
        absorber a;
        PyObject *py_absorber = PyList_GetItem(obj0, i);
        
        if (!pyabsorber_to_absorber(py_absorber, &a)) {
          SWIG_fail;
        }
        
        add_absorbing_layer(arg1, a.thickness, a.direction, a.side,
          a.R_asymptotic, a.mean_stretch, py_pml_profile,
          a.pml_profile_data);
        Py_DECREF((PyObject *)a.pml_profile_data);
      }
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_absorbing_layer" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  meep_geom::add_absorbing_layer(arg1,arg2);
  resultobj = SWIG_Py_Void();
  {
    if (arg1) {
      destroy_absorber_list(arg1);
    }
  }
  return resultobj;
fail:
  {
    if (arg1) {
      destroy_absorber_list(arg1);
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_add_absorbing_layer(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = PySequence_Check(argv[0]) || argv[0] == Py_None;
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_add_absorbing_layer__SWIG_6(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = PySequence_Check(argv[0]) || argv[0] == Py_None;
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_add_absorbing_layer__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = PySequence_Check(argv[0]) || argv[0] == Py_None;
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_add_absorbing_layer__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = PySequence_Check(argv[0]) || argv[0] == Py_None;
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_add_absorbing_layer__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = PySequence_Check(argv[0]) || argv[0] == Py_None;
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_add_absorbing_layer__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = PySequence_Check(argv[0]) || argv[0] == Py_None;
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                void *ptr = 0;
                int res = SWIG_ConvertFunctionPtr(argv[6], &ptr, SWIGTYPE_p_f_double_p_void__double);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_add_absorbing_layer__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      _v = PySequence_Check(argv[0]) || argv[0] == Py_None;
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                void *ptr = 0;
                int res = SWIG_ConvertFunctionPtr(argv[6], &ptr, SWIGTYPE_p_f_double_p_void__double);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *ptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &ptr, 0, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_add_absorbing_layer__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'add_absorbing_layer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep_geom::add_absorbing_layer(meep_geom::absorber_list,double,int,int,double,double,meep::pml_profile_func,void *)\n"
    "    meep_geom::add_absorbing_layer(meep_geom::absorber_list,double,int,int,double,double,meep::pml_profile_func)\n"
    "    meep_geom::add_absorbing_layer(meep_geom::absorber_list,double,int,int,double,double)\n"
    "    meep_geom::add_absorbing_layer(meep_geom::absorber_list,double,int,int,double)\n"
    "    meep_geom::add_absorbing_layer(meep_geom::absorber_list,double,int,int)\n"
    "    meep_geom::add_absorbing_layer(meep_geom::absorber_list,double,int)\n"
    "    meep_geom::add_absorbing_layer(meep_geom::absorber_list,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_set_dimensions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set_dimensions",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_dimensions" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  meep_geom::set_dimensions(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_materials_from_geometry__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  geometric_object_list arg2 ;
  bool arg3 ;
  double arg4 ;
  int arg5 ;
  bool arg6 ;
  bool arg7 ;
  material_type arg8 ;
  meep_geom::absorber_list arg9 = (meep_geom::absorber_list) 0 ;
  material_type_list arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:set_materials_from_geometry",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_materials_from_geometry" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    if(!py_list_to_gobj_list(obj1, &arg2)) {
      SWIG_fail;
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "set_materials_from_geometry" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "set_materials_from_geometry" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "set_materials_from_geometry" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "set_materials_from_geometry" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "set_materials_from_geometry" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  {
    if(!pymaterial_to_material(obj7, &arg8)) {
      SWIG_fail;
    }
  }
  {
    if (obj8 == Py_None) {
      arg9 = 0;
    } else {
      arg9 = create_absorber_list();
      
      Py_ssize_t len = PyList_Size(obj8);
      
      for (Py_ssize_t i = 0; i < len; i++) {
        absorber a;
        PyObject *py_absorber = PyList_GetItem(obj8, i);
        
        if (!pyabsorber_to_absorber(py_absorber, &a)) {
          SWIG_fail;
        }
        
        add_absorbing_layer(arg9, a.thickness, a.direction, a.side,
          a.R_asymptotic, a.mean_stretch, py_pml_profile,
          a.pml_profile_data);
        Py_DECREF((PyObject *)a.pml_profile_data);
      }
    }
  }
  {
    Py_ssize_t len = PyList_Size(obj9);
    
    if (len == 0) {
      arg10 = material_type_list();
    } else {
      material_type_list mtl;
      mtl.num_items = len;
      mtl.items = new material_type[len];
      for (Py_ssize_t i = 0; i < len; i++) {
        PyObject *py_material = PyList_GetItem(obj9, i);
        if (!pymaterial_to_material(py_material, &mtl.items[i])) {
          SWIG_fail;
        }
      }
      arg10 = mtl;
    }
  }
  meep_geom::set_materials_from_geometry(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_Py_Void();
  {
    for(int i = 0; i < (&arg2)->num_items; i++) {
      if (((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg2)->items[i].material);
      geometric_object_destroy((&arg2)->items[i]);
    }
    delete[] (&arg2)->items;
  }
  {
    if (arg8->medium.E_susceptibilities.items) {
      delete[] arg8->medium.E_susceptibilities.items;
    }
    if (arg8->medium.H_susceptibilities.items) {
      delete[] arg8->medium.H_susceptibilities.items;
    }
    free(arg8);
  }
  {
    if (arg9) {
      destroy_absorber_list(arg9);
    }
  }
  {
    if ((&arg10)->num_items != 0) {
      for (int i = 0; i < (&arg10)->num_items; i++) {
        if ((&arg10)->items[i]->medium.E_susceptibilities.items) {
          delete[] (&arg10)->items[i]->medium.E_susceptibilities.items;
        }
        if ((&arg10)->items[i]->medium.H_susceptibilities.items) {
          delete[] (&arg10)->items[i]->medium.H_susceptibilities.items;
        }
        free((&arg10)->items[i]);
      }
      delete[] (&arg10)->items;
    }
  }
  return resultobj;
fail:
  {
    for(int i = 0; i < (&arg2)->num_items; i++) {
      if (((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg2)->items[i].material);
      geometric_object_destroy((&arg2)->items[i]);
    }
    delete[] (&arg2)->items;
  }
  {
    if (arg8->medium.E_susceptibilities.items) {
      delete[] arg8->medium.E_susceptibilities.items;
    }
    if (arg8->medium.H_susceptibilities.items) {
      delete[] arg8->medium.H_susceptibilities.items;
    }
    free(arg8);
  }
  {
    if (arg9) {
      destroy_absorber_list(arg9);
    }
  }
  {
    if ((&arg10)->num_items != 0) {
      for (int i = 0; i < (&arg10)->num_items; i++) {
        if ((&arg10)->items[i]->medium.E_susceptibilities.items) {
          delete[] (&arg10)->items[i]->medium.E_susceptibilities.items;
        }
        if ((&arg10)->items[i]->medium.H_susceptibilities.items) {
          delete[] (&arg10)->items[i]->medium.H_susceptibilities.items;
        }
        free((&arg10)->items[i]);
      }
      delete[] (&arg10)->items;
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_materials_from_geometry__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  geometric_object_list arg2 ;
  bool arg3 ;
  double arg4 ;
  int arg5 ;
  bool arg6 ;
  bool arg7 ;
  material_type arg8 ;
  meep_geom::absorber_list arg9 = (meep_geom::absorber_list) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:set_materials_from_geometry",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_materials_from_geometry" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    if(!py_list_to_gobj_list(obj1, &arg2)) {
      SWIG_fail;
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "set_materials_from_geometry" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "set_materials_from_geometry" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "set_materials_from_geometry" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "set_materials_from_geometry" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "set_materials_from_geometry" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  {
    if(!pymaterial_to_material(obj7, &arg8)) {
      SWIG_fail;
    }
  }
  {
    if (obj8 == Py_None) {
      arg9 = 0;
    } else {
      arg9 = create_absorber_list();
      
      Py_ssize_t len = PyList_Size(obj8);
      
      for (Py_ssize_t i = 0; i < len; i++) {
        absorber a;
        PyObject *py_absorber = PyList_GetItem(obj8, i);
        
        if (!pyabsorber_to_absorber(py_absorber, &a)) {
          SWIG_fail;
        }
        
        add_absorbing_layer(arg9, a.thickness, a.direction, a.side,
          a.R_asymptotic, a.mean_stretch, py_pml_profile,
          a.pml_profile_data);
        Py_DECREF((PyObject *)a.pml_profile_data);
      }
    }
  }
  meep_geom::set_materials_from_geometry(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_Py_Void();
  {
    for(int i = 0; i < (&arg2)->num_items; i++) {
      if (((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg2)->items[i].material);
      geometric_object_destroy((&arg2)->items[i]);
    }
    delete[] (&arg2)->items;
  }
  {
    if (arg8->medium.E_susceptibilities.items) {
      delete[] arg8->medium.E_susceptibilities.items;
    }
    if (arg8->medium.H_susceptibilities.items) {
      delete[] arg8->medium.H_susceptibilities.items;
    }
    free(arg8);
  }
  {
    if (arg9) {
      destroy_absorber_list(arg9);
    }
  }
  return resultobj;
fail:
  {
    for(int i = 0; i < (&arg2)->num_items; i++) {
      if (((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg2)->items[i].material);
      geometric_object_destroy((&arg2)->items[i]);
    }
    delete[] (&arg2)->items;
  }
  {
    if (arg8->medium.E_susceptibilities.items) {
      delete[] arg8->medium.E_susceptibilities.items;
    }
    if (arg8->medium.H_susceptibilities.items) {
      delete[] arg8->medium.H_susceptibilities.items;
    }
    free(arg8);
  }
  {
    if (arg9) {
      destroy_absorber_list(arg9);
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_materials_from_geometry__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  geometric_object_list arg2 ;
  bool arg3 ;
  double arg4 ;
  int arg5 ;
  bool arg6 ;
  bool arg7 ;
  material_type arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:set_materials_from_geometry",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_materials_from_geometry" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    if(!py_list_to_gobj_list(obj1, &arg2)) {
      SWIG_fail;
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "set_materials_from_geometry" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "set_materials_from_geometry" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "set_materials_from_geometry" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "set_materials_from_geometry" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "set_materials_from_geometry" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  {
    if(!pymaterial_to_material(obj7, &arg8)) {
      SWIG_fail;
    }
  }
  meep_geom::set_materials_from_geometry(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_Py_Void();
  {
    for(int i = 0; i < (&arg2)->num_items; i++) {
      if (((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg2)->items[i].material);
      geometric_object_destroy((&arg2)->items[i]);
    }
    delete[] (&arg2)->items;
  }
  {
    if (arg8->medium.E_susceptibilities.items) {
      delete[] arg8->medium.E_susceptibilities.items;
    }
    if (arg8->medium.H_susceptibilities.items) {
      delete[] arg8->medium.H_susceptibilities.items;
    }
    free(arg8);
  }
  return resultobj;
fail:
  {
    for(int i = 0; i < (&arg2)->num_items; i++) {
      if (((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg2)->items[i].material);
      geometric_object_destroy((&arg2)->items[i]);
    }
    delete[] (&arg2)->items;
  }
  {
    if (arg8->medium.E_susceptibilities.items) {
      delete[] arg8->medium.E_susceptibilities.items;
    }
    if (arg8->medium.H_susceptibilities.items) {
      delete[] arg8->medium.H_susceptibilities.items;
    }
    free(arg8);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_materials_from_geometry__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  geometric_object_list arg2 ;
  bool arg3 ;
  double arg4 ;
  int arg5 ;
  bool arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:set_materials_from_geometry",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_materials_from_geometry" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    if(!py_list_to_gobj_list(obj1, &arg2)) {
      SWIG_fail;
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "set_materials_from_geometry" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "set_materials_from_geometry" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "set_materials_from_geometry" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "set_materials_from_geometry" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "set_materials_from_geometry" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  meep_geom::set_materials_from_geometry(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  {
    for(int i = 0; i < (&arg2)->num_items; i++) {
      if (((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg2)->items[i].material);
      geometric_object_destroy((&arg2)->items[i]);
    }
    delete[] (&arg2)->items;
  }
  return resultobj;
fail:
  {
    for(int i = 0; i < (&arg2)->num_items; i++) {
      if (((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg2)->items[i].material);
      geometric_object_destroy((&arg2)->items[i]);
    }
    delete[] (&arg2)->items;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_materials_from_geometry__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  geometric_object_list arg2 ;
  bool arg3 ;
  double arg4 ;
  int arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:set_materials_from_geometry",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_materials_from_geometry" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    if(!py_list_to_gobj_list(obj1, &arg2)) {
      SWIG_fail;
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "set_materials_from_geometry" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "set_materials_from_geometry" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "set_materials_from_geometry" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "set_materials_from_geometry" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  meep_geom::set_materials_from_geometry(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  {
    for(int i = 0; i < (&arg2)->num_items; i++) {
      if (((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg2)->items[i].material);
      geometric_object_destroy((&arg2)->items[i]);
    }
    delete[] (&arg2)->items;
  }
  return resultobj;
fail:
  {
    for(int i = 0; i < (&arg2)->num_items; i++) {
      if (((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg2)->items[i].material);
      geometric_object_destroy((&arg2)->items[i]);
    }
    delete[] (&arg2)->items;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_materials_from_geometry__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  geometric_object_list arg2 ;
  bool arg3 ;
  double arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:set_materials_from_geometry",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_materials_from_geometry" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    if(!py_list_to_gobj_list(obj1, &arg2)) {
      SWIG_fail;
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "set_materials_from_geometry" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "set_materials_from_geometry" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "set_materials_from_geometry" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  meep_geom::set_materials_from_geometry(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  {
    for(int i = 0; i < (&arg2)->num_items; i++) {
      if (((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg2)->items[i].material);
      geometric_object_destroy((&arg2)->items[i]);
    }
    delete[] (&arg2)->items;
  }
  return resultobj;
fail:
  {
    for(int i = 0; i < (&arg2)->num_items; i++) {
      if (((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg2)->items[i].material);
      geometric_object_destroy((&arg2)->items[i]);
    }
    delete[] (&arg2)->items;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_materials_from_geometry__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  geometric_object_list arg2 ;
  bool arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:set_materials_from_geometry",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_materials_from_geometry" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    if(!py_list_to_gobj_list(obj1, &arg2)) {
      SWIG_fail;
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "set_materials_from_geometry" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "set_materials_from_geometry" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  meep_geom::set_materials_from_geometry(arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  {
    for(int i = 0; i < (&arg2)->num_items; i++) {
      if (((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg2)->items[i].material);
      geometric_object_destroy((&arg2)->items[i]);
    }
    delete[] (&arg2)->items;
  }
  return resultobj;
fail:
  {
    for(int i = 0; i < (&arg2)->num_items; i++) {
      if (((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg2)->items[i].material);
      geometric_object_destroy((&arg2)->items[i]);
    }
    delete[] (&arg2)->items;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_materials_from_geometry__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  geometric_object_list arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:set_materials_from_geometry",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_materials_from_geometry" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    if(!py_list_to_gobj_list(obj1, &arg2)) {
      SWIG_fail;
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "set_materials_from_geometry" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  meep_geom::set_materials_from_geometry(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    for(int i = 0; i < (&arg2)->num_items; i++) {
      if (((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg2)->items[i].material);
      geometric_object_destroy((&arg2)->items[i]);
    }
    delete[] (&arg2)->items;
  }
  return resultobj;
fail:
  {
    for(int i = 0; i < (&arg2)->num_items; i++) {
      if (((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg2)->items[i].material);
      geometric_object_destroy((&arg2)->items[i]);
    }
    delete[] (&arg2)->items;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_materials_from_geometry__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::structure *arg1 = (meep::structure *) 0 ;
  geometric_object_list arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:set_materials_from_geometry",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_meep__structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_materials_from_geometry" "', argument " "1"" of type '" "meep::structure *""'"); 
  }
  arg1 = reinterpret_cast< meep::structure * >(argp1);
  {
    if(!py_list_to_gobj_list(obj1, &arg2)) {
      SWIG_fail;
    }
  }
  meep_geom::set_materials_from_geometry(arg1,arg2);
  resultobj = SWIG_Py_Void();
  {
    for(int i = 0; i < (&arg2)->num_items; i++) {
      if (((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg2)->items[i].material);
      geometric_object_destroy((&arg2)->items[i]);
    }
    delete[] (&arg2)->items;
  }
  return resultobj;
fail:
  {
    for(int i = 0; i < (&arg2)->num_items; i++) {
      if (((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->items[i].material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg2)->items[i].material);
      geometric_object_destroy((&arg2)->items[i]);
    }
    delete[] (&arg2)->items;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_materials_from_geometry(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[11] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 10) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyList_Check(argv[1]);
      }
      if (_v) {
        return _wrap_set_materials_from_geometry__SWIG_8(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyList_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_set_materials_from_geometry__SWIG_7(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyList_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_set_materials_from_geometry__SWIG_6(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyList_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_set_materials_from_geometry__SWIG_5(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyList_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_set_materials_from_geometry__SWIG_4(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyList_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_set_materials_from_geometry__SWIG_3(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyList_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int py_material = PyObject_IsInstance(argv[7], py_material_object());
                    int user_material = PyFunction_Check(argv[7]);
                    int file_material = IsPyString(argv[7]);
                    
                    _v = py_material || user_material || file_material;
                  }
                  if (_v) {
                    return _wrap_set_materials_from_geometry__SWIG_2(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyList_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int py_material = PyObject_IsInstance(argv[7], py_material_object());
                    int user_material = PyFunction_Check(argv[7]);
                    int file_material = IsPyString(argv[7]);
                    
                    _v = py_material || user_material || file_material;
                  }
                  if (_v) {
                    {
                      _v = PySequence_Check(argv[8]) || argv[8] == Py_None;
                    }
                    if (_v) {
                      return _wrap_set_materials_from_geometry__SWIG_1(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_meep__structure, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyList_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int py_material = PyObject_IsInstance(argv[7], py_material_object());
                    int user_material = PyFunction_Check(argv[7]);
                    int file_material = IsPyString(argv[7]);
                    
                    _v = py_material || user_material || file_material;
                  }
                  if (_v) {
                    {
                      _v = PySequence_Check(argv[8]) || argv[8] == Py_None;
                    }
                    if (_v) {
                      {
                        _v = PySequence_Check(argv[9]);
                      }
                      if (_v) {
                        return _wrap_set_materials_from_geometry__SWIG_0(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'set_materials_from_geometry'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep_geom::set_materials_from_geometry(meep::structure *,geometric_object_list,bool,double,int,bool,bool,material_type,meep_geom::absorber_list,material_type_list)\n"
    "    meep_geom::set_materials_from_geometry(meep::structure *,geometric_object_list,bool,double,int,bool,bool,material_type,meep_geom::absorber_list)\n"
    "    meep_geom::set_materials_from_geometry(meep::structure *,geometric_object_list,bool,double,int,bool,bool,material_type)\n"
    "    meep_geom::set_materials_from_geometry(meep::structure *,geometric_object_list,bool,double,int,bool,bool)\n"
    "    meep_geom::set_materials_from_geometry(meep::structure *,geometric_object_list,bool,double,int,bool)\n"
    "    meep_geom::set_materials_from_geometry(meep::structure *,geometric_object_list,bool,double,int)\n"
    "    meep_geom::set_materials_from_geometry(meep::structure *,geometric_object_list,bool,double)\n"
    "    meep_geom::set_materials_from_geometry(meep::structure *,geometric_object_list,bool)\n"
    "    meep_geom::set_materials_from_geometry(meep::structure *,geometric_object_list)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_make_dielectric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  material_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:make_dielectric",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "make_dielectric" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = meep_geom::make_dielectric(arg1);
  resultobj = SWIG_NewPointerObj((new material_type(static_cast< const material_type& >(result))), SWIGTYPE_p_material_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_make_user_material(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  user_material_func arg1 ;
  void *arg2 = (void *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  material_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:make_user_material",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_user_material_func,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "make_user_material" "', argument " "1"" of type '" "user_material_func""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "make_user_material" "', argument " "1"" of type '" "user_material_func""'");
    } else {
      user_material_func * temp = reinterpret_cast< user_material_func * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "make_user_material" "', argument " "2"" of type '" "void *""'"); 
  }
  result = meep_geom::make_user_material(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new material_type(static_cast< const material_type& >(result))), SWIGTYPE_p_material_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_make_file_material(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  material_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:make_file_material",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "make_file_material" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = meep_geom::make_file_material((char const *)arg1);
  resultobj = SWIG_NewPointerObj((new material_type(static_cast< const material_type& >(result))), SWIGTYPE_p_material_type, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vec_to_vector3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::vec *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector3 result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vec_to_vector3",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_meep__vec,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vec_to_vector3" "', argument " "1"" of type '" "meep::vec const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vec_to_vector3" "', argument " "1"" of type '" "meep::vec const &""'"); 
  }
  arg1 = reinterpret_cast< meep::vec * >(argp1);
  result = meep_geom::vec_to_vector3((meep::vec const &)*arg1);
  resultobj = SWIG_NewPointerObj((new vector3(static_cast< const vector3& >(result))), SWIGTYPE_p_vector3, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector3_to_vec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector3 arg1 ;
  PyObject * obj0 = 0 ;
  meep::vec result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector3_to_vec",&obj0)) SWIG_fail;
  {
    if(!pyv3_to_v3(obj0, &arg1)) {
      SWIG_fail;
    }
  }
  result = meep_geom::vector3_to_vec(arg1);
  resultobj = SWIG_NewPointerObj((new meep::vec(static_cast< const meep::vec& >(result))), SWIGTYPE_p_meep__vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_linear_interpolate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  meep::realnum arg1 ;
  meep::realnum arg2 ;
  meep::realnum arg3 ;
  meep::realnum *arg4 = (meep::realnum *) 0 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  meep::realnum result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:linear_interpolate",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "linear_interpolate" "', argument " "1"" of type '" "meep::realnum""'");
  } 
  arg1 = static_cast< meep::realnum >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "linear_interpolate" "', argument " "2"" of type '" "meep::realnum""'");
  } 
  arg2 = static_cast< meep::realnum >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "linear_interpolate" "', argument " "3"" of type '" "meep::realnum""'");
  } 
  arg3 = static_cast< meep::realnum >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "linear_interpolate" "', argument " "4"" of type '" "meep::realnum *""'"); 
  }
  arg4 = reinterpret_cast< meep::realnum * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "linear_interpolate" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "linear_interpolate" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "linear_interpolate" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "linear_interpolate" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  result = (meep::realnum)meep_geom::linear_interpolate(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_epsilon_file_material(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  material_data *arg1 = (material_data *) 0 ;
  vector3 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:epsilon_file_material",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_material_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "epsilon_file_material" "', argument " "1"" of type '" "material_data *""'"); 
  }
  arg1 = reinterpret_cast< material_data * >(argp1);
  {
    if(!pyv3_to_v3(obj1, &arg2)) {
      SWIG_fail;
    }
  }
  meep_geom::epsilon_file_material(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_check_offdiag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  medium_struct *arg1 = (medium_struct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:check_offdiag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_medium_struct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "check_offdiag" "', argument " "1"" of type '" "medium_struct *""'"); 
  }
  arg1 = reinterpret_cast< medium_struct * >(argp1);
  meep_geom::check_offdiag(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_geometry_from_GDSII__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  double arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  meep::grid_volume result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:set_geometry_from_GDSII",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_geometry_from_GDSII" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "set_geometry_from_GDSII" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "set_geometry_from_GDSII" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "set_geometry_from_GDSII" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "set_geometry_from_GDSII" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  result = meep_geom::set_geometry_from_GDSII(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new meep::grid_volume(static_cast< const meep::grid_volume& >(result))), SWIGTYPE_p_meep__grid_volume, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_geometry_from_GDSII__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  meep::grid_volume result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:set_geometry_from_GDSII",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_geometry_from_GDSII" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "set_geometry_from_GDSII" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "set_geometry_from_GDSII" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "set_geometry_from_GDSII" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = meep_geom::set_geometry_from_GDSII(arg1,(char const *)arg2,(char const *)arg3,arg4);
  resultobj = SWIG_NewPointerObj((new meep::grid_volume(static_cast< const meep::grid_volume& >(result))), SWIGTYPE_p_meep__grid_volume, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_geometry_from_GDSII__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::grid_volume result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:set_geometry_from_GDSII",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_geometry_from_GDSII" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "set_geometry_from_GDSII" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "set_geometry_from_GDSII" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = meep_geom::set_geometry_from_GDSII(arg1,(char const *)arg2,(char const *)arg3);
  resultobj = SWIG_NewPointerObj((new meep::grid_volume(static_cast< const meep::grid_volume& >(result))), SWIGTYPE_p_meep__grid_volume, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_geometry_from_GDSII__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  meep::grid_volume result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:set_geometry_from_GDSII",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_geometry_from_GDSII" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "set_geometry_from_GDSII" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "set_geometry_from_GDSII" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "set_geometry_from_GDSII" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = meep_geom::set_geometry_from_GDSII(arg1,(char const *)arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new meep::grid_volume(static_cast< const meep::grid_volume& >(result))), SWIGTYPE_p_meep__grid_volume, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_geometry_from_GDSII__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  meep::grid_volume result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:set_geometry_from_GDSII",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_geometry_from_GDSII" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "set_geometry_from_GDSII" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "set_geometry_from_GDSII" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = meep_geom::set_geometry_from_GDSII(arg1,(char const *)arg2,arg3);
  resultobj = SWIG_NewPointerObj((new meep::grid_volume(static_cast< const meep::grid_volume& >(result))), SWIGTYPE_p_meep__grid_volume, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_geometry_from_GDSII(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_set_geometry_from_GDSII__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_set_geometry_from_GDSII__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_set_geometry_from_GDSII__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_set_geometry_from_GDSII__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_set_geometry_from_GDSII__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'set_geometry_from_GDSII'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep_geom::set_geometry_from_GDSII(double,char const *,char const *,int,double)\n"
    "    meep_geom::set_geometry_from_GDSII(double,char const *,char const *,int)\n"
    "    meep_geom::set_geometry_from_GDSII(double,char const *,char const *)\n"
    "    meep_geom::set_geometry_from_GDSII(double,char const *,int,double)\n"
    "    meep_geom::set_geometry_from_GDSII(double,char const *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_get_GDSII_prism__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  material_type arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  geometric_object result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:get_GDSII_prism",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    if(!pymaterial_to_material(obj0, &arg1)) {
      SWIG_fail;
    }
  }
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_GDSII_prism" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "get_GDSII_prism" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "get_GDSII_prism" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "get_GDSII_prism" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "get_GDSII_prism" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  result = meep_geom::get_GDSII_prism(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj((new geometric_object(static_cast< const geometric_object& >(result))), SWIGTYPE_p_geometric_object, SWIG_POINTER_OWN |  0 );
  {
    if (arg1->medium.E_susceptibilities.items) {
      delete[] arg1->medium.E_susceptibilities.items;
    }
    if (arg1->medium.H_susceptibilities.items) {
      delete[] arg1->medium.H_susceptibilities.items;
    }
    free(arg1);
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  {
    if (arg1->medium.E_susceptibilities.items) {
      delete[] arg1->medium.E_susceptibilities.items;
    }
    if (arg1->medium.H_susceptibilities.items) {
      delete[] arg1->medium.H_susceptibilities.items;
    }
    free(arg1);
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_GDSII_prism__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  material_type arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  double arg5 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  geometric_object result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:get_GDSII_prism",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    if(!pymaterial_to_material(obj0, &arg1)) {
      SWIG_fail;
    }
  }
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_GDSII_prism" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "get_GDSII_prism" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "get_GDSII_prism" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "get_GDSII_prism" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  result = meep_geom::get_GDSII_prism(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new geometric_object(static_cast< const geometric_object& >(result))), SWIGTYPE_p_geometric_object, SWIG_POINTER_OWN |  0 );
  {
    if (arg1->medium.E_susceptibilities.items) {
      delete[] arg1->medium.E_susceptibilities.items;
    }
    if (arg1->medium.H_susceptibilities.items) {
      delete[] arg1->medium.H_susceptibilities.items;
    }
    free(arg1);
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  {
    if (arg1->medium.E_susceptibilities.items) {
      delete[] arg1->medium.E_susceptibilities.items;
    }
    if (arg1->medium.H_susceptibilities.items) {
      delete[] arg1->medium.H_susceptibilities.items;
    }
    free(arg1);
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_GDSII_prism__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  material_type arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  geometric_object result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:get_GDSII_prism",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    if(!pymaterial_to_material(obj0, &arg1)) {
      SWIG_fail;
    }
  }
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_GDSII_prism" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "get_GDSII_prism" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "get_GDSII_prism" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = meep_geom::get_GDSII_prism(arg1,(char const *)arg2,(char const *)arg3,arg4);
  resultobj = SWIG_NewPointerObj((new geometric_object(static_cast< const geometric_object& >(result))), SWIGTYPE_p_geometric_object, SWIG_POINTER_OWN |  0 );
  {
    if (arg1->medium.E_susceptibilities.items) {
      delete[] arg1->medium.E_susceptibilities.items;
    }
    if (arg1->medium.H_susceptibilities.items) {
      delete[] arg1->medium.H_susceptibilities.items;
    }
    free(arg1);
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  {
    if (arg1->medium.E_susceptibilities.items) {
      delete[] arg1->medium.E_susceptibilities.items;
    }
    if (arg1->medium.H_susceptibilities.items) {
      delete[] arg1->medium.H_susceptibilities.items;
    }
    free(arg1);
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_GDSII_prism__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  material_type arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  geometric_object result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:get_GDSII_prism",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if(!pymaterial_to_material(obj0, &arg1)) {
      SWIG_fail;
    }
  }
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_GDSII_prism" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "get_GDSII_prism" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = meep_geom::get_GDSII_prism(arg1,(char const *)arg2,(char const *)arg3);
  resultobj = SWIG_NewPointerObj((new geometric_object(static_cast< const geometric_object& >(result))), SWIGTYPE_p_geometric_object, SWIG_POINTER_OWN |  0 );
  {
    if (arg1->medium.E_susceptibilities.items) {
      delete[] arg1->medium.E_susceptibilities.items;
    }
    if (arg1->medium.H_susceptibilities.items) {
      delete[] arg1->medium.H_susceptibilities.items;
    }
    free(arg1);
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  {
    if (arg1->medium.E_susceptibilities.items) {
      delete[] arg1->medium.E_susceptibilities.items;
    }
    if (arg1->medium.H_susceptibilities.items) {
      delete[] arg1->medium.H_susceptibilities.items;
    }
    free(arg1);
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_GDSII_prism__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  material_type arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  geometric_object result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:get_GDSII_prism",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    if(!pymaterial_to_material(obj0, &arg1)) {
      SWIG_fail;
    }
  }
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_GDSII_prism" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "get_GDSII_prism" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "get_GDSII_prism" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "get_GDSII_prism" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  result = meep_geom::get_GDSII_prism(arg1,(char const *)arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new geometric_object(static_cast< const geometric_object& >(result))), SWIGTYPE_p_geometric_object, SWIG_POINTER_OWN |  0 );
  {
    if (arg1->medium.E_susceptibilities.items) {
      delete[] arg1->medium.E_susceptibilities.items;
    }
    if (arg1->medium.H_susceptibilities.items) {
      delete[] arg1->medium.H_susceptibilities.items;
    }
    free(arg1);
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  {
    if (arg1->medium.E_susceptibilities.items) {
      delete[] arg1->medium.E_susceptibilities.items;
    }
    if (arg1->medium.H_susceptibilities.items) {
      delete[] arg1->medium.H_susceptibilities.items;
    }
    free(arg1);
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_GDSII_prism__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  material_type arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  double arg4 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  geometric_object result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:get_GDSII_prism",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    if(!pymaterial_to_material(obj0, &arg1)) {
      SWIG_fail;
    }
  }
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_GDSII_prism" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "get_GDSII_prism" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "get_GDSII_prism" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = meep_geom::get_GDSII_prism(arg1,(char const *)arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new geometric_object(static_cast< const geometric_object& >(result))), SWIGTYPE_p_geometric_object, SWIG_POINTER_OWN |  0 );
  {
    if (arg1->medium.E_susceptibilities.items) {
      delete[] arg1->medium.E_susceptibilities.items;
    }
    if (arg1->medium.H_susceptibilities.items) {
      delete[] arg1->medium.H_susceptibilities.items;
    }
    free(arg1);
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  {
    if (arg1->medium.E_susceptibilities.items) {
      delete[] arg1->medium.E_susceptibilities.items;
    }
    if (arg1->medium.H_susceptibilities.items) {
      delete[] arg1->medium.H_susceptibilities.items;
    }
    free(arg1);
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_GDSII_prism__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  material_type arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  geometric_object result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:get_GDSII_prism",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if(!pymaterial_to_material(obj0, &arg1)) {
      SWIG_fail;
    }
  }
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_GDSII_prism" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "get_GDSII_prism" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = meep_geom::get_GDSII_prism(arg1,(char const *)arg2,arg3);
  resultobj = SWIG_NewPointerObj((new geometric_object(static_cast< const geometric_object& >(result))), SWIGTYPE_p_geometric_object, SWIG_POINTER_OWN |  0 );
  {
    if (arg1->medium.E_susceptibilities.items) {
      delete[] arg1->medium.E_susceptibilities.items;
    }
    if (arg1->medium.H_susceptibilities.items) {
      delete[] arg1->medium.H_susceptibilities.items;
    }
    free(arg1);
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  {
    if (arg1->medium.E_susceptibilities.items) {
      delete[] arg1->medium.E_susceptibilities.items;
    }
    if (arg1->medium.H_susceptibilities.items) {
      delete[] arg1->medium.H_susceptibilities.items;
    }
    free(arg1);
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_GDSII_prism(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      int py_material = PyObject_IsInstance(argv[0], py_material_object());
      int user_material = PyFunction_Check(argv[0]);
      int file_material = IsPyString(argv[0]);
      
      _v = py_material || user_material || file_material;
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_get_GDSII_prism__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int py_material = PyObject_IsInstance(argv[0], py_material_object());
      int user_material = PyFunction_Check(argv[0]);
      int file_material = IsPyString(argv[0]);
      
      _v = py_material || user_material || file_material;
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_get_GDSII_prism__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int py_material = PyObject_IsInstance(argv[0], py_material_object());
      int user_material = PyFunction_Check(argv[0]);
      int file_material = IsPyString(argv[0]);
      
      _v = py_material || user_material || file_material;
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_get_GDSII_prism__SWIG_5(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int py_material = PyObject_IsInstance(argv[0], py_material_object());
      int user_material = PyFunction_Check(argv[0]);
      int file_material = IsPyString(argv[0]);
      
      _v = py_material || user_material || file_material;
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_get_GDSII_prism__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int py_material = PyObject_IsInstance(argv[0], py_material_object());
      int user_material = PyFunction_Check(argv[0]);
      int file_material = IsPyString(argv[0]);
      
      _v = py_material || user_material || file_material;
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_get_GDSII_prism__SWIG_4(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int py_material = PyObject_IsInstance(argv[0], py_material_object());
      int user_material = PyFunction_Check(argv[0]);
      int file_material = IsPyString(argv[0]);
      
      _v = py_material || user_material || file_material;
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_get_GDSII_prism__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int py_material = PyObject_IsInstance(argv[0], py_material_object());
      int user_material = PyFunction_Check(argv[0]);
      int file_material = IsPyString(argv[0]);
      
      _v = py_material || user_material || file_material;
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_get_GDSII_prism__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'get_GDSII_prism'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep_geom::get_GDSII_prism(material_type,char const *,char const *,int,double,double)\n"
    "    meep_geom::get_GDSII_prism(material_type,char const *,char const *,int,double)\n"
    "    meep_geom::get_GDSII_prism(material_type,char const *,char const *,int)\n"
    "    meep_geom::get_GDSII_prism(material_type,char const *,char const *)\n"
    "    meep_geom::get_GDSII_prism(material_type,char const *,int,double,double)\n"
    "    meep_geom::get_GDSII_prism(material_type,char const *,int,double)\n"
    "    meep_geom::get_GDSII_prism(material_type,char const *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_get_GDSII_volume__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  SwigValueWrapper< meep::volume > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:get_GDSII_volume",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_GDSII_volume" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_GDSII_volume" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "get_GDSII_volume" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "get_GDSII_volume" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "get_GDSII_volume" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  result = meep_geom::get_GDSII_volume((char const *)arg1,(char const *)arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new meep::volume(static_cast< const meep::volume& >(result))), SWIGTYPE_p_meep__volume, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_GDSII_volume__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  double arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< meep::volume > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:get_GDSII_volume",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_GDSII_volume" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_GDSII_volume" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "get_GDSII_volume" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "get_GDSII_volume" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = meep_geom::get_GDSII_volume((char const *)arg1,(char const *)arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new meep::volume(static_cast< const meep::volume& >(result))), SWIGTYPE_p_meep__volume, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_GDSII_volume__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< meep::volume > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:get_GDSII_volume",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_GDSII_volume" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_GDSII_volume" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "get_GDSII_volume" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = meep_geom::get_GDSII_volume((char const *)arg1,(char const *)arg2,arg3);
  resultobj = SWIG_NewPointerObj((new meep::volume(static_cast< const meep::volume& >(result))), SWIGTYPE_p_meep__volume, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_GDSII_volume__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< meep::volume > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:get_GDSII_volume",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_GDSII_volume" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_GDSII_volume" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = meep_geom::get_GDSII_volume((char const *)arg1,(char const *)arg2);
  resultobj = SWIG_NewPointerObj((new meep::volume(static_cast< const meep::volume& >(result))), SWIGTYPE_p_meep__volume, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_GDSII_volume__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< meep::volume > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:get_GDSII_volume",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_GDSII_volume" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "get_GDSII_volume" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "get_GDSII_volume" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "get_GDSII_volume" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = meep_geom::get_GDSII_volume((char const *)arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new meep::volume(static_cast< const meep::volume& >(result))), SWIGTYPE_p_meep__volume, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_GDSII_volume__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< meep::volume > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:get_GDSII_volume",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_GDSII_volume" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "get_GDSII_volume" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "get_GDSII_volume" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = meep_geom::get_GDSII_volume((char const *)arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new meep::volume(static_cast< const meep::volume& >(result))), SWIGTYPE_p_meep__volume, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_GDSII_volume__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< meep::volume > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:get_GDSII_volume",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_GDSII_volume" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "get_GDSII_volume" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = meep_geom::get_GDSII_volume((char const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj((new meep::volume(static_cast< const meep::volume& >(result))), SWIGTYPE_p_meep__volume, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_GDSII_volume(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_get_GDSII_volume__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_get_GDSII_volume__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_get_GDSII_volume__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_get_GDSII_volume__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_get_GDSII_volume__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_get_GDSII_volume__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_get_GDSII_volume__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'get_GDSII_volume'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    meep_geom::get_GDSII_volume(char const *,char const *,int,double,double)\n"
    "    meep_geom::get_GDSII_volume(char const *,char const *,int,double)\n"
    "    meep_geom::get_GDSII_volume(char const *,char const *,int)\n"
    "    meep_geom::get_GDSII_volume(char const *,char const *)\n"
    "    meep_geom::get_GDSII_volume(char const *,int,double,double)\n"
    "    meep_geom::get_GDSII_volume(char const *,int,double)\n"
    "    meep_geom::get_GDSII_volume(char const *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector3_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector3 *arg1 = (vector3 *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector3_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector3_x_set" "', argument " "1"" of type '" "vector3 *""'"); 
  }
  arg1 = reinterpret_cast< vector3 * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector3_x_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector3_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector3 *arg1 = (vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector3_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector3_x_get" "', argument " "1"" of type '" "vector3 *""'"); 
  }
  arg1 = reinterpret_cast< vector3 * >(argp1);
  result = (double) ((arg1)->x);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector3_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector3 *arg1 = (vector3 *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector3_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector3_y_set" "', argument " "1"" of type '" "vector3 *""'"); 
  }
  arg1 = reinterpret_cast< vector3 * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector3_y_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector3_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector3 *arg1 = (vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector3_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector3_y_get" "', argument " "1"" of type '" "vector3 *""'"); 
  }
  arg1 = reinterpret_cast< vector3 * >(argp1);
  result = (double) ((arg1)->y);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector3_z_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector3 *arg1 = (vector3 *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector3_z_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector3_z_set" "', argument " "1"" of type '" "vector3 *""'"); 
  }
  arg1 = reinterpret_cast< vector3 * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector3_z_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->z = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector3_z_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector3 *arg1 = (vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector3_z_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector3_z_get" "', argument " "1"" of type '" "vector3 *""'"); 
  }
  arg1 = reinterpret_cast< vector3 * >(argp1);
  result = (double) ((arg1)->z);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vector3")) SWIG_fail;
  result = (vector3 *)new vector3();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vector3, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector3 *arg1 = (vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vector3",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_vector3, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector3" "', argument " "1"" of type '" "vector3 *""'"); 
  }
  arg1 = reinterpret_cast< vector3 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vector3_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_vector3, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_geom_box_low_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  geom_box *arg1 = (geom_box *) 0 ;
  vector3 *arg2 = (vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:geom_box_low_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_geom_box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "geom_box_low_set" "', argument " "1"" of type '" "geom_box *""'"); 
  }
  arg1 = reinterpret_cast< geom_box * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vector3, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "geom_box_low_set" "', argument " "2"" of type '" "vector3 *""'"); 
  }
  arg2 = reinterpret_cast< vector3 * >(argp2);
  if (arg1) (arg1)->low = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_geom_box_low_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  geom_box *arg1 = (geom_box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:geom_box_low_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_geom_box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "geom_box_low_get" "', argument " "1"" of type '" "geom_box *""'"); 
  }
  arg1 = reinterpret_cast< geom_box * >(argp1);
  result = (vector3 *)& ((arg1)->low);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vector3, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_geom_box_high_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  geom_box *arg1 = (geom_box *) 0 ;
  vector3 *arg2 = (vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:geom_box_high_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_geom_box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "geom_box_high_set" "', argument " "1"" of type '" "geom_box *""'"); 
  }
  arg1 = reinterpret_cast< geom_box * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_vector3, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "geom_box_high_set" "', argument " "2"" of type '" "vector3 *""'"); 
  }
  arg2 = reinterpret_cast< vector3 * >(argp2);
  if (arg1) (arg1)->high = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_geom_box_high_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  geom_box *arg1 = (geom_box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  vector3 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:geom_box_high_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_geom_box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "geom_box_high_get" "', argument " "1"" of type '" "geom_box *""'"); 
  }
  arg1 = reinterpret_cast< geom_box * >(argp1);
  result = (vector3 *)& ((arg1)->high);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vector3, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_geom_box(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  geom_box *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_geom_box")) SWIG_fail;
  result = (geom_box *)new geom_box();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_geom_box, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_geom_box(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  geom_box *arg1 = (geom_box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_geom_box",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_geom_box, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_geom_box" "', argument " "1"" of type '" "geom_box *""'"); 
  }
  arg1 = reinterpret_cast< geom_box * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *geom_box_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_geom_box, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_is_point_in_object(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector3 arg1 ;
  GEOMETRIC_OBJECT arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  boolean result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:is_point_in_object",&obj0,&obj1)) SWIG_fail;
  {
    if(!pyv3_to_v3(obj0, &arg1)) {
      SWIG_fail;
    }
  }
  {
    if(!py_gobj_to_gobj(obj1, &arg2)) {
      SWIG_fail;
    }
  }
  result = point_in_objectp(arg1,arg2);
  {
    resultobj = PyBool_FromLong(result);
  }
  {
    if((&arg2)->subclass.sphere_data || (&arg2)->subclass.cylinder_data || (&arg2)->subclass.block_data) {
      if (((material_data *)(&arg2)->material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg2)->material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg2)->material);
      geometric_object_destroy(arg2);
    }
  }
  return resultobj;
fail:
  {
    if((&arg2)->subclass.sphere_data || (&arg2)->subclass.cylinder_data || (&arg2)->subclass.block_data) {
      if (((material_data *)(&arg2)->material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg2)->material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg2)->material);
      geometric_object_destroy(arg2);
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_point_in_periodic_object(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  vector3 arg1 ;
  GEOMETRIC_OBJECT arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  boolean result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:is_point_in_periodic_object",&obj0,&obj1)) SWIG_fail;
  {
    if(!pyv3_to_v3(obj0, &arg1)) {
      SWIG_fail;
    }
  }
  {
    if(!py_gobj_to_gobj(obj1, &arg2)) {
      SWIG_fail;
    }
  }
  result = point_in_periodic_objectp(arg1,arg2);
  {
    resultobj = PyBool_FromLong(result);
  }
  {
    if((&arg2)->subclass.sphere_data || (&arg2)->subclass.cylinder_data || (&arg2)->subclass.block_data) {
      if (((material_data *)(&arg2)->material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg2)->material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg2)->material);
      geometric_object_destroy(arg2);
    }
  }
  return resultobj;
fail:
  {
    if((&arg2)->subclass.sphere_data || (&arg2)->subclass.cylinder_data || (&arg2)->subclass.block_data) {
      if (((material_data *)(&arg2)->material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg2)->material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg2)->material);
      geometric_object_destroy(arg2);
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_display_geometric_object_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  GEOMETRIC_OBJECT arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:display_geometric_object_info",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "display_geometric_object_info" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    if(!py_gobj_to_gobj(obj1, &arg2)) {
      SWIG_fail;
    }
  }
  display_geometric_object_info(arg1,arg2);
  resultobj = SWIG_Py_Void();
  {
    if((&arg2)->subclass.sphere_data || (&arg2)->subclass.cylinder_data || (&arg2)->subclass.block_data) {
      if (((material_data *)(&arg2)->material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg2)->material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg2)->material);
      geometric_object_destroy(arg2);
    }
  }
  return resultobj;
fail:
  {
    if((&arg2)->subclass.sphere_data || (&arg2)->subclass.cylinder_data || (&arg2)->subclass.block_data) {
      if (((material_data *)(&arg2)->material)->medium.E_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->material)->medium.E_susceptibilities.items;
      }
      if (((material_data *)(&arg2)->material)->medium.H_susceptibilities.items) {
        delete[] ((material_data *)(&arg2)->material)->medium.H_susceptibilities.items;
      }
      free((material_data *)(&arg2)->material);
      geometric_object_destroy(arg2);
    }
  }
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"py_do_harminv", _wrap_py_do_harminv, METH_VARARGS, NULL},
	 { (char *)"_get_farfield", _wrap__get_farfield, METH_VARARGS, NULL},
	 { (char *)"_dft_ldos_ldos", _wrap__dft_ldos_ldos, METH_VARARGS, NULL},
	 { (char *)"_dft_ldos_F", _wrap__dft_ldos_F, METH_VARARGS, NULL},
	 { (char *)"_dft_ldos_J", _wrap__dft_ldos_J, METH_VARARGS, NULL},
	 { (char *)"_get_dft_data_size", _wrap__get_dft_data_size, METH_VARARGS, NULL},
	 { (char *)"_get_dft_data", _wrap__get_dft_data, METH_VARARGS, NULL},
	 { (char *)"_load_dft_data", _wrap__load_dft_data, METH_VARARGS, NULL},
	 { (char *)"make_volume_list", _wrap_make_volume_list, METH_VARARGS, NULL},
	 { (char *)"get_dft_flux_array", _wrap_get_dft_flux_array, METH_VARARGS, NULL},
	 { (char *)"get_dft_fields_array", _wrap_get_dft_fields_array, METH_VARARGS, NULL},
	 { (char *)"get_dft_force_array", _wrap_get_dft_force_array, METH_VARARGS, NULL},
	 { (char *)"get_dft_near2far_array", _wrap_get_dft_near2far_array, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector_iterator", _wrap_FragmentStatsVector_iterator, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector___nonzero__", _wrap_FragmentStatsVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector___bool__", _wrap_FragmentStatsVector___bool__, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector___len__", _wrap_FragmentStatsVector___len__, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector___getslice__", _wrap_FragmentStatsVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector___setslice__", _wrap_FragmentStatsVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector___delslice__", _wrap_FragmentStatsVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector___delitem__", _wrap_FragmentStatsVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector___getitem__", _wrap_FragmentStatsVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector___setitem__", _wrap_FragmentStatsVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector_pop", _wrap_FragmentStatsVector_pop, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector_append", _wrap_FragmentStatsVector_append, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector_empty", _wrap_FragmentStatsVector_empty, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector_size", _wrap_FragmentStatsVector_size, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector_swap", _wrap_FragmentStatsVector_swap, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector_begin", _wrap_FragmentStatsVector_begin, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector_end", _wrap_FragmentStatsVector_end, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector_rbegin", _wrap_FragmentStatsVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector_rend", _wrap_FragmentStatsVector_rend, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector_clear", _wrap_FragmentStatsVector_clear, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector_get_allocator", _wrap_FragmentStatsVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector_pop_back", _wrap_FragmentStatsVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector_erase", _wrap_FragmentStatsVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_FragmentStatsVector", _wrap_new_FragmentStatsVector, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector_push_back", _wrap_FragmentStatsVector_push_back, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector_front", _wrap_FragmentStatsVector_front, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector_back", _wrap_FragmentStatsVector_back, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector_assign", _wrap_FragmentStatsVector_assign, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector_resize", _wrap_FragmentStatsVector_resize, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector_insert", _wrap_FragmentStatsVector_insert, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector_reserve", _wrap_FragmentStatsVector_reserve, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector_capacity", _wrap_FragmentStatsVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_FragmentStatsVector", _wrap_delete_FragmentStatsVector, METH_VARARGS, NULL},
	 { (char *)"FragmentStatsVector_swigregister", FragmentStatsVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"DftDataVector_iterator", _wrap_DftDataVector_iterator, METH_VARARGS, NULL},
	 { (char *)"DftDataVector___nonzero__", _wrap_DftDataVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"DftDataVector___bool__", _wrap_DftDataVector___bool__, METH_VARARGS, NULL},
	 { (char *)"DftDataVector___len__", _wrap_DftDataVector___len__, METH_VARARGS, NULL},
	 { (char *)"DftDataVector___getslice__", _wrap_DftDataVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"DftDataVector___setslice__", _wrap_DftDataVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"DftDataVector___delslice__", _wrap_DftDataVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"DftDataVector___delitem__", _wrap_DftDataVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"DftDataVector___getitem__", _wrap_DftDataVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"DftDataVector___setitem__", _wrap_DftDataVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"DftDataVector_pop", _wrap_DftDataVector_pop, METH_VARARGS, NULL},
	 { (char *)"DftDataVector_append", _wrap_DftDataVector_append, METH_VARARGS, NULL},
	 { (char *)"DftDataVector_empty", _wrap_DftDataVector_empty, METH_VARARGS, NULL},
	 { (char *)"DftDataVector_size", _wrap_DftDataVector_size, METH_VARARGS, NULL},
	 { (char *)"DftDataVector_swap", _wrap_DftDataVector_swap, METH_VARARGS, NULL},
	 { (char *)"DftDataVector_begin", _wrap_DftDataVector_begin, METH_VARARGS, NULL},
	 { (char *)"DftDataVector_end", _wrap_DftDataVector_end, METH_VARARGS, NULL},
	 { (char *)"DftDataVector_rbegin", _wrap_DftDataVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"DftDataVector_rend", _wrap_DftDataVector_rend, METH_VARARGS, NULL},
	 { (char *)"DftDataVector_clear", _wrap_DftDataVector_clear, METH_VARARGS, NULL},
	 { (char *)"DftDataVector_get_allocator", _wrap_DftDataVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"DftDataVector_pop_back", _wrap_DftDataVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"DftDataVector_erase", _wrap_DftDataVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_DftDataVector", _wrap_new_DftDataVector, METH_VARARGS, NULL},
	 { (char *)"DftDataVector_push_back", _wrap_DftDataVector_push_back, METH_VARARGS, NULL},
	 { (char *)"DftDataVector_front", _wrap_DftDataVector_front, METH_VARARGS, NULL},
	 { (char *)"DftDataVector_back", _wrap_DftDataVector_back, METH_VARARGS, NULL},
	 { (char *)"DftDataVector_assign", _wrap_DftDataVector_assign, METH_VARARGS, NULL},
	 { (char *)"DftDataVector_insert", _wrap_DftDataVector_insert, METH_VARARGS, NULL},
	 { (char *)"DftDataVector_reserve", _wrap_DftDataVector_reserve, METH_VARARGS, NULL},
	 { (char *)"DftDataVector_capacity", _wrap_DftDataVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_DftDataVector", _wrap_delete_DftDataVector, METH_VARARGS, NULL},
	 { (char *)"DftDataVector_swigregister", DftDataVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"VolumeVector_iterator", _wrap_VolumeVector_iterator, METH_VARARGS, NULL},
	 { (char *)"VolumeVector___nonzero__", _wrap_VolumeVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"VolumeVector___bool__", _wrap_VolumeVector___bool__, METH_VARARGS, NULL},
	 { (char *)"VolumeVector___len__", _wrap_VolumeVector___len__, METH_VARARGS, NULL},
	 { (char *)"VolumeVector___getslice__", _wrap_VolumeVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"VolumeVector___setslice__", _wrap_VolumeVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"VolumeVector___delslice__", _wrap_VolumeVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"VolumeVector___delitem__", _wrap_VolumeVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"VolumeVector___getitem__", _wrap_VolumeVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"VolumeVector___setitem__", _wrap_VolumeVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"VolumeVector_pop", _wrap_VolumeVector_pop, METH_VARARGS, NULL},
	 { (char *)"VolumeVector_append", _wrap_VolumeVector_append, METH_VARARGS, NULL},
	 { (char *)"VolumeVector_empty", _wrap_VolumeVector_empty, METH_VARARGS, NULL},
	 { (char *)"VolumeVector_size", _wrap_VolumeVector_size, METH_VARARGS, NULL},
	 { (char *)"VolumeVector_swap", _wrap_VolumeVector_swap, METH_VARARGS, NULL},
	 { (char *)"VolumeVector_begin", _wrap_VolumeVector_begin, METH_VARARGS, NULL},
	 { (char *)"VolumeVector_end", _wrap_VolumeVector_end, METH_VARARGS, NULL},
	 { (char *)"VolumeVector_rbegin", _wrap_VolumeVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"VolumeVector_rend", _wrap_VolumeVector_rend, METH_VARARGS, NULL},
	 { (char *)"VolumeVector_clear", _wrap_VolumeVector_clear, METH_VARARGS, NULL},
	 { (char *)"VolumeVector_get_allocator", _wrap_VolumeVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"VolumeVector_pop_back", _wrap_VolumeVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"VolumeVector_erase", _wrap_VolumeVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_VolumeVector", _wrap_new_VolumeVector, METH_VARARGS, NULL},
	 { (char *)"VolumeVector_push_back", _wrap_VolumeVector_push_back, METH_VARARGS, NULL},
	 { (char *)"VolumeVector_front", _wrap_VolumeVector_front, METH_VARARGS, NULL},
	 { (char *)"VolumeVector_back", _wrap_VolumeVector_back, METH_VARARGS, NULL},
	 { (char *)"VolumeVector_assign", _wrap_VolumeVector_assign, METH_VARARGS, NULL},
	 { (char *)"VolumeVector_insert", _wrap_VolumeVector_insert, METH_VARARGS, NULL},
	 { (char *)"VolumeVector_reserve", _wrap_VolumeVector_reserve, METH_VARARGS, NULL},
	 { (char *)"VolumeVector_capacity", _wrap_VolumeVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_VolumeVector", _wrap_delete_VolumeVector, METH_VARARGS, NULL},
	 { (char *)"VolumeVector_swigregister", VolumeVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"IntVector_iterator", _wrap_IntVector_iterator, METH_VARARGS, NULL},
	 { (char *)"IntVector___nonzero__", _wrap_IntVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"IntVector___bool__", _wrap_IntVector___bool__, METH_VARARGS, NULL},
	 { (char *)"IntVector___len__", _wrap_IntVector___len__, METH_VARARGS, NULL},
	 { (char *)"IntVector___getslice__", _wrap_IntVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"IntVector___setslice__", _wrap_IntVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"IntVector___delslice__", _wrap_IntVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"IntVector___delitem__", _wrap_IntVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"IntVector___getitem__", _wrap_IntVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"IntVector___setitem__", _wrap_IntVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"IntVector_pop", _wrap_IntVector_pop, METH_VARARGS, NULL},
	 { (char *)"IntVector_append", _wrap_IntVector_append, METH_VARARGS, NULL},
	 { (char *)"IntVector_empty", _wrap_IntVector_empty, METH_VARARGS, NULL},
	 { (char *)"IntVector_size", _wrap_IntVector_size, METH_VARARGS, NULL},
	 { (char *)"IntVector_swap", _wrap_IntVector_swap, METH_VARARGS, NULL},
	 { (char *)"IntVector_begin", _wrap_IntVector_begin, METH_VARARGS, NULL},
	 { (char *)"IntVector_end", _wrap_IntVector_end, METH_VARARGS, NULL},
	 { (char *)"IntVector_rbegin", _wrap_IntVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"IntVector_rend", _wrap_IntVector_rend, METH_VARARGS, NULL},
	 { (char *)"IntVector_clear", _wrap_IntVector_clear, METH_VARARGS, NULL},
	 { (char *)"IntVector_get_allocator", _wrap_IntVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"IntVector_pop_back", _wrap_IntVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"IntVector_erase", _wrap_IntVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_IntVector", _wrap_new_IntVector, METH_VARARGS, NULL},
	 { (char *)"IntVector_push_back", _wrap_IntVector_push_back, METH_VARARGS, NULL},
	 { (char *)"IntVector_front", _wrap_IntVector_front, METH_VARARGS, NULL},
	 { (char *)"IntVector_back", _wrap_IntVector_back, METH_VARARGS, NULL},
	 { (char *)"IntVector_assign", _wrap_IntVector_assign, METH_VARARGS, NULL},
	 { (char *)"IntVector_resize", _wrap_IntVector_resize, METH_VARARGS, NULL},
	 { (char *)"IntVector_insert", _wrap_IntVector_insert, METH_VARARGS, NULL},
	 { (char *)"IntVector_reserve", _wrap_IntVector_reserve, METH_VARARGS, NULL},
	 { (char *)"IntVector_capacity", _wrap_IntVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_IntVector", _wrap_delete_IntVector, METH_VARARGS, NULL},
	 { (char *)"IntVector_swigregister", IntVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_iterator", _wrap_DoubleVector_iterator, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___nonzero__", _wrap_DoubleVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___bool__", _wrap_DoubleVector___bool__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___len__", _wrap_DoubleVector___len__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___getslice__", _wrap_DoubleVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___setslice__", _wrap_DoubleVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___delslice__", _wrap_DoubleVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___delitem__", _wrap_DoubleVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___getitem__", _wrap_DoubleVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___setitem__", _wrap_DoubleVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_pop", _wrap_DoubleVector_pop, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_append", _wrap_DoubleVector_append, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_empty", _wrap_DoubleVector_empty, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_size", _wrap_DoubleVector_size, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_swap", _wrap_DoubleVector_swap, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_begin", _wrap_DoubleVector_begin, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_end", _wrap_DoubleVector_end, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_rbegin", _wrap_DoubleVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_rend", _wrap_DoubleVector_rend, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_clear", _wrap_DoubleVector_clear, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_get_allocator", _wrap_DoubleVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_pop_back", _wrap_DoubleVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_erase", _wrap_DoubleVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_DoubleVector", _wrap_new_DoubleVector, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_push_back", _wrap_DoubleVector_push_back, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_front", _wrap_DoubleVector_front, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_back", _wrap_DoubleVector_back, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_assign", _wrap_DoubleVector_assign, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_resize", _wrap_DoubleVector_resize, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_insert", _wrap_DoubleVector_insert, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_reserve", _wrap_DoubleVector_reserve, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_capacity", _wrap_DoubleVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_DoubleVector", _wrap_delete_DoubleVector, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_swigregister", DoubleVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_signed_direction", _wrap_new_signed_direction, METH_VARARGS, NULL},
	 { (char *)"signed_direction___mul__", _wrap_signed_direction___mul__, METH_VARARGS, NULL},
	 { (char *)"signed_direction___eq__", _wrap_signed_direction___eq__, METH_VARARGS, NULL},
	 { (char *)"signed_direction___ne__", _wrap_signed_direction___ne__, METH_VARARGS, NULL},
	 { (char *)"signed_direction_d_set", _wrap_signed_direction_d_set, METH_VARARGS, NULL},
	 { (char *)"signed_direction_d_get", _wrap_signed_direction_d_get, METH_VARARGS, NULL},
	 { (char *)"signed_direction_flipped_set", _wrap_signed_direction_flipped_set, METH_VARARGS, NULL},
	 { (char *)"signed_direction_flipped_get", _wrap_signed_direction_flipped_get, METH_VARARGS, NULL},
	 { (char *)"signed_direction_phase_set", _wrap_signed_direction_phase_set, METH_VARARGS, NULL},
	 { (char *)"signed_direction_phase_get", _wrap_signed_direction_phase_get, METH_VARARGS, NULL},
	 { (char *)"delete_signed_direction", _wrap_delete_signed_direction, METH_VARARGS, NULL},
	 { (char *)"signed_direction_swigregister", signed_direction_swigregister, METH_VARARGS, NULL},
	 { (char *)"number_of_directions", _wrap_number_of_directions, METH_VARARGS, NULL},
	 { (char *)"start_at_direction", _wrap_start_at_direction, METH_VARARGS, NULL},
	 { (char *)"stop_at_direction", _wrap_stop_at_direction, METH_VARARGS, NULL},
	 { (char *)"first_field_component", _wrap_first_field_component, METH_VARARGS, NULL},
	 { (char *)"flip", _wrap_flip, METH_VARARGS, NULL},
	 { (char *)"has_direction", _wrap_has_direction, METH_VARARGS, NULL},
	 { (char *)"has_field_direction", _wrap_has_field_direction, METH_VARARGS, NULL},
	 { (char *)"is_tm", _wrap_is_tm, METH_VARARGS, NULL},
	 { (char *)"abort", _wrap_abort, METH_VARARGS, NULL},
	 { (char *)"is_electric", _wrap_is_electric, METH_VARARGS, NULL},
	 { (char *)"is_magnetic", _wrap_is_magnetic, METH_VARARGS, NULL},
	 { (char *)"is_D", _wrap_is_D, METH_VARARGS, NULL},
	 { (char *)"is_B", _wrap_is_B, METH_VARARGS, NULL},
	 { (char *)"is_derived", _wrap_is_derived, METH_VARARGS, NULL},
	 { (char *)"is_poynting", _wrap_is_poynting, METH_VARARGS, NULL},
	 { (char *)"is_energydensity", _wrap_is_energydensity, METH_VARARGS, NULL},
	 { (char *)"meep_type", _wrap_meep_type, METH_VARARGS, NULL},
	 { (char *)"component_name", _wrap_component_name, METH_VARARGS, NULL},
	 { (char *)"direction_name", _wrap_direction_name, METH_VARARGS, NULL},
	 { (char *)"dimension_name", _wrap_dimension_name, METH_VARARGS, NULL},
	 { (char *)"component_index", _wrap_component_index, METH_VARARGS, NULL},
	 { (char *)"component_direction", _wrap_component_direction, METH_VARARGS, NULL},
	 { (char *)"direction_component", _wrap_direction_component, METH_VARARGS, NULL},
	 { (char *)"field_type_component", _wrap_field_type_component, METH_VARARGS, NULL},
	 { (char *)"coordinate_mismatch", _wrap_coordinate_mismatch, METH_VARARGS, NULL},
	 { (char *)"cycle_direction", _wrap_cycle_direction, METH_VARARGS, NULL},
	 { (char *)"cycle_component", _wrap_cycle_component, METH_VARARGS, NULL},
	 { (char *)"veccyl", _wrap_veccyl, METH_VARARGS, NULL},
	 { (char *)"zero_vec", _wrap_zero_vec, METH_VARARGS, NULL},
	 { (char *)"new_vec_from_dim", _wrap_new_vec_from_dim, METH_VARARGS, NULL},
	 { (char *)"new_vec", _wrap_new_vec, METH_VARARGS, NULL},
	 { (char *)"delete_vec", _wrap_delete_vec, METH_VARARGS, NULL},
	 { (char *)"vec___add__", _wrap_vec___add__, METH_VARARGS, NULL},
	 { (char *)"vec___iadd__", _wrap_vec___iadd__, METH_VARARGS, NULL},
	 { (char *)"vec___sub__", _wrap_vec___sub__, METH_VARARGS, NULL},
	 { (char *)"vec___neg__", _wrap_vec___neg__, METH_VARARGS, NULL},
	 { (char *)"vec___isub__", _wrap_vec___isub__, METH_VARARGS, NULL},
	 { (char *)"vec___ne__", _wrap_vec___ne__, METH_VARARGS, NULL},
	 { (char *)"vec___eq__", _wrap_vec___eq__, METH_VARARGS, NULL},
	 { (char *)"vec_round_float", _wrap_vec_round_float, METH_VARARGS, NULL},
	 { (char *)"vec___mul__", _wrap_vec___mul__, METH_VARARGS, NULL},
	 { (char *)"vec___truediv__", _wrap_vec___truediv__, METH_VARARGS, NULL},
	 { (char *)"vec___and__", _wrap_vec___and__, METH_VARARGS, NULL},
	 { (char *)"vec_dim_set", _wrap_vec_dim_set, METH_VARARGS, NULL},
	 { (char *)"vec_dim_get", _wrap_vec_dim_get, METH_VARARGS, NULL},
	 { (char *)"vec_r", _wrap_vec_r, METH_VARARGS, NULL},
	 { (char *)"vec_x", _wrap_vec_x, METH_VARARGS, NULL},
	 { (char *)"vec_y", _wrap_vec_y, METH_VARARGS, NULL},
	 { (char *)"vec_z", _wrap_vec_z, METH_VARARGS, NULL},
	 { (char *)"vec_in_direction", _wrap_vec_in_direction, METH_VARARGS, NULL},
	 { (char *)"vec_set_direction", _wrap_vec_set_direction, METH_VARARGS, NULL},
	 { (char *)"vec_project_to_boundary", _wrap_vec_project_to_boundary, METH_VARARGS, NULL},
	 { (char *)"vec_swigregister", vec_swigregister, METH_VARARGS, NULL},
	 { (char *)"vec_abs", _wrap_vec_abs, METH_VARARGS, NULL},
	 { (char *)"one_vec", _wrap_one_vec, METH_VARARGS, NULL},
	 { (char *)"unit_vec", _wrap_unit_vec, METH_VARARGS, NULL},
	 { (char *)"clean_vec", _wrap_clean_vec, METH_VARARGS, NULL},
	 { (char *)"iveccyl", _wrap_iveccyl, METH_VARARGS, NULL},
	 { (char *)"zero_ivec", _wrap_zero_ivec, METH_VARARGS, NULL},
	 { (char *)"one_ivec", _wrap_one_ivec, METH_VARARGS, NULL},
	 { (char *)"new_ivec", _wrap_new_ivec, METH_VARARGS, NULL},
	 { (char *)"delete_ivec", _wrap_delete_ivec, METH_VARARGS, NULL},
	 { (char *)"ivec_yucky_val", _wrap_ivec_yucky_val, METH_VARARGS, NULL},
	 { (char *)"ivec___add__", _wrap_ivec___add__, METH_VARARGS, NULL},
	 { (char *)"ivec___iadd__", _wrap_ivec___iadd__, METH_VARARGS, NULL},
	 { (char *)"ivec___sub__", _wrap_ivec___sub__, METH_VARARGS, NULL},
	 { (char *)"ivec___neg__", _wrap_ivec___neg__, METH_VARARGS, NULL},
	 { (char *)"ivec___isub__", _wrap_ivec___isub__, METH_VARARGS, NULL},
	 { (char *)"ivec___ne__", _wrap_ivec___ne__, METH_VARARGS, NULL},
	 { (char *)"ivec___eq__", _wrap_ivec___eq__, METH_VARARGS, NULL},
	 { (char *)"ivec___le__", _wrap_ivec___le__, METH_VARARGS, NULL},
	 { (char *)"ivec___ge__", _wrap_ivec___ge__, METH_VARARGS, NULL},
	 { (char *)"ivec___lt__", _wrap_ivec___lt__, METH_VARARGS, NULL},
	 { (char *)"ivec___gt__", _wrap_ivec___gt__, METH_VARARGS, NULL},
	 { (char *)"ivec___mul__", _wrap_ivec___mul__, METH_VARARGS, NULL},
	 { (char *)"ivec_dim_set", _wrap_ivec_dim_set, METH_VARARGS, NULL},
	 { (char *)"ivec_dim_get", _wrap_ivec_dim_get, METH_VARARGS, NULL},
	 { (char *)"ivec_r", _wrap_ivec_r, METH_VARARGS, NULL},
	 { (char *)"ivec_x", _wrap_ivec_x, METH_VARARGS, NULL},
	 { (char *)"ivec_y", _wrap_ivec_y, METH_VARARGS, NULL},
	 { (char *)"ivec_z", _wrap_ivec_z, METH_VARARGS, NULL},
	 { (char *)"ivec_in_direction", _wrap_ivec_in_direction, METH_VARARGS, NULL},
	 { (char *)"ivec_set_direction", _wrap_ivec_set_direction, METH_VARARGS, NULL},
	 { (char *)"ivec_round_up_to_even", _wrap_ivec_round_up_to_even, METH_VARARGS, NULL},
	 { (char *)"ivec_swigregister", ivec_swigregister, METH_VARARGS, NULL},
	 { (char *)"unit_ivec", _wrap_unit_ivec, METH_VARARGS, NULL},
	 { (char *)"vec_max", _wrap_vec_max, METH_VARARGS, NULL},
	 { (char *)"vec_min", _wrap_vec_min, METH_VARARGS, NULL},
	 { (char *)"volume_dim_set", _wrap_volume_dim_set, METH_VARARGS, NULL},
	 { (char *)"volume_dim_get", _wrap_volume_dim_get, METH_VARARGS, NULL},
	 { (char *)"new_volume", _wrap_new_volume, METH_VARARGS, NULL},
	 { (char *)"volume_set_direction_min", _wrap_volume_set_direction_min, METH_VARARGS, NULL},
	 { (char *)"volume_set_direction_max", _wrap_volume_set_direction_max, METH_VARARGS, NULL},
	 { (char *)"volume_in_direction_min", _wrap_volume_in_direction_min, METH_VARARGS, NULL},
	 { (char *)"volume_in_direction_max", _wrap_volume_in_direction_max, METH_VARARGS, NULL},
	 { (char *)"volume_in_direction", _wrap_volume_in_direction, METH_VARARGS, NULL},
	 { (char *)"volume_computational_volume", _wrap_volume_computational_volume, METH_VARARGS, NULL},
	 { (char *)"volume_integral_volume", _wrap_volume_integral_volume, METH_VARARGS, NULL},
	 { (char *)"volume_full_volume", _wrap_volume_full_volume, METH_VARARGS, NULL},
	 { (char *)"volume_center", _wrap_volume_center, METH_VARARGS, NULL},
	 { (char *)"volume_diameter", _wrap_volume_diameter, METH_VARARGS, NULL},
	 { (char *)"volume_contains", _wrap_volume_contains, METH_VARARGS, NULL},
	 { (char *)"volume_intersect_with", _wrap_volume_intersect_with, METH_VARARGS, NULL},
	 { (char *)"volume___and__", _wrap_volume___and__, METH_VARARGS, NULL},
	 { (char *)"volume___or__", _wrap_volume___or__, METH_VARARGS, NULL},
	 { (char *)"volume___add__", _wrap_volume___add__, METH_VARARGS, NULL},
	 { (char *)"volume___iadd__", _wrap_volume___iadd__, METH_VARARGS, NULL},
	 { (char *)"volume___sub__", _wrap_volume___sub__, METH_VARARGS, NULL},
	 { (char *)"volume___isub__", _wrap_volume___isub__, METH_VARARGS, NULL},
	 { (char *)"volume___eq__", _wrap_volume___eq__, METH_VARARGS, NULL},
	 { (char *)"volume___ne__", _wrap_volume___ne__, METH_VARARGS, NULL},
	 { (char *)"volume_round_float", _wrap_volume_round_float, METH_VARARGS, NULL},
	 { (char *)"volume_intersects", _wrap_volume_intersects, METH_VARARGS, NULL},
	 { (char *)"volume___contains__", _wrap_volume___contains__, METH_VARARGS, NULL},
	 { (char *)"volume_get_min_corner", _wrap_volume_get_min_corner, METH_VARARGS, NULL},
	 { (char *)"volume_get_max_corner", _wrap_volume_get_max_corner, METH_VARARGS, NULL},
	 { (char *)"volume_normal_direction", _wrap_volume_normal_direction, METH_VARARGS, NULL},
	 { (char *)"delete_volume", _wrap_delete_volume, METH_VARARGS, NULL},
	 { (char *)"volume_swigregister", volume_swigregister, METH_VARARGS, NULL},
	 { (char *)"volcyl", _wrap_volcyl, METH_VARARGS, NULL},
	 { (char *)"volone", _wrap_volone, METH_VARARGS, NULL},
	 { (char *)"vol1d", _wrap_vol1d, METH_VARARGS, NULL},
	 { (char *)"voltwo", _wrap_voltwo, METH_VARARGS, NULL},
	 { (char *)"vol2d", _wrap_vol2d, METH_VARARGS, NULL},
	 { (char *)"vol3d", _wrap_vol3d, METH_VARARGS, NULL},
	 { (char *)"new_grid_volume", _wrap_new_grid_volume, METH_VARARGS, NULL},
	 { (char *)"grid_volume_dim_set", _wrap_grid_volume_dim_set, METH_VARARGS, NULL},
	 { (char *)"grid_volume_dim_get", _wrap_grid_volume_dim_get, METH_VARARGS, NULL},
	 { (char *)"grid_volume_a_set", _wrap_grid_volume_a_set, METH_VARARGS, NULL},
	 { (char *)"grid_volume_a_get", _wrap_grid_volume_a_get, METH_VARARGS, NULL},
	 { (char *)"grid_volume_inva_set", _wrap_grid_volume_inva_set, METH_VARARGS, NULL},
	 { (char *)"grid_volume_inva_get", _wrap_grid_volume_inva_get, METH_VARARGS, NULL},
	 { (char *)"grid_volume_print_grid_volume", _wrap_grid_volume_print_grid_volume, METH_VARARGS, NULL},
	 { (char *)"grid_volume_stride", _wrap_grid_volume_stride, METH_VARARGS, NULL},
	 { (char *)"grid_volume_num_direction", _wrap_grid_volume_num_direction, METH_VARARGS, NULL},
	 { (char *)"grid_volume_yucky_num", _wrap_grid_volume_yucky_num, METH_VARARGS, NULL},
	 { (char *)"grid_volume_yucky_direction", _wrap_grid_volume_yucky_direction, METH_VARARGS, NULL},
	 { (char *)"grid_volume_set_num_direction", _wrap_grid_volume_set_num_direction, METH_VARARGS, NULL},
	 { (char *)"grid_volume_nr", _wrap_grid_volume_nr, METH_VARARGS, NULL},
	 { (char *)"grid_volume_nx", _wrap_grid_volume_nx, METH_VARARGS, NULL},
	 { (char *)"grid_volume_ny", _wrap_grid_volume_ny, METH_VARARGS, NULL},
	 { (char *)"grid_volume_nz", _wrap_grid_volume_nz, METH_VARARGS, NULL},
	 { (char *)"grid_volume_has_field", _wrap_grid_volume_has_field, METH_VARARGS, NULL},
	 { (char *)"grid_volume_has_boundary", _wrap_grid_volume_has_boundary, METH_VARARGS, NULL},
	 { (char *)"grid_volume_dr", _wrap_grid_volume_dr, METH_VARARGS, NULL},
	 { (char *)"grid_volume_dx", _wrap_grid_volume_dx, METH_VARARGS, NULL},
	 { (char *)"grid_volume_dy", _wrap_grid_volume_dy, METH_VARARGS, NULL},
	 { (char *)"grid_volume_dz", _wrap_grid_volume_dz, METH_VARARGS, NULL},
	 { (char *)"grid_volume_ntot", _wrap_grid_volume_ntot, METH_VARARGS, NULL},
	 { (char *)"grid_volume_nowned_min", _wrap_grid_volume_nowned_min, METH_VARARGS, NULL},
	 { (char *)"grid_volume_nowned", _wrap_grid_volume_nowned, METH_VARARGS, NULL},
	 { (char *)"grid_volume___getitem__", _wrap_grid_volume___getitem__, METH_VARARGS, NULL},
	 { (char *)"grid_volume_index", _wrap_grid_volume_index, METH_VARARGS, NULL},
	 { (char *)"grid_volume_round_vec", _wrap_grid_volume_round_vec, METH_VARARGS, NULL},
	 { (char *)"grid_volume_interpolate", _wrap_grid_volume_interpolate, METH_VARARGS, NULL},
	 { (char *)"grid_volume_dV", _wrap_grid_volume_dV, METH_VARARGS, NULL},
	 { (char *)"grid_volume_intersect_with", _wrap_grid_volume_intersect_with, METH_VARARGS, NULL},
	 { (char *)"grid_volume_rmin", _wrap_grid_volume_rmin, METH_VARARGS, NULL},
	 { (char *)"grid_volume_rmax", _wrap_grid_volume_rmax, METH_VARARGS, NULL},
	 { (char *)"grid_volume_xmin", _wrap_grid_volume_xmin, METH_VARARGS, NULL},
	 { (char *)"grid_volume_xmax", _wrap_grid_volume_xmax, METH_VARARGS, NULL},
	 { (char *)"grid_volume_ymin", _wrap_grid_volume_ymin, METH_VARARGS, NULL},
	 { (char *)"grid_volume_ymax", _wrap_grid_volume_ymax, METH_VARARGS, NULL},
	 { (char *)"grid_volume_zmin", _wrap_grid_volume_zmin, METH_VARARGS, NULL},
	 { (char *)"grid_volume_zmax", _wrap_grid_volume_zmax, METH_VARARGS, NULL},
	 { (char *)"grid_volume_center", _wrap_grid_volume_center, METH_VARARGS, NULL},
	 { (char *)"grid_volume_icenter", _wrap_grid_volume_icenter, METH_VARARGS, NULL},
	 { (char *)"grid_volume_loc", _wrap_grid_volume_loc, METH_VARARGS, NULL},
	 { (char *)"grid_volume_loc_at_resolution", _wrap_grid_volume_loc_at_resolution, METH_VARARGS, NULL},
	 { (char *)"grid_volume_ntot_at_resolution", _wrap_grid_volume_ntot_at_resolution, METH_VARARGS, NULL},
	 { (char *)"grid_volume_iloc", _wrap_grid_volume_iloc, METH_VARARGS, NULL},
	 { (char *)"grid_volume_yee_index", _wrap_grid_volume_yee_index, METH_VARARGS, NULL},
	 { (char *)"grid_volume_yee_shift", _wrap_grid_volume_yee_shift, METH_VARARGS, NULL},
	 { (char *)"grid_volume_eps_component", _wrap_grid_volume_eps_component, METH_VARARGS, NULL},
	 { (char *)"grid_volume_yee2cent_offsets", _wrap_grid_volume_yee2cent_offsets, METH_VARARGS, NULL},
	 { (char *)"grid_volume_cent2yee_offsets", _wrap_grid_volume_cent2yee_offsets, METH_VARARGS, NULL},
	 { (char *)"grid_volume_boundary_location", _wrap_grid_volume_boundary_location, METH_VARARGS, NULL},
	 { (char *)"grid_volume_big_corner", _wrap_grid_volume_big_corner, METH_VARARGS, NULL},
	 { (char *)"grid_volume_little_corner", _wrap_grid_volume_little_corner, METH_VARARGS, NULL},
	 { (char *)"grid_volume_corner", _wrap_grid_volume_corner, METH_VARARGS, NULL},
	 { (char *)"grid_volume_contains", _wrap_grid_volume_contains, METH_VARARGS, NULL},
	 { (char *)"grid_volume_little_owned_corner0", _wrap_grid_volume_little_owned_corner0, METH_VARARGS, NULL},
	 { (char *)"grid_volume_little_owned_corner", _wrap_grid_volume_little_owned_corner, METH_VARARGS, NULL},
	 { (char *)"grid_volume_owns", _wrap_grid_volume_owns, METH_VARARGS, NULL},
	 { (char *)"grid_volume_surroundings", _wrap_grid_volume_surroundings, METH_VARARGS, NULL},
	 { (char *)"grid_volume_interior", _wrap_grid_volume_interior, METH_VARARGS, NULL},
	 { (char *)"grid_volume_get_boundary_icorners", _wrap_grid_volume_get_boundary_icorners, METH_VARARGS, NULL},
	 { (char *)"grid_volume_split", _wrap_grid_volume_split, METH_VARARGS, NULL},
	 { (char *)"grid_volume_split_by_effort", _wrap_grid_volume_split_by_effort, METH_VARARGS, NULL},
	 { (char *)"grid_volume_split_at_fraction", _wrap_grid_volume_split_at_fraction, METH_VARARGS, NULL},
	 { (char *)"grid_volume_halve", _wrap_grid_volume_halve, METH_VARARGS, NULL},
	 { (char *)"grid_volume_pad_self", _wrap_grid_volume_pad_self, METH_VARARGS, NULL},
	 { (char *)"grid_volume_pad", _wrap_grid_volume_pad, METH_VARARGS, NULL},
	 { (char *)"grid_volume_iyee_shift", _wrap_grid_volume_iyee_shift, METH_VARARGS, NULL},
	 { (char *)"grid_volume_get_origin", _wrap_grid_volume_get_origin, METH_VARARGS, NULL},
	 { (char *)"grid_volume_shift_origin", _wrap_grid_volume_shift_origin, METH_VARARGS, NULL},
	 { (char *)"grid_volume_set_origin", _wrap_grid_volume_set_origin, METH_VARARGS, NULL},
	 { (char *)"grid_volume_center_origin", _wrap_grid_volume_center_origin, METH_VARARGS, NULL},
	 { (char *)"grid_volume_origin_in_direction", _wrap_grid_volume_origin_in_direction, METH_VARARGS, NULL},
	 { (char *)"grid_volume_iorigin_in_direction", _wrap_grid_volume_iorigin_in_direction, METH_VARARGS, NULL},
	 { (char *)"grid_volume_origin_r", _wrap_grid_volume_origin_r, METH_VARARGS, NULL},
	 { (char *)"grid_volume_origin_x", _wrap_grid_volume_origin_x, METH_VARARGS, NULL},
	 { (char *)"grid_volume_origin_y", _wrap_grid_volume_origin_y, METH_VARARGS, NULL},
	 { (char *)"grid_volume_origin_z", _wrap_grid_volume_origin_z, METH_VARARGS, NULL},
	 { (char *)"delete_grid_volume", _wrap_delete_grid_volume, METH_VARARGS, NULL},
	 { (char *)"grid_volume_swigregister", grid_volume_swigregister, METH_VARARGS, NULL},
	 { (char *)"identity", _wrap_identity, METH_VARARGS, NULL},
	 { (char *)"rotate4", _wrap_rotate4, METH_VARARGS, NULL},
	 { (char *)"rotate2", _wrap_rotate2, METH_VARARGS, NULL},
	 { (char *)"mirror", _wrap_mirror, METH_VARARGS, NULL},
	 { (char *)"r_to_minus_r_symmetry", _wrap_r_to_minus_r_symmetry, METH_VARARGS, NULL},
	 { (char *)"new_symmetry", _wrap_new_symmetry, METH_VARARGS, NULL},
	 { (char *)"delete_symmetry", _wrap_delete_symmetry, METH_VARARGS, NULL},
	 { (char *)"symmetry_transform_unshifted", _wrap_symmetry_transform_unshifted, METH_VARARGS, NULL},
	 { (char *)"symmetry_transform", _wrap_symmetry_transform, METH_VARARGS, NULL},
	 { (char *)"symmetry_phase_shift", _wrap_symmetry_phase_shift, METH_VARARGS, NULL},
	 { (char *)"symmetry_multiplicity", _wrap_symmetry_multiplicity, METH_VARARGS, NULL},
	 { (char *)"symmetry_is_primitive", _wrap_symmetry_is_primitive, METH_VARARGS, NULL},
	 { (char *)"symmetry_symmetry_reduce", _wrap_symmetry_symmetry_reduce, METH_VARARGS, NULL},
	 { (char *)"symmetry___add__", _wrap_symmetry___add__, METH_VARARGS, NULL},
	 { (char *)"symmetry___mul__", _wrap_symmetry___mul__, METH_VARARGS, NULL},
	 { (char *)"symmetry___sub__", _wrap_symmetry___sub__, METH_VARARGS, NULL},
	 { (char *)"symmetry___neg__", _wrap_symmetry___neg__, METH_VARARGS, NULL},
	 { (char *)"symmetry_symmetry_assign", _wrap_symmetry_symmetry_assign, METH_VARARGS, NULL},
	 { (char *)"symmetry___eq__", _wrap_symmetry___eq__, METH_VARARGS, NULL},
	 { (char *)"symmetry___ne__", _wrap_symmetry___ne__, METH_VARARGS, NULL},
	 { (char *)"symmetry_swigregister", symmetry_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_volume_list", _wrap_delete_volume_list, METH_VARARGS, NULL},
	 { (char *)"new_volume_list", _wrap_new_volume_list, METH_VARARGS, NULL},
	 { (char *)"volume_list_v_set", _wrap_volume_list_v_set, METH_VARARGS, NULL},
	 { (char *)"volume_list_v_get", _wrap_volume_list_v_get, METH_VARARGS, NULL},
	 { (char *)"volume_list_c_set", _wrap_volume_list_c_set, METH_VARARGS, NULL},
	 { (char *)"volume_list_c_get", _wrap_volume_list_c_get, METH_VARARGS, NULL},
	 { (char *)"volume_list_weight_set", _wrap_volume_list_weight_set, METH_VARARGS, NULL},
	 { (char *)"volume_list_weight_get", _wrap_volume_list_weight_get, METH_VARARGS, NULL},
	 { (char *)"volume_list_next_set", _wrap_volume_list_next_set, METH_VARARGS, NULL},
	 { (char *)"volume_list_next_get", _wrap_volume_list_next_get, METH_VARARGS, NULL},
	 { (char *)"volume_list_swigregister", volume_list_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_susceptibility", _wrap_new_susceptibility, METH_VARARGS, NULL},
	 { (char *)"susceptibility_clone", _wrap_susceptibility_clone, METH_VARARGS, NULL},
	 { (char *)"delete_susceptibility", _wrap_delete_susceptibility, METH_VARARGS, NULL},
	 { (char *)"susceptibility_get_id", _wrap_susceptibility_get_id, METH_VARARGS, NULL},
	 { (char *)"susceptibility___eq__", _wrap_susceptibility___eq__, METH_VARARGS, NULL},
	 { (char *)"susceptibility_update_P", _wrap_susceptibility_update_P, METH_VARARGS, NULL},
	 { (char *)"susceptibility_subtract_P", _wrap_susceptibility_subtract_P, METH_VARARGS, NULL},
	 { (char *)"susceptibility_needs_P", _wrap_susceptibility_needs_P, METH_VARARGS, NULL},
	 { (char *)"susceptibility_needs_W_notowned", _wrap_susceptibility_needs_W_notowned, METH_VARARGS, NULL},
	 { (char *)"susceptibility_needs_W_prev", _wrap_susceptibility_needs_W_prev, METH_VARARGS, NULL},
	 { (char *)"susceptibility_new_internal_data", _wrap_susceptibility_new_internal_data, METH_VARARGS, NULL},
	 { (char *)"susceptibility_delete_internal_data", _wrap_susceptibility_delete_internal_data, METH_VARARGS, NULL},
	 { (char *)"susceptibility_init_internal_data", _wrap_susceptibility_init_internal_data, METH_VARARGS, NULL},
	 { (char *)"susceptibility_copy_internal_data", _wrap_susceptibility_copy_internal_data, METH_VARARGS, NULL},
	 { (char *)"susceptibility_num_internal_notowned_needed", _wrap_susceptibility_num_internal_notowned_needed, METH_VARARGS, NULL},
	 { (char *)"susceptibility_internal_notowned_ptr", _wrap_susceptibility_internal_notowned_ptr, METH_VARARGS, NULL},
	 { (char *)"susceptibility_num_cinternal_notowned_needed", _wrap_susceptibility_num_cinternal_notowned_needed, METH_VARARGS, NULL},
	 { (char *)"susceptibility_cinternal_notowned_ptr", _wrap_susceptibility_cinternal_notowned_ptr, METH_VARARGS, NULL},
	 { (char *)"susceptibility_next_set", _wrap_susceptibility_next_set, METH_VARARGS, NULL},
	 { (char *)"susceptibility_next_get", _wrap_susceptibility_next_get, METH_VARARGS, NULL},
	 { (char *)"susceptibility_ntot_set", _wrap_susceptibility_ntot_set, METH_VARARGS, NULL},
	 { (char *)"susceptibility_ntot_get", _wrap_susceptibility_ntot_get, METH_VARARGS, NULL},
	 { (char *)"susceptibility_sigma_set", _wrap_susceptibility_sigma_set, METH_VARARGS, NULL},
	 { (char *)"susceptibility_sigma_get", _wrap_susceptibility_sigma_get, METH_VARARGS, NULL},
	 { (char *)"susceptibility_trivial_sigma_set", _wrap_susceptibility_trivial_sigma_set, METH_VARARGS, NULL},
	 { (char *)"susceptibility_trivial_sigma_get", _wrap_susceptibility_trivial_sigma_get, METH_VARARGS, NULL},
	 { (char *)"susceptibility_swigregister", susceptibility_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_lorentzian_susceptibility", _wrap_new_lorentzian_susceptibility, METH_VARARGS, NULL},
	 { (char *)"lorentzian_susceptibility_clone", _wrap_lorentzian_susceptibility_clone, METH_VARARGS, NULL},
	 { (char *)"delete_lorentzian_susceptibility", _wrap_delete_lorentzian_susceptibility, METH_VARARGS, NULL},
	 { (char *)"lorentzian_susceptibility_update_P", _wrap_lorentzian_susceptibility_update_P, METH_VARARGS, NULL},
	 { (char *)"lorentzian_susceptibility_subtract_P", _wrap_lorentzian_susceptibility_subtract_P, METH_VARARGS, NULL},
	 { (char *)"lorentzian_susceptibility_new_internal_data", _wrap_lorentzian_susceptibility_new_internal_data, METH_VARARGS, NULL},
	 { (char *)"lorentzian_susceptibility_init_internal_data", _wrap_lorentzian_susceptibility_init_internal_data, METH_VARARGS, NULL},
	 { (char *)"lorentzian_susceptibility_copy_internal_data", _wrap_lorentzian_susceptibility_copy_internal_data, METH_VARARGS, NULL},
	 { (char *)"lorentzian_susceptibility_num_cinternal_notowned_needed", _wrap_lorentzian_susceptibility_num_cinternal_notowned_needed, METH_VARARGS, NULL},
	 { (char *)"lorentzian_susceptibility_cinternal_notowned_ptr", _wrap_lorentzian_susceptibility_cinternal_notowned_ptr, METH_VARARGS, NULL},
	 { (char *)"lorentzian_susceptibility_swigregister", lorentzian_susceptibility_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_noisy_lorentzian_susceptibility", _wrap_new_noisy_lorentzian_susceptibility, METH_VARARGS, NULL},
	 { (char *)"noisy_lorentzian_susceptibility_clone", _wrap_noisy_lorentzian_susceptibility_clone, METH_VARARGS, NULL},
	 { (char *)"noisy_lorentzian_susceptibility_update_P", _wrap_noisy_lorentzian_susceptibility_update_P, METH_VARARGS, NULL},
	 { (char *)"delete_noisy_lorentzian_susceptibility", _wrap_delete_noisy_lorentzian_susceptibility, METH_VARARGS, NULL},
	 { (char *)"noisy_lorentzian_susceptibility_swigregister", noisy_lorentzian_susceptibility_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_multilevel_susceptibility", _wrap_new_multilevel_susceptibility, METH_VARARGS, NULL},
	 { (char *)"multilevel_susceptibility_clone", _wrap_multilevel_susceptibility_clone, METH_VARARGS, NULL},
	 { (char *)"delete_multilevel_susceptibility", _wrap_delete_multilevel_susceptibility, METH_VARARGS, NULL},
	 { (char *)"multilevel_susceptibility_update_P", _wrap_multilevel_susceptibility_update_P, METH_VARARGS, NULL},
	 { (char *)"multilevel_susceptibility_subtract_P", _wrap_multilevel_susceptibility_subtract_P, METH_VARARGS, NULL},
	 { (char *)"multilevel_susceptibility_new_internal_data", _wrap_multilevel_susceptibility_new_internal_data, METH_VARARGS, NULL},
	 { (char *)"multilevel_susceptibility_init_internal_data", _wrap_multilevel_susceptibility_init_internal_data, METH_VARARGS, NULL},
	 { (char *)"multilevel_susceptibility_copy_internal_data", _wrap_multilevel_susceptibility_copy_internal_data, METH_VARARGS, NULL},
	 { (char *)"multilevel_susceptibility_delete_internal_data", _wrap_multilevel_susceptibility_delete_internal_data, METH_VARARGS, NULL},
	 { (char *)"multilevel_susceptibility_num_cinternal_notowned_needed", _wrap_multilevel_susceptibility_num_cinternal_notowned_needed, METH_VARARGS, NULL},
	 { (char *)"multilevel_susceptibility_cinternal_notowned_ptr", _wrap_multilevel_susceptibility_cinternal_notowned_ptr, METH_VARARGS, NULL},
	 { (char *)"multilevel_susceptibility_needs_W_notowned", _wrap_multilevel_susceptibility_needs_W_notowned, METH_VARARGS, NULL},
	 { (char *)"multilevel_susceptibility_needs_W_prev", _wrap_multilevel_susceptibility_needs_W_prev, METH_VARARGS, NULL},
	 { (char *)"multilevel_susceptibility_swigregister", multilevel_susceptibility_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_h5file", _wrap_new_h5file, METH_VARARGS, NULL},
	 { (char *)"delete_h5file", _wrap_delete_h5file, METH_VARARGS, NULL},
	 { (char *)"h5file_ok", _wrap_h5file_ok, METH_VARARGS, NULL},
	 { (char *)"h5file_read", _wrap_h5file_read, METH_VARARGS, NULL},
	 { (char *)"h5file_write", _wrap_h5file_write, METH_VARARGS, NULL},
	 { (char *)"h5file_create_data", _wrap_h5file_create_data, METH_VARARGS, NULL},
	 { (char *)"h5file_extend_data", _wrap_h5file_extend_data, METH_VARARGS, NULL},
	 { (char *)"h5file_create_or_extend_data", _wrap_h5file_create_or_extend_data, METH_VARARGS, NULL},
	 { (char *)"h5file_write_chunk", _wrap_h5file_write_chunk, METH_VARARGS, NULL},
	 { (char *)"h5file_done_writing_chunks", _wrap_h5file_done_writing_chunks, METH_VARARGS, NULL},
	 { (char *)"h5file_read_size", _wrap_h5file_read_size, METH_VARARGS, NULL},
	 { (char *)"h5file_read_chunk", _wrap_h5file_read_chunk, METH_VARARGS, NULL},
	 { (char *)"h5file_remove", _wrap_h5file_remove, METH_VARARGS, NULL},
	 { (char *)"h5file_remove_data", _wrap_h5file_remove_data, METH_VARARGS, NULL},
	 { (char *)"h5file_file_name", _wrap_h5file_file_name, METH_VARARGS, NULL},
	 { (char *)"h5file_prevent_deadlock", _wrap_h5file_prevent_deadlock, METH_VARARGS, NULL},
	 { (char *)"h5file_extending_set", _wrap_h5file_extending_set, METH_VARARGS, NULL},
	 { (char *)"h5file_extending_get", _wrap_h5file_extending_get, METH_VARARGS, NULL},
	 { (char *)"h5file_get_extending", _wrap_h5file_get_extending, METH_VARARGS, NULL},
	 { (char *)"h5file_swigregister", h5file_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_material_function", _wrap_new_material_function, METH_VARARGS, NULL},
	 { (char *)"delete_material_function", _wrap_delete_material_function, METH_VARARGS, NULL},
	 { (char *)"material_function_set_volume", _wrap_material_function_set_volume, METH_VARARGS, NULL},
	 { (char *)"material_function_unset_volume", _wrap_material_function_unset_volume, METH_VARARGS, NULL},
	 { (char *)"material_function_chi1p1", _wrap_material_function_chi1p1, METH_VARARGS, NULL},
	 { (char *)"material_function_eps", _wrap_material_function_eps, METH_VARARGS, NULL},
	 { (char *)"material_function_has_mu", _wrap_material_function_has_mu, METH_VARARGS, NULL},
	 { (char *)"material_function_mu", _wrap_material_function_mu, METH_VARARGS, NULL},
	 { (char *)"material_function_has_conductivity", _wrap_material_function_has_conductivity, METH_VARARGS, NULL},
	 { (char *)"material_function_conductivity", _wrap_material_function_conductivity, METH_VARARGS, NULL},
	 { (char *)"material_function_normal_vector", _wrap_material_function_normal_vector, METH_VARARGS, NULL},
	 { (char *)"material_function_eff_chi1inv_row", _wrap_material_function_eff_chi1inv_row, METH_VARARGS, NULL},
	 { (char *)"material_function_sigma_row", _wrap_material_function_sigma_row, METH_VARARGS, NULL},
	 { (char *)"material_function_has_chi3", _wrap_material_function_has_chi3, METH_VARARGS, NULL},
	 { (char *)"material_function_chi3", _wrap_material_function_chi3, METH_VARARGS, NULL},
	 { (char *)"material_function_has_chi2", _wrap_material_function_has_chi2, METH_VARARGS, NULL},
	 { (char *)"material_function_chi2", _wrap_material_function_chi2, METH_VARARGS, NULL},
	 { (char *)"material_function_swigregister", material_function_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_simple_material_function", _wrap_new_simple_material_function, METH_VARARGS, NULL},
	 { (char *)"delete_simple_material_function", _wrap_delete_simple_material_function, METH_VARARGS, NULL},
	 { (char *)"simple_material_function_chi1p1", _wrap_simple_material_function_chi1p1, METH_VARARGS, NULL},
	 { (char *)"simple_material_function_eps", _wrap_simple_material_function_eps, METH_VARARGS, NULL},
	 { (char *)"simple_material_function_mu", _wrap_simple_material_function_mu, METH_VARARGS, NULL},
	 { (char *)"simple_material_function_conductivity", _wrap_simple_material_function_conductivity, METH_VARARGS, NULL},
	 { (char *)"simple_material_function_sigma_row", _wrap_simple_material_function_sigma_row, METH_VARARGS, NULL},
	 { (char *)"simple_material_function_chi3", _wrap_simple_material_function_chi3, METH_VARARGS, NULL},
	 { (char *)"simple_material_function_chi2", _wrap_simple_material_function_chi2, METH_VARARGS, NULL},
	 { (char *)"simple_material_function_swigregister", simple_material_function_swigregister, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_a_set", _wrap_structure_chunk_a_set, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_a_get", _wrap_structure_chunk_a_get, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_Courant_set", _wrap_structure_chunk_Courant_set, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_Courant_get", _wrap_structure_chunk_Courant_get, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_dt_set", _wrap_structure_chunk_dt_set, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_dt_get", _wrap_structure_chunk_dt_get, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_chi3_set", _wrap_structure_chunk_chi3_set, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_chi3_get", _wrap_structure_chunk_chi3_get, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_chi2_set", _wrap_structure_chunk_chi2_set, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_chi2_get", _wrap_structure_chunk_chi2_get, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_chi1inv_set", _wrap_structure_chunk_chi1inv_set, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_chi1inv_get", _wrap_structure_chunk_chi1inv_get, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_trivial_chi1inv_set", _wrap_structure_chunk_trivial_chi1inv_set, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_trivial_chi1inv_get", _wrap_structure_chunk_trivial_chi1inv_get, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_conductivity_set", _wrap_structure_chunk_conductivity_set, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_conductivity_get", _wrap_structure_chunk_conductivity_get, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_condinv_set", _wrap_structure_chunk_condinv_set, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_condinv_get", _wrap_structure_chunk_condinv_get, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_condinv_stale_set", _wrap_structure_chunk_condinv_stale_set, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_condinv_stale_get", _wrap_structure_chunk_condinv_stale_get, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_sig_set", _wrap_structure_chunk_sig_set, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_sig_get", _wrap_structure_chunk_sig_get, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_kap_set", _wrap_structure_chunk_kap_set, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_kap_get", _wrap_structure_chunk_kap_get, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_siginv_set", _wrap_structure_chunk_siginv_set, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_siginv_get", _wrap_structure_chunk_siginv_get, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_sigsize_set", _wrap_structure_chunk_sigsize_set, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_sigsize_get", _wrap_structure_chunk_sigsize_get, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_gv_set", _wrap_structure_chunk_gv_set, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_gv_get", _wrap_structure_chunk_gv_get, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_v_set", _wrap_structure_chunk_v_set, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_v_get", _wrap_structure_chunk_v_get, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_chiP_set", _wrap_structure_chunk_chiP_set, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_chiP_get", _wrap_structure_chunk_chiP_get, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_refcount_set", _wrap_structure_chunk_refcount_set, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_refcount_get", _wrap_structure_chunk_refcount_get, METH_VARARGS, NULL},
	 { (char *)"delete_structure_chunk", _wrap_delete_structure_chunk, METH_VARARGS, NULL},
	 { (char *)"new_structure_chunk", _wrap_new_structure_chunk, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_set_chi1inv", _wrap_structure_chunk_set_chi1inv, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_has_chi", _wrap_structure_chunk_has_chi, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_has_chisigma", _wrap_structure_chunk_has_chisigma, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_has_chi1inv", _wrap_structure_chunk_has_chi1inv, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_set_conductivity", _wrap_structure_chunk_set_conductivity, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_update_condinv", _wrap_structure_chunk_update_condinv, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_set_chi3", _wrap_structure_chunk_set_chi3, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_set_chi2", _wrap_structure_chunk_set_chi2, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_use_pml", _wrap_structure_chunk_use_pml, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_add_susceptibility", _wrap_structure_chunk_add_susceptibility, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_mix_with", _wrap_structure_chunk_mix_with, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_n_proc", _wrap_structure_chunk_n_proc, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_is_mine", _wrap_structure_chunk_is_mine, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_remove_susceptibilities", _wrap_structure_chunk_remove_susceptibilities, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_get_chi1inv", _wrap_structure_chunk_get_chi1inv, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_get_inveps", _wrap_structure_chunk_get_inveps, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_max_eps", _wrap_structure_chunk_max_eps, METH_VARARGS, NULL},
	 { (char *)"structure_chunk_swigregister", structure_chunk_swigregister, METH_VARARGS, NULL},
	 { (char *)"pml_quadratic_profile", _wrap_pml_quadratic_profile, METH_VARARGS, NULL},
	 { (char *)"new_boundary_region", _wrap_new_boundary_region, METH_VARARGS, NULL},
	 { (char *)"delete_boundary_region", _wrap_delete_boundary_region, METH_VARARGS, NULL},
	 { (char *)"boundary_region_boundary_region_assign", _wrap_boundary_region_boundary_region_assign, METH_VARARGS, NULL},
	 { (char *)"boundary_region___add__", _wrap_boundary_region___add__, METH_VARARGS, NULL},
	 { (char *)"boundary_region___mul__", _wrap_boundary_region___mul__, METH_VARARGS, NULL},
	 { (char *)"boundary_region_br_apply", _wrap_boundary_region_br_apply, METH_VARARGS, NULL},
	 { (char *)"boundary_region_check_ok", _wrap_boundary_region_check_ok, METH_VARARGS, NULL},
	 { (char *)"boundary_region_swigregister", boundary_region_swigregister, METH_VARARGS, NULL},
	 { (char *)"pml", _wrap_pml, METH_VARARGS, NULL},
	 { (char *)"structure_chunks_set", _wrap_structure_chunks_set, METH_VARARGS, NULL},
	 { (char *)"structure_chunks_get", _wrap_structure_chunks_get, METH_VARARGS, NULL},
	 { (char *)"structure_num_chunks_set", _wrap_structure_num_chunks_set, METH_VARARGS, NULL},
	 { (char *)"structure_num_chunks_get", _wrap_structure_num_chunks_get, METH_VARARGS, NULL},
	 { (char *)"structure_shared_chunks_set", _wrap_structure_shared_chunks_set, METH_VARARGS, NULL},
	 { (char *)"structure_shared_chunks_get", _wrap_structure_shared_chunks_get, METH_VARARGS, NULL},
	 { (char *)"structure_gv_set", _wrap_structure_gv_set, METH_VARARGS, NULL},
	 { (char *)"structure_gv_get", _wrap_structure_gv_get, METH_VARARGS, NULL},
	 { (char *)"structure_user_volume_set", _wrap_structure_user_volume_set, METH_VARARGS, NULL},
	 { (char *)"structure_user_volume_get", _wrap_structure_user_volume_get, METH_VARARGS, NULL},
	 { (char *)"structure_a_set", _wrap_structure_a_set, METH_VARARGS, NULL},
	 { (char *)"structure_a_get", _wrap_structure_a_get, METH_VARARGS, NULL},
	 { (char *)"structure_Courant_set", _wrap_structure_Courant_set, METH_VARARGS, NULL},
	 { (char *)"structure_Courant_get", _wrap_structure_Courant_get, METH_VARARGS, NULL},
	 { (char *)"structure_dt_set", _wrap_structure_dt_set, METH_VARARGS, NULL},
	 { (char *)"structure_dt_get", _wrap_structure_dt_get, METH_VARARGS, NULL},
	 { (char *)"structure_v_set", _wrap_structure_v_set, METH_VARARGS, NULL},
	 { (char *)"structure_v_get", _wrap_structure_v_get, METH_VARARGS, NULL},
	 { (char *)"structure_S_set", _wrap_structure_S_set, METH_VARARGS, NULL},
	 { (char *)"structure_S_get", _wrap_structure_S_get, METH_VARARGS, NULL},
	 { (char *)"structure_outdir_set", _wrap_structure_outdir_set, METH_VARARGS, NULL},
	 { (char *)"structure_outdir_get", _wrap_structure_outdir_get, METH_VARARGS, NULL},
	 { (char *)"structure_effort_volumes_set", _wrap_structure_effort_volumes_set, METH_VARARGS, NULL},
	 { (char *)"structure_effort_volumes_get", _wrap_structure_effort_volumes_get, METH_VARARGS, NULL},
	 { (char *)"structure_effort_set", _wrap_structure_effort_set, METH_VARARGS, NULL},
	 { (char *)"structure_effort_get", _wrap_structure_effort_get, METH_VARARGS, NULL},
	 { (char *)"structure_num_effort_volumes_set", _wrap_structure_num_effort_volumes_set, METH_VARARGS, NULL},
	 { (char *)"structure_num_effort_volumes_get", _wrap_structure_num_effort_volumes_get, METH_VARARGS, NULL},
	 { (char *)"delete_structure", _wrap_delete_structure, METH_VARARGS, NULL},
	 { (char *)"new_structure", _wrap_new_structure, METH_VARARGS, NULL},
	 { (char *)"structure_set_materials", _wrap_structure_set_materials, METH_VARARGS, NULL},
	 { (char *)"structure_set_chi1inv", _wrap_structure_set_chi1inv, METH_VARARGS, NULL},
	 { (char *)"structure_has_chi", _wrap_structure_has_chi, METH_VARARGS, NULL},
	 { (char *)"structure_set_epsilon", _wrap_structure_set_epsilon, METH_VARARGS, NULL},
	 { (char *)"structure_set_mu", _wrap_structure_set_mu, METH_VARARGS, NULL},
	 { (char *)"structure_set_conductivity", _wrap_structure_set_conductivity, METH_VARARGS, NULL},
	 { (char *)"structure_set_chi3", _wrap_structure_set_chi3, METH_VARARGS, NULL},
	 { (char *)"structure_set_chi2", _wrap_structure_set_chi2, METH_VARARGS, NULL},
	 { (char *)"structure_add_susceptibility", _wrap_structure_add_susceptibility, METH_VARARGS, NULL},
	 { (char *)"structure_remove_susceptibilities", _wrap_structure_remove_susceptibilities, METH_VARARGS, NULL},
	 { (char *)"structure_set_output_directory", _wrap_structure_set_output_directory, METH_VARARGS, NULL},
	 { (char *)"structure_mix_with", _wrap_structure_mix_with, METH_VARARGS, NULL},
	 { (char *)"structure_equal_layout", _wrap_structure_equal_layout, METH_VARARGS, NULL},
	 { (char *)"structure_print_layout", _wrap_structure_print_layout, METH_VARARGS, NULL},
	 { (char *)"structure_dump", _wrap_structure_dump, METH_VARARGS, NULL},
	 { (char *)"structure_load", _wrap_structure_load, METH_VARARGS, NULL},
	 { (char *)"structure_get_chi1inv", _wrap_structure_get_chi1inv, METH_VARARGS, NULL},
	 { (char *)"structure_get_inveps", _wrap_structure_get_inveps, METH_VARARGS, NULL},
	 { (char *)"structure_get_eps", _wrap_structure_get_eps, METH_VARARGS, NULL},
	 { (char *)"structure_get_mu", _wrap_structure_get_mu, METH_VARARGS, NULL},
	 { (char *)"structure_max_eps", _wrap_structure_max_eps, METH_VARARGS, NULL},
	 { (char *)"structure_swigregister", structure_swigregister, METH_VARARGS, NULL},
	 { (char *)"src_time_is_integrated_set", _wrap_src_time_is_integrated_set, METH_VARARGS, NULL},
	 { (char *)"src_time_is_integrated_get", _wrap_src_time_is_integrated_get, METH_VARARGS, NULL},
	 { (char *)"delete_src_time", _wrap_delete_src_time, METH_VARARGS, NULL},
	 { (char *)"new_src_time", _wrap_new_src_time, METH_VARARGS, NULL},
	 { (char *)"src_time_update", _wrap_src_time_update, METH_VARARGS, NULL},
	 { (char *)"src_time_current", _wrap_src_time_current, METH_VARARGS, NULL},
	 { (char *)"src_time_last_time_max", _wrap_src_time_last_time_max, METH_VARARGS, NULL},
	 { (char *)"src_time_add_to", _wrap_src_time_add_to, METH_VARARGS, NULL},
	 { (char *)"src_time_next_set", _wrap_src_time_next_set, METH_VARARGS, NULL},
	 { (char *)"src_time_next_get", _wrap_src_time_next_get, METH_VARARGS, NULL},
	 { (char *)"src_time_dipole", _wrap_src_time_dipole, METH_VARARGS, NULL},
	 { (char *)"src_time_last_time", _wrap_src_time_last_time, METH_VARARGS, NULL},
	 { (char *)"src_time_clone", _wrap_src_time_clone, METH_VARARGS, NULL},
	 { (char *)"src_time_is_equal", _wrap_src_time_is_equal, METH_VARARGS, NULL},
	 { (char *)"src_time_frequency", _wrap_src_time_frequency, METH_VARARGS, NULL},
	 { (char *)"src_time_set_frequency", _wrap_src_time_set_frequency, METH_VARARGS, NULL},
	 { (char *)"src_time_swigregister", src_time_swigregister, METH_VARARGS, NULL},
	 { (char *)"src_times_equal", _wrap_src_times_equal, METH_VARARGS, NULL},
	 { (char *)"new_gaussian_src_time", _wrap_new_gaussian_src_time, METH_VARARGS, NULL},
	 { (char *)"delete_gaussian_src_time", _wrap_delete_gaussian_src_time, METH_VARARGS, NULL},
	 { (char *)"gaussian_src_time_dipole", _wrap_gaussian_src_time_dipole, METH_VARARGS, NULL},
	 { (char *)"gaussian_src_time_last_time", _wrap_gaussian_src_time_last_time, METH_VARARGS, NULL},
	 { (char *)"gaussian_src_time_clone", _wrap_gaussian_src_time_clone, METH_VARARGS, NULL},
	 { (char *)"gaussian_src_time_is_equal", _wrap_gaussian_src_time_is_equal, METH_VARARGS, NULL},
	 { (char *)"gaussian_src_time_frequency", _wrap_gaussian_src_time_frequency, METH_VARARGS, NULL},
	 { (char *)"gaussian_src_time_set_frequency", _wrap_gaussian_src_time_set_frequency, METH_VARARGS, NULL},
	 { (char *)"gaussian_src_time_swigregister", gaussian_src_time_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_continuous_src_time", _wrap_new_continuous_src_time, METH_VARARGS, NULL},
	 { (char *)"delete_continuous_src_time", _wrap_delete_continuous_src_time, METH_VARARGS, NULL},
	 { (char *)"continuous_src_time_dipole", _wrap_continuous_src_time_dipole, METH_VARARGS, NULL},
	 { (char *)"continuous_src_time_last_time", _wrap_continuous_src_time_last_time, METH_VARARGS, NULL},
	 { (char *)"continuous_src_time_clone", _wrap_continuous_src_time_clone, METH_VARARGS, NULL},
	 { (char *)"continuous_src_time_is_equal", _wrap_continuous_src_time_is_equal, METH_VARARGS, NULL},
	 { (char *)"continuous_src_time_frequency", _wrap_continuous_src_time_frequency, METH_VARARGS, NULL},
	 { (char *)"continuous_src_time_set_frequency", _wrap_continuous_src_time_set_frequency, METH_VARARGS, NULL},
	 { (char *)"continuous_src_time_swigregister", continuous_src_time_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_custom_src_time", _wrap_new_custom_src_time, METH_VARARGS, NULL},
	 { (char *)"delete_custom_src_time", _wrap_delete_custom_src_time, METH_VARARGS, NULL},
	 { (char *)"custom_src_time_current", _wrap_custom_src_time_current, METH_VARARGS, NULL},
	 { (char *)"custom_src_time_dipole", _wrap_custom_src_time_dipole, METH_VARARGS, NULL},
	 { (char *)"custom_src_time_last_time", _wrap_custom_src_time_last_time, METH_VARARGS, NULL},
	 { (char *)"custom_src_time_clone", _wrap_custom_src_time_clone, METH_VARARGS, NULL},
	 { (char *)"custom_src_time_is_equal", _wrap_custom_src_time_is_equal, METH_VARARGS, NULL},
	 { (char *)"custom_src_time_swigregister", custom_src_time_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_monitor_point", _wrap_new_monitor_point, METH_VARARGS, NULL},
	 { (char *)"delete_monitor_point", _wrap_delete_monitor_point, METH_VARARGS, NULL},
	 { (char *)"monitor_point_loc_set", _wrap_monitor_point_loc_set, METH_VARARGS, NULL},
	 { (char *)"monitor_point_loc_get", _wrap_monitor_point_loc_get, METH_VARARGS, NULL},
	 { (char *)"monitor_point_t_set", _wrap_monitor_point_t_set, METH_VARARGS, NULL},
	 { (char *)"monitor_point_t_get", _wrap_monitor_point_t_get, METH_VARARGS, NULL},
	 { (char *)"monitor_point_f_set", _wrap_monitor_point_f_set, METH_VARARGS, NULL},
	 { (char *)"monitor_point_f_get", _wrap_monitor_point_f_get, METH_VARARGS, NULL},
	 { (char *)"monitor_point_next_set", _wrap_monitor_point_next_set, METH_VARARGS, NULL},
	 { (char *)"monitor_point_next_get", _wrap_monitor_point_next_get, METH_VARARGS, NULL},
	 { (char *)"monitor_point_get_component", _wrap_monitor_point_get_component, METH_VARARGS, NULL},
	 { (char *)"monitor_point_poynting_in_direction", _wrap_monitor_point_poynting_in_direction, METH_VARARGS, NULL},
	 { (char *)"monitor_point_fourier_transform", _wrap_monitor_point_fourier_transform, METH_VARARGS, NULL},
	 { (char *)"monitor_point_harminv", _wrap_monitor_point_harminv, METH_VARARGS, NULL},
	 { (char *)"monitor_point_swigregister", monitor_point_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_dft_chunk", _wrap_new_dft_chunk, METH_VARARGS, NULL},
	 { (char *)"delete_dft_chunk", _wrap_delete_dft_chunk, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_update_dft", _wrap_dft_chunk_update_dft, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_scale_dft", _wrap_dft_chunk_scale_dft, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_process_dft_component", _wrap_dft_chunk_process_dft_component, METH_VARARGS, NULL},
	 { (char *)"dft_chunk___isub__", _wrap_dft_chunk___isub__, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_omega_min_set", _wrap_dft_chunk_omega_min_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_omega_min_get", _wrap_dft_chunk_omega_min_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_domega_set", _wrap_dft_chunk_domega_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_domega_get", _wrap_dft_chunk_domega_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_Nomega_set", _wrap_dft_chunk_Nomega_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_Nomega_get", _wrap_dft_chunk_Nomega_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_c_set", _wrap_dft_chunk_c_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_c_get", _wrap_dft_chunk_c_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_N_set", _wrap_dft_chunk_N_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_N_get", _wrap_dft_chunk_N_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_dft_set", _wrap_dft_chunk_dft_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_dft_get", _wrap_dft_chunk_dft_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_next_in_chunk_set", _wrap_dft_chunk_next_in_chunk_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_next_in_chunk_get", _wrap_dft_chunk_next_in_chunk_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_next_in_dft_set", _wrap_dft_chunk_next_in_dft_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_next_in_dft_get", _wrap_dft_chunk_next_in_dft_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_stored_weight_set", _wrap_dft_chunk_stored_weight_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_stored_weight_get", _wrap_dft_chunk_stored_weight_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_include_dV_and_interp_weights_set", _wrap_dft_chunk_include_dV_and_interp_weights_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_include_dV_and_interp_weights_get", _wrap_dft_chunk_include_dV_and_interp_weights_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_sqrt_dV_and_interp_weights_set", _wrap_dft_chunk_sqrt_dV_and_interp_weights_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_sqrt_dV_and_interp_weights_get", _wrap_dft_chunk_sqrt_dV_and_interp_weights_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_extra_weight_set", _wrap_dft_chunk_extra_weight_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_extra_weight_get", _wrap_dft_chunk_extra_weight_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_fc_set", _wrap_dft_chunk_fc_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_fc_get", _wrap_dft_chunk_fc_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk__is_set", _wrap_dft_chunk__is_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk__is_get", _wrap_dft_chunk__is_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_ie_set", _wrap_dft_chunk_ie_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_ie_get", _wrap_dft_chunk_ie_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_s0_set", _wrap_dft_chunk_s0_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_s0_get", _wrap_dft_chunk_s0_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_s1_set", _wrap_dft_chunk_s1_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_s1_get", _wrap_dft_chunk_s1_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_e0_set", _wrap_dft_chunk_e0_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_e0_get", _wrap_dft_chunk_e0_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_e1_set", _wrap_dft_chunk_e1_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_e1_get", _wrap_dft_chunk_e1_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_dV0_set", _wrap_dft_chunk_dV0_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_dV0_get", _wrap_dft_chunk_dV0_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_dV1_set", _wrap_dft_chunk_dV1_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_dV1_get", _wrap_dft_chunk_dV1_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_scale_set", _wrap_dft_chunk_scale_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_scale_get", _wrap_dft_chunk_scale_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_shift_set", _wrap_dft_chunk_shift_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_shift_get", _wrap_dft_chunk_shift_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_S_set", _wrap_dft_chunk_S_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_S_get", _wrap_dft_chunk_S_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_sn_set", _wrap_dft_chunk_sn_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_sn_get", _wrap_dft_chunk_sn_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_dft_phase_set", _wrap_dft_chunk_dft_phase_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_dft_phase_get", _wrap_dft_chunk_dft_phase_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_avg1_set", _wrap_dft_chunk_avg1_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_avg1_get", _wrap_dft_chunk_avg1_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_avg2_set", _wrap_dft_chunk_avg2_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_avg2_get", _wrap_dft_chunk_avg2_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_vc_set", _wrap_dft_chunk_vc_set, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_vc_get", _wrap_dft_chunk_vc_get, METH_VARARGS, NULL},
	 { (char *)"dft_chunk_swigregister", dft_chunk_swigregister, METH_VARARGS, NULL},
	 { (char *)"save_dft_hdf5", _wrap_save_dft_hdf5, METH_VARARGS, NULL},
	 { (char *)"load_dft_hdf5", _wrap_load_dft_hdf5, METH_VARARGS, NULL},
	 { (char *)"new_dft_flux", _wrap_new_dft_flux, METH_VARARGS, NULL},
	 { (char *)"dft_flux_flux", _wrap_dft_flux_flux, METH_VARARGS, NULL},
	 { (char *)"dft_flux___isub__", _wrap_dft_flux___isub__, METH_VARARGS, NULL},
	 { (char *)"dft_flux_save_hdf5", _wrap_dft_flux_save_hdf5, METH_VARARGS, NULL},
	 { (char *)"dft_flux_load_hdf5", _wrap_dft_flux_load_hdf5, METH_VARARGS, NULL},
	 { (char *)"dft_flux_scale_dfts", _wrap_dft_flux_scale_dfts, METH_VARARGS, NULL},
	 { (char *)"dft_flux_remove", _wrap_dft_flux_remove, METH_VARARGS, NULL},
	 { (char *)"dft_flux_freq_min_set", _wrap_dft_flux_freq_min_set, METH_VARARGS, NULL},
	 { (char *)"dft_flux_freq_min_get", _wrap_dft_flux_freq_min_get, METH_VARARGS, NULL},
	 { (char *)"dft_flux_dfreq_set", _wrap_dft_flux_dfreq_set, METH_VARARGS, NULL},
	 { (char *)"dft_flux_dfreq_get", _wrap_dft_flux_dfreq_get, METH_VARARGS, NULL},
	 { (char *)"dft_flux_Nfreq_set", _wrap_dft_flux_Nfreq_set, METH_VARARGS, NULL},
	 { (char *)"dft_flux_Nfreq_get", _wrap_dft_flux_Nfreq_get, METH_VARARGS, NULL},
	 { (char *)"dft_flux_E_set", _wrap_dft_flux_E_set, METH_VARARGS, NULL},
	 { (char *)"dft_flux_E_get", _wrap_dft_flux_E_get, METH_VARARGS, NULL},
	 { (char *)"dft_flux_H_set", _wrap_dft_flux_H_set, METH_VARARGS, NULL},
	 { (char *)"dft_flux_H_get", _wrap_dft_flux_H_get, METH_VARARGS, NULL},
	 { (char *)"dft_flux_cE_set", _wrap_dft_flux_cE_set, METH_VARARGS, NULL},
	 { (char *)"dft_flux_cE_get", _wrap_dft_flux_cE_get, METH_VARARGS, NULL},
	 { (char *)"dft_flux_cH_set", _wrap_dft_flux_cH_set, METH_VARARGS, NULL},
	 { (char *)"dft_flux_cH_get", _wrap_dft_flux_cH_get, METH_VARARGS, NULL},
	 { (char *)"dft_flux_where_set", _wrap_dft_flux_where_set, METH_VARARGS, NULL},
	 { (char *)"dft_flux_where_get", _wrap_dft_flux_where_get, METH_VARARGS, NULL},
	 { (char *)"dft_flux_normal_direction_set", _wrap_dft_flux_normal_direction_set, METH_VARARGS, NULL},
	 { (char *)"dft_flux_normal_direction_get", _wrap_dft_flux_normal_direction_get, METH_VARARGS, NULL},
	 { (char *)"delete_dft_flux", _wrap_delete_dft_flux, METH_VARARGS, NULL},
	 { (char *)"dft_flux_swigregister", dft_flux_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_dft_force", _wrap_new_dft_force, METH_VARARGS, NULL},
	 { (char *)"dft_force_force", _wrap_dft_force_force, METH_VARARGS, NULL},
	 { (char *)"dft_force___isub__", _wrap_dft_force___isub__, METH_VARARGS, NULL},
	 { (char *)"dft_force_save_hdf5", _wrap_dft_force_save_hdf5, METH_VARARGS, NULL},
	 { (char *)"dft_force_load_hdf5", _wrap_dft_force_load_hdf5, METH_VARARGS, NULL},
	 { (char *)"dft_force_scale_dfts", _wrap_dft_force_scale_dfts, METH_VARARGS, NULL},
	 { (char *)"dft_force_remove", _wrap_dft_force_remove, METH_VARARGS, NULL},
	 { (char *)"dft_force_freq_min_set", _wrap_dft_force_freq_min_set, METH_VARARGS, NULL},
	 { (char *)"dft_force_freq_min_get", _wrap_dft_force_freq_min_get, METH_VARARGS, NULL},
	 { (char *)"dft_force_dfreq_set", _wrap_dft_force_dfreq_set, METH_VARARGS, NULL},
	 { (char *)"dft_force_dfreq_get", _wrap_dft_force_dfreq_get, METH_VARARGS, NULL},
	 { (char *)"dft_force_Nfreq_set", _wrap_dft_force_Nfreq_set, METH_VARARGS, NULL},
	 { (char *)"dft_force_Nfreq_get", _wrap_dft_force_Nfreq_get, METH_VARARGS, NULL},
	 { (char *)"dft_force_offdiag1_set", _wrap_dft_force_offdiag1_set, METH_VARARGS, NULL},
	 { (char *)"dft_force_offdiag1_get", _wrap_dft_force_offdiag1_get, METH_VARARGS, NULL},
	 { (char *)"dft_force_offdiag2_set", _wrap_dft_force_offdiag2_set, METH_VARARGS, NULL},
	 { (char *)"dft_force_offdiag2_get", _wrap_dft_force_offdiag2_get, METH_VARARGS, NULL},
	 { (char *)"dft_force_diag_set", _wrap_dft_force_diag_set, METH_VARARGS, NULL},
	 { (char *)"dft_force_diag_get", _wrap_dft_force_diag_get, METH_VARARGS, NULL},
	 { (char *)"dft_force_where_set", _wrap_dft_force_where_set, METH_VARARGS, NULL},
	 { (char *)"dft_force_where_get", _wrap_dft_force_where_get, METH_VARARGS, NULL},
	 { (char *)"delete_dft_force", _wrap_delete_dft_force, METH_VARARGS, NULL},
	 { (char *)"dft_force_swigregister", dft_force_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_dft_near2far", _wrap_new_dft_near2far, METH_VARARGS, NULL},
	 { (char *)"dft_near2far_farfield", _wrap_dft_near2far_farfield, METH_VARARGS, NULL},
	 { (char *)"dft_near2far_farfield_lowlevel", _wrap_dft_near2far_farfield_lowlevel, METH_VARARGS, NULL},
	 { (char *)"dft_near2far_save_farfields", _wrap_dft_near2far_save_farfields, METH_VARARGS, NULL},
	 { (char *)"dft_near2far___isub__", _wrap_dft_near2far___isub__, METH_VARARGS, NULL},
	 { (char *)"dft_near2far_save_hdf5", _wrap_dft_near2far_save_hdf5, METH_VARARGS, NULL},
	 { (char *)"dft_near2far_load_hdf5", _wrap_dft_near2far_load_hdf5, METH_VARARGS, NULL},
	 { (char *)"dft_near2far_scale_dfts", _wrap_dft_near2far_scale_dfts, METH_VARARGS, NULL},
	 { (char *)"dft_near2far_remove", _wrap_dft_near2far_remove, METH_VARARGS, NULL},
	 { (char *)"dft_near2far_freq_min_set", _wrap_dft_near2far_freq_min_set, METH_VARARGS, NULL},
	 { (char *)"dft_near2far_freq_min_get", _wrap_dft_near2far_freq_min_get, METH_VARARGS, NULL},
	 { (char *)"dft_near2far_dfreq_set", _wrap_dft_near2far_dfreq_set, METH_VARARGS, NULL},
	 { (char *)"dft_near2far_dfreq_get", _wrap_dft_near2far_dfreq_get, METH_VARARGS, NULL},
	 { (char *)"dft_near2far_Nfreq_set", _wrap_dft_near2far_Nfreq_set, METH_VARARGS, NULL},
	 { (char *)"dft_near2far_Nfreq_get", _wrap_dft_near2far_Nfreq_get, METH_VARARGS, NULL},
	 { (char *)"dft_near2far_F_set", _wrap_dft_near2far_F_set, METH_VARARGS, NULL},
	 { (char *)"dft_near2far_F_get", _wrap_dft_near2far_F_get, METH_VARARGS, NULL},
	 { (char *)"dft_near2far_eps_set", _wrap_dft_near2far_eps_set, METH_VARARGS, NULL},
	 { (char *)"dft_near2far_eps_get", _wrap_dft_near2far_eps_get, METH_VARARGS, NULL},
	 { (char *)"dft_near2far_mu_set", _wrap_dft_near2far_mu_set, METH_VARARGS, NULL},
	 { (char *)"dft_near2far_mu_get", _wrap_dft_near2far_mu_get, METH_VARARGS, NULL},
	 { (char *)"dft_near2far_where_set", _wrap_dft_near2far_where_set, METH_VARARGS, NULL},
	 { (char *)"dft_near2far_where_get", _wrap_dft_near2far_where_get, METH_VARARGS, NULL},
	 { (char *)"delete_dft_near2far", _wrap_delete_dft_near2far, METH_VARARGS, NULL},
	 { (char *)"dft_near2far_swigregister", dft_near2far_swigregister, METH_VARARGS, NULL},
	 { (char *)"new__dft_ldos", _wrap_new__dft_ldos, METH_VARARGS, NULL},
	 { (char *)"delete_dft_ldos", _wrap_delete_dft_ldos, METH_VARARGS, NULL},
	 { (char *)"dft_ldos_update", _wrap_dft_ldos_update, METH_VARARGS, NULL},
	 { (char *)"dft_ldos_ldos", _wrap_dft_ldos_ldos, METH_VARARGS, NULL},
	 { (char *)"dft_ldos_F", _wrap_dft_ldos_F, METH_VARARGS, NULL},
	 { (char *)"dft_ldos_J", _wrap_dft_ldos_J, METH_VARARGS, NULL},
	 { (char *)"dft_ldos_omega_min_set", _wrap_dft_ldos_omega_min_set, METH_VARARGS, NULL},
	 { (char *)"dft_ldos_omega_min_get", _wrap_dft_ldos_omega_min_get, METH_VARARGS, NULL},
	 { (char *)"dft_ldos_domega_set", _wrap_dft_ldos_domega_set, METH_VARARGS, NULL},
	 { (char *)"dft_ldos_domega_get", _wrap_dft_ldos_domega_get, METH_VARARGS, NULL},
	 { (char *)"dft_ldos_Nomega_set", _wrap_dft_ldos_Nomega_set, METH_VARARGS, NULL},
	 { (char *)"dft_ldos_Nomega_get", _wrap_dft_ldos_Nomega_get, METH_VARARGS, NULL},
	 { (char *)"dft_ldos_swigregister", dft_ldos_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_dft_fields", _wrap_new_dft_fields, METH_VARARGS, NULL},
	 { (char *)"dft_fields_scale_dfts", _wrap_dft_fields_scale_dfts, METH_VARARGS, NULL},
	 { (char *)"dft_fields_remove", _wrap_dft_fields_remove, METH_VARARGS, NULL},
	 { (char *)"dft_fields_freq_min_set", _wrap_dft_fields_freq_min_set, METH_VARARGS, NULL},
	 { (char *)"dft_fields_freq_min_get", _wrap_dft_fields_freq_min_get, METH_VARARGS, NULL},
	 { (char *)"dft_fields_dfreq_set", _wrap_dft_fields_dfreq_set, METH_VARARGS, NULL},
	 { (char *)"dft_fields_dfreq_get", _wrap_dft_fields_dfreq_get, METH_VARARGS, NULL},
	 { (char *)"dft_fields_Nfreq_set", _wrap_dft_fields_Nfreq_set, METH_VARARGS, NULL},
	 { (char *)"dft_fields_Nfreq_get", _wrap_dft_fields_Nfreq_get, METH_VARARGS, NULL},
	 { (char *)"dft_fields_chunks_set", _wrap_dft_fields_chunks_set, METH_VARARGS, NULL},
	 { (char *)"dft_fields_chunks_get", _wrap_dft_fields_chunks_get, METH_VARARGS, NULL},
	 { (char *)"dft_fields_where_set", _wrap_dft_fields_where_set, METH_VARARGS, NULL},
	 { (char *)"dft_fields_where_get", _wrap_dft_fields_where_get, METH_VARARGS, NULL},
	 { (char *)"delete_dft_fields", _wrap_delete_dft_fields, METH_VARARGS, NULL},
	 { (char *)"dft_fields_swigregister", dft_fields_swigregister, METH_VARARGS, NULL},
	 { (char *)"polarization_state_data_set", _wrap_polarization_state_data_set, METH_VARARGS, NULL},
	 { (char *)"polarization_state_data_get", _wrap_polarization_state_data_get, METH_VARARGS, NULL},
	 { (char *)"polarization_state_s_set", _wrap_polarization_state_s_set, METH_VARARGS, NULL},
	 { (char *)"polarization_state_s_get", _wrap_polarization_state_s_get, METH_VARARGS, NULL},
	 { (char *)"polarization_state_next_set", _wrap_polarization_state_next_set, METH_VARARGS, NULL},
	 { (char *)"polarization_state_next_get", _wrap_polarization_state_next_get, METH_VARARGS, NULL},
	 { (char *)"new_polarization_state", _wrap_new_polarization_state, METH_VARARGS, NULL},
	 { (char *)"delete_polarization_state", _wrap_delete_polarization_state, METH_VARARGS, NULL},
	 { (char *)"polarization_state_swigregister", polarization_state_swigregister, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_f_set", _wrap_fields_chunk_f_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_f_get", _wrap_fields_chunk_f_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_f_u_set", _wrap_fields_chunk_f_u_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_f_u_get", _wrap_fields_chunk_f_u_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_f_w_set", _wrap_fields_chunk_f_w_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_f_w_get", _wrap_fields_chunk_f_w_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_f_cond_set", _wrap_fields_chunk_f_cond_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_f_cond_get", _wrap_fields_chunk_f_cond_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_f_backup_set", _wrap_fields_chunk_f_backup_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_f_backup_get", _wrap_fields_chunk_f_backup_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_f_u_backup_set", _wrap_fields_chunk_f_u_backup_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_f_u_backup_get", _wrap_fields_chunk_f_u_backup_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_f_w_backup_set", _wrap_fields_chunk_f_w_backup_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_f_w_backup_get", _wrap_fields_chunk_f_w_backup_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_f_cond_backup_set", _wrap_fields_chunk_f_cond_backup_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_f_cond_backup_get", _wrap_fields_chunk_f_cond_backup_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_f_w_prev_set", _wrap_fields_chunk_f_w_prev_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_f_w_prev_get", _wrap_fields_chunk_f_w_prev_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_f_minus_p_set", _wrap_fields_chunk_f_minus_p_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_f_minus_p_get", _wrap_fields_chunk_f_minus_p_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_f_rderiv_int_set", _wrap_fields_chunk_f_rderiv_int_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_f_rderiv_int_get", _wrap_fields_chunk_f_rderiv_int_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_dft_chunks_set", _wrap_fields_chunk_dft_chunks_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_dft_chunks_get", _wrap_fields_chunk_dft_chunks_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_zeroes_set", _wrap_fields_chunk_zeroes_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_zeroes_get", _wrap_fields_chunk_zeroes_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_num_zeroes_set", _wrap_fields_chunk_num_zeroes_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_num_zeroes_get", _wrap_fields_chunk_num_zeroes_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_connections_get", _wrap_fields_chunk_connections_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_num_connections_get", _wrap_fields_chunk_num_connections_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_connection_phases_set", _wrap_fields_chunk_connection_phases_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_connection_phases_get", _wrap_fields_chunk_connection_phases_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_npol_set", _wrap_fields_chunk_npol_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_npol_get", _wrap_fields_chunk_npol_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_pol_set", _wrap_fields_chunk_pol_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_pol_get", _wrap_fields_chunk_pol_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_a_set", _wrap_fields_chunk_a_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_a_get", _wrap_fields_chunk_a_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_Courant_set", _wrap_fields_chunk_Courant_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_Courant_get", _wrap_fields_chunk_Courant_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_dt_set", _wrap_fields_chunk_dt_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_dt_get", _wrap_fields_chunk_dt_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_gv_set", _wrap_fields_chunk_gv_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_gv_get", _wrap_fields_chunk_gv_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_v_set", _wrap_fields_chunk_v_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_v_get", _wrap_fields_chunk_v_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_m_set", _wrap_fields_chunk_m_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_m_get", _wrap_fields_chunk_m_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_zero_fields_near_cylorigin_set", _wrap_fields_chunk_zero_fields_near_cylorigin_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_zero_fields_near_cylorigin_get", _wrap_fields_chunk_zero_fields_near_cylorigin_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_beta_set", _wrap_fields_chunk_beta_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_beta_get", _wrap_fields_chunk_beta_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_is_real_set", _wrap_fields_chunk_is_real_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_is_real_get", _wrap_fields_chunk_is_real_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_sources_set", _wrap_fields_chunk_sources_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_sources_get", _wrap_fields_chunk_sources_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_new_s_set", _wrap_fields_chunk_new_s_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_new_s_get", _wrap_fields_chunk_new_s_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_s_set", _wrap_fields_chunk_s_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_s_get", _wrap_fields_chunk_s_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_outdir_set", _wrap_fields_chunk_outdir_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_outdir_get", _wrap_fields_chunk_outdir_get, METH_VARARGS, NULL},
	 { (char *)"new_fields_chunk", _wrap_new_fields_chunk, METH_VARARGS, NULL},
	 { (char *)"delete_fields_chunk", _wrap_delete_fields_chunk, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_peek_field", _wrap_fields_chunk_peek_field, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_use_real_fields", _wrap_fields_chunk_use_real_fields, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_have_component", _wrap_fields_chunk_have_component, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_last_source_time", _wrap_fields_chunk_last_source_time, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_get_field_gv", _wrap_fields_chunk_get_field_gv, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_get_field", _wrap_fields_chunk_get_field, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_get_chi1inv", _wrap_fields_chunk_get_chi1inv, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_backup_component", _wrap_fields_chunk_backup_component, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_average_with_backup", _wrap_fields_chunk_average_with_backup, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_restore_component", _wrap_fields_chunk_restore_component, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_set_output_directory", _wrap_fields_chunk_set_output_directory, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_verbose", _wrap_fields_chunk_verbose, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_count_volume", _wrap_fields_chunk_count_volume, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_n_proc", _wrap_fields_chunk_n_proc, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_is_mine", _wrap_fields_chunk_is_mine, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_zero_metal", _wrap_fields_chunk_zero_metal, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_needs_W_notowned", _wrap_fields_chunk_needs_W_notowned, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_remove_sources", _wrap_fields_chunk_remove_sources, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_remove_susceptibilities", _wrap_fields_chunk_remove_susceptibilities, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_zero_fields", _wrap_fields_chunk_zero_fields, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_needs_W_prev", _wrap_fields_chunk_needs_W_prev, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_update_eh", _wrap_fields_chunk_update_eh, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_alloc_f", _wrap_fields_chunk_alloc_f, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_figure_out_step_plan", _wrap_fields_chunk_figure_out_step_plan, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_set_solve_cw_omega", _wrap_fields_chunk_set_solve_cw_omega, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_unset_solve_cw_omega", _wrap_fields_chunk_unset_solve_cw_omega, METH_VARARGS, NULL},
	 { (char *)"fields_chunk_swigregister", fields_chunk_swigregister, METH_VARARGS, NULL},
	 { (char *)"derived_component_func", _wrap_derived_component_func, METH_VARARGS, NULL},
	 { (char *)"fields_num_chunks_set", _wrap_fields_num_chunks_set, METH_VARARGS, NULL},
	 { (char *)"fields_num_chunks_get", _wrap_fields_num_chunks_get, METH_VARARGS, NULL},
	 { (char *)"fields_shared_chunks_set", _wrap_fields_shared_chunks_set, METH_VARARGS, NULL},
	 { (char *)"fields_shared_chunks_get", _wrap_fields_shared_chunks_get, METH_VARARGS, NULL},
	 { (char *)"fields_chunks_set", _wrap_fields_chunks_set, METH_VARARGS, NULL},
	 { (char *)"fields_chunks_get", _wrap_fields_chunks_get, METH_VARARGS, NULL},
	 { (char *)"fields_sources_set", _wrap_fields_sources_set, METH_VARARGS, NULL},
	 { (char *)"fields_sources_get", _wrap_fields_sources_get, METH_VARARGS, NULL},
	 { (char *)"fields_fluxes_set", _wrap_fields_fluxes_set, METH_VARARGS, NULL},
	 { (char *)"fields_fluxes_get", _wrap_fields_fluxes_get, METH_VARARGS, NULL},
	 { (char *)"fields_S_set", _wrap_fields_S_set, METH_VARARGS, NULL},
	 { (char *)"fields_S_get", _wrap_fields_S_get, METH_VARARGS, NULL},
	 { (char *)"fields_comm_blocks_set", _wrap_fields_comm_blocks_set, METH_VARARGS, NULL},
	 { (char *)"fields_comm_blocks_get", _wrap_fields_comm_blocks_get, METH_VARARGS, NULL},
	 { (char *)"fields_comm_sizes_set", _wrap_fields_comm_sizes_set, METH_VARARGS, NULL},
	 { (char *)"fields_comm_sizes_get", _wrap_fields_comm_sizes_get, METH_VARARGS, NULL},
	 { (char *)"fields_comm_size_tot", _wrap_fields_comm_size_tot, METH_VARARGS, NULL},
	 { (char *)"fields_a_set", _wrap_fields_a_set, METH_VARARGS, NULL},
	 { (char *)"fields_a_get", _wrap_fields_a_get, METH_VARARGS, NULL},
	 { (char *)"fields_dt_set", _wrap_fields_dt_set, METH_VARARGS, NULL},
	 { (char *)"fields_dt_get", _wrap_fields_dt_get, METH_VARARGS, NULL},
	 { (char *)"fields_gv_set", _wrap_fields_gv_set, METH_VARARGS, NULL},
	 { (char *)"fields_gv_get", _wrap_fields_gv_get, METH_VARARGS, NULL},
	 { (char *)"fields_user_volume_set", _wrap_fields_user_volume_set, METH_VARARGS, NULL},
	 { (char *)"fields_user_volume_get", _wrap_fields_user_volume_get, METH_VARARGS, NULL},
	 { (char *)"fields_v_set", _wrap_fields_v_set, METH_VARARGS, NULL},
	 { (char *)"fields_v_get", _wrap_fields_v_get, METH_VARARGS, NULL},
	 { (char *)"fields_m_set", _wrap_fields_m_set, METH_VARARGS, NULL},
	 { (char *)"fields_m_get", _wrap_fields_m_get, METH_VARARGS, NULL},
	 { (char *)"fields_beta_set", _wrap_fields_beta_set, METH_VARARGS, NULL},
	 { (char *)"fields_beta_get", _wrap_fields_beta_get, METH_VARARGS, NULL},
	 { (char *)"fields_t_set", _wrap_fields_t_set, METH_VARARGS, NULL},
	 { (char *)"fields_t_get", _wrap_fields_t_get, METH_VARARGS, NULL},
	 { (char *)"fields_phasein_time_set", _wrap_fields_phasein_time_set, METH_VARARGS, NULL},
	 { (char *)"fields_phasein_time_get", _wrap_fields_phasein_time_get, METH_VARARGS, NULL},
	 { (char *)"fields_is_real_set", _wrap_fields_is_real_set, METH_VARARGS, NULL},
	 { (char *)"fields_is_real_get", _wrap_fields_is_real_get, METH_VARARGS, NULL},
	 { (char *)"fields_k_set", _wrap_fields_k_set, METH_VARARGS, NULL},
	 { (char *)"fields_k_get", _wrap_fields_k_get, METH_VARARGS, NULL},
	 { (char *)"fields_eikna_set", _wrap_fields_eikna_set, METH_VARARGS, NULL},
	 { (char *)"fields_eikna_get", _wrap_fields_eikna_get, METH_VARARGS, NULL},
	 { (char *)"fields_coskna_set", _wrap_fields_coskna_set, METH_VARARGS, NULL},
	 { (char *)"fields_coskna_get", _wrap_fields_coskna_get, METH_VARARGS, NULL},
	 { (char *)"fields_sinkna_set", _wrap_fields_sinkna_set, METH_VARARGS, NULL},
	 { (char *)"fields_sinkna_get", _wrap_fields_sinkna_get, METH_VARARGS, NULL},
	 { (char *)"fields_boundaries_set", _wrap_fields_boundaries_set, METH_VARARGS, NULL},
	 { (char *)"fields_boundaries_get", _wrap_fields_boundaries_get, METH_VARARGS, NULL},
	 { (char *)"fields_outdir_set", _wrap_fields_outdir_set, METH_VARARGS, NULL},
	 { (char *)"fields_outdir_get", _wrap_fields_outdir_get, METH_VARARGS, NULL},
	 { (char *)"fields_components_allocated_set", _wrap_fields_components_allocated_set, METH_VARARGS, NULL},
	 { (char *)"fields_components_allocated_get", _wrap_fields_components_allocated_get, METH_VARARGS, NULL},
	 { (char *)"new_fields", _wrap_new_fields, METH_VARARGS, NULL},
	 { (char *)"delete_fields", _wrap_delete_fields, METH_VARARGS, NULL},
	 { (char *)"fields_equal_layout", _wrap_fields_equal_layout, METH_VARARGS, NULL},
	 { (char *)"fields_use_real_fields", _wrap_fields_use_real_fields, METH_VARARGS, NULL},
	 { (char *)"fields_zero_fields", _wrap_fields_zero_fields, METH_VARARGS, NULL},
	 { (char *)"fields_remove_sources", _wrap_fields_remove_sources, METH_VARARGS, NULL},
	 { (char *)"fields_remove_susceptibilities", _wrap_fields_remove_susceptibilities, METH_VARARGS, NULL},
	 { (char *)"fields_remove_fluxes", _wrap_fields_remove_fluxes, METH_VARARGS, NULL},
	 { (char *)"fields_reset", _wrap_fields_reset, METH_VARARGS, NULL},
	 { (char *)"fields_time_spent_on", _wrap_fields_time_spent_on, METH_VARARGS, NULL},
	 { (char *)"fields_print_times", _wrap_fields_print_times, METH_VARARGS, NULL},
	 { (char *)"fields_set_boundary", _wrap_fields_set_boundary, METH_VARARGS, NULL},
	 { (char *)"fields_use_bloch", _wrap_fields_use_bloch, METH_VARARGS, NULL},
	 { (char *)"fields_lattice_vector", _wrap_fields_lattice_vector, METH_VARARGS, NULL},
	 { (char *)"fields_update_eh", _wrap_fields_update_eh, METH_VARARGS, NULL},
	 { (char *)"fields_total_volume", _wrap_fields_total_volume, METH_VARARGS, NULL},
	 { (char *)"fields_output_hdf5", _wrap_fields_output_hdf5, METH_VARARGS, NULL},
	 { (char *)"fields_open_h5file", _wrap_fields_open_h5file, METH_VARARGS, NULL},
	 { (char *)"fields_h5file_name", _wrap_fields_h5file_name, METH_VARARGS, NULL},
	 { (char *)"fields_get_array_slice_dimensions", _wrap_fields_get_array_slice_dimensions, METH_VARARGS, NULL},
	 { (char *)"fields_get_array_slice", _wrap_fields_get_array_slice, METH_VARARGS, NULL},
	 { (char *)"fields_get_complex_array_slice", _wrap_fields_get_complex_array_slice, METH_VARARGS, NULL},
	 { (char *)"fields_do_get_array_slice", _wrap_fields_do_get_array_slice, METH_VARARGS, NULL},
	 { (char *)"fields_last_step_output_wall_time_set", _wrap_fields_last_step_output_wall_time_set, METH_VARARGS, NULL},
	 { (char *)"fields_last_step_output_wall_time_get", _wrap_fields_last_step_output_wall_time_get, METH_VARARGS, NULL},
	 { (char *)"fields_last_step_output_t_set", _wrap_fields_last_step_output_t_set, METH_VARARGS, NULL},
	 { (char *)"fields_last_step_output_t_get", _wrap_fields_last_step_output_t_get, METH_VARARGS, NULL},
	 { (char *)"fields_step", _wrap_fields_step, METH_VARARGS, NULL},
	 { (char *)"fields_round_time", _wrap_fields_round_time, METH_VARARGS, NULL},
	 { (char *)"fields_time", _wrap_fields_time, METH_VARARGS, NULL},
	 { (char *)"fields_solve_cw", _wrap_fields_solve_cw, METH_VARARGS, NULL},
	 { (char *)"fields_last_source_time", _wrap_fields_last_source_time, METH_VARARGS, NULL},
	 { (char *)"fields_add_point_source", _wrap_fields_add_point_source, METH_VARARGS, NULL},
	 { (char *)"fields_add_volume_source", _wrap_fields_add_volume_source, METH_VARARGS, NULL},
	 { (char *)"fields_require_component", _wrap_fields_require_component, METH_VARARGS, NULL},
	 { (char *)"fields_get_eigenmode", _wrap_fields_get_eigenmode, METH_VARARGS, NULL},
	 { (char *)"fields_add_eigenmode_source", _wrap_fields_add_eigenmode_source, METH_VARARGS, NULL},
	 { (char *)"fields_get_eigenmode_coefficients", _wrap_fields_get_eigenmode_coefficients, METH_VARARGS, NULL},
	 { (char *)"fields_initialize_field", _wrap_fields_initialize_field, METH_VARARGS, NULL},
	 { (char *)"fields_initialize_with_nth_te", _wrap_fields_initialize_with_nth_te, METH_VARARGS, NULL},
	 { (char *)"fields_initialize_with_nth_tm", _wrap_fields_initialize_with_nth_tm, METH_VARARGS, NULL},
	 { (char *)"fields_initialize_with_n_te", _wrap_fields_initialize_with_n_te, METH_VARARGS, NULL},
	 { (char *)"fields_initialize_with_n_tm", _wrap_fields_initialize_with_n_tm, METH_VARARGS, NULL},
	 { (char *)"fields_phase_in_material", _wrap_fields_phase_in_material, METH_VARARGS, NULL},
	 { (char *)"fields_is_phasing", _wrap_fields_is_phasing, METH_VARARGS, NULL},
	 { (char *)"fields_loop_in_chunks", _wrap_fields_loop_in_chunks, METH_VARARGS, NULL},
	 { (char *)"fields_integrate", _wrap_fields_integrate, METH_VARARGS, NULL},
	 { (char *)"fields_integrate2", _wrap_fields_integrate2, METH_VARARGS, NULL},
	 { (char *)"fields_max_abs", _wrap_fields_max_abs, METH_VARARGS, NULL},
	 { (char *)"fields_add_dft_pt", _wrap_fields_add_dft_pt, METH_VARARGS, NULL},
	 { (char *)"fields_add_dft", _wrap_fields_add_dft, METH_VARARGS, NULL},
	 { (char *)"fields_update_dfts", _wrap_fields_update_dfts, METH_VARARGS, NULL},
	 { (char *)"fields_add_dft_flux_box", _wrap_fields_add_dft_flux_box, METH_VARARGS, NULL},
	 { (char *)"fields_add_dft_flux_plane", _wrap_fields_add_dft_flux_plane, METH_VARARGS, NULL},
	 { (char *)"fields_add_dft_flux", _wrap_fields_add_dft_flux, METH_VARARGS, NULL},
	 { (char *)"fields_add_dft_fields", _wrap_fields_add_dft_fields, METH_VARARGS, NULL},
	 { (char *)"fields_process_dft_component", _wrap_fields_process_dft_component, METH_VARARGS, NULL},
	 { (char *)"fields_output_dft_components", _wrap_fields_output_dft_components, METH_VARARGS, NULL},
	 { (char *)"fields_output_dft", _wrap_fields_output_dft, METH_VARARGS, NULL},
	 { (char *)"fields_output_mode_fields", _wrap_fields_output_mode_fields, METH_VARARGS, NULL},
	 { (char *)"fields_get_dft_array", _wrap_fields_get_dft_array, METH_VARARGS, NULL},
	 { (char *)"fields_get_overlap", _wrap_fields_get_overlap, METH_VARARGS, NULL},
	 { (char *)"fields_get_mode_flux_overlap", _wrap_fields_get_mode_flux_overlap, METH_VARARGS, NULL},
	 { (char *)"fields_get_mode_mode_overlap", _wrap_fields_get_mode_mode_overlap, METH_VARARGS, NULL},
	 { (char *)"fields_add_dft_force", _wrap_fields_add_dft_force, METH_VARARGS, NULL},
	 { (char *)"fields_add_dft_near2far", _wrap_fields_add_dft_near2far, METH_VARARGS, NULL},
	 { (char *)"fields_get_inveps", _wrap_fields_get_inveps, METH_VARARGS, NULL},
	 { (char *)"fields_get_eps", _wrap_fields_get_eps, METH_VARARGS, NULL},
	 { (char *)"fields_get_mu", _wrap_fields_get_mu, METH_VARARGS, NULL},
	 { (char *)"fields_get_point", _wrap_fields_get_point, METH_VARARGS, NULL},
	 { (char *)"fields_get_new_point", _wrap_fields_get_new_point, METH_VARARGS, NULL},
	 { (char *)"fields_get_field_from_comp", _wrap_fields_get_field_from_comp, METH_VARARGS, NULL},
	 { (char *)"fields_synchronize_magnetic_fields", _wrap_fields_synchronize_magnetic_fields, METH_VARARGS, NULL},
	 { (char *)"fields_restore_magnetic_fields", _wrap_fields_restore_magnetic_fields, METH_VARARGS, NULL},
	 { (char *)"fields_energy_in_box", _wrap_fields_energy_in_box, METH_VARARGS, NULL},
	 { (char *)"fields_electric_energy_in_box", _wrap_fields_electric_energy_in_box, METH_VARARGS, NULL},
	 { (char *)"fields_magnetic_energy_in_box", _wrap_fields_magnetic_energy_in_box, METH_VARARGS, NULL},
	 { (char *)"fields_thermo_energy_in_box", _wrap_fields_thermo_energy_in_box, METH_VARARGS, NULL},
	 { (char *)"fields_total_energy", _wrap_fields_total_energy, METH_VARARGS, NULL},
	 { (char *)"fields_field_energy_in_box", _wrap_fields_field_energy_in_box, METH_VARARGS, NULL},
	 { (char *)"fields_field_energy", _wrap_fields_field_energy, METH_VARARGS, NULL},
	 { (char *)"fields_flux_in_box_wrongH", _wrap_fields_flux_in_box_wrongH, METH_VARARGS, NULL},
	 { (char *)"fields_flux_in_box", _wrap_fields_flux_in_box, METH_VARARGS, NULL},
	 { (char *)"fields_add_flux_vol", _wrap_fields_add_flux_vol, METH_VARARGS, NULL},
	 { (char *)"fields_add_flux_plane", _wrap_fields_add_flux_plane, METH_VARARGS, NULL},
	 { (char *)"fields_electric_energy_max_in_box", _wrap_fields_electric_energy_max_in_box, METH_VARARGS, NULL},
	 { (char *)"fields_modal_volume_in_box", _wrap_fields_modal_volume_in_box, METH_VARARGS, NULL},
	 { (char *)"fields_electric_sqr_weighted_integral", _wrap_fields_electric_sqr_weighted_integral, METH_VARARGS, NULL},
	 { (char *)"fields_electric_energy_weighted_integral", _wrap_fields_electric_energy_weighted_integral, METH_VARARGS, NULL},
	 { (char *)"fields_set_output_directory", _wrap_fields_set_output_directory, METH_VARARGS, NULL},
	 { (char *)"fields_verbose", _wrap_fields_verbose, METH_VARARGS, NULL},
	 { (char *)"fields_count_volume", _wrap_fields_count_volume, METH_VARARGS, NULL},
	 { (char *)"fields_have_component", _wrap_fields_have_component, METH_VARARGS, NULL},
	 { (char *)"fields_max_eps", _wrap_fields_max_eps, METH_VARARGS, NULL},
	 { (char *)"fields_step_boundaries", _wrap_fields_step_boundaries, METH_VARARGS, NULL},
	 { (char *)"fields_nosize_direction", _wrap_fields_nosize_direction, METH_VARARGS, NULL},
	 { (char *)"fields_normal_direction", _wrap_fields_normal_direction, METH_VARARGS, NULL},
	 { (char *)"fields_casimir_stress_dct_integral", _wrap_fields_casimir_stress_dct_integral, METH_VARARGS, NULL},
	 { (char *)"fields_set_solve_cw_omega", _wrap_fields_set_solve_cw_omega, METH_VARARGS, NULL},
	 { (char *)"fields_unset_solve_cw_omega", _wrap_fields_unset_solve_cw_omega, METH_VARARGS, NULL},
	 { (char *)"fields_get_field", _wrap_fields_get_field, METH_VARARGS, NULL},
	 { (char *)"fields_get_chi1inv", _wrap_fields_get_chi1inv, METH_VARARGS, NULL},
	 { (char *)"fields_locate_component_point", _wrap_fields_locate_component_point, METH_VARARGS, NULL},
	 { (char *)"fields_swigregister", fields_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_flux_vol", _wrap_new_flux_vol, METH_VARARGS, NULL},
	 { (char *)"delete_flux_vol", _wrap_delete_flux_vol, METH_VARARGS, NULL},
	 { (char *)"flux_vol_update_half", _wrap_flux_vol_update_half, METH_VARARGS, NULL},
	 { (char *)"flux_vol_update", _wrap_flux_vol_update, METH_VARARGS, NULL},
	 { (char *)"flux_vol_flux", _wrap_flux_vol_flux, METH_VARARGS, NULL},
	 { (char *)"flux_vol_next_set", _wrap_flux_vol_next_set, METH_VARARGS, NULL},
	 { (char *)"flux_vol_next_get", _wrap_flux_vol_next_get, METH_VARARGS, NULL},
	 { (char *)"flux_vol_swigregister", flux_vol_swigregister, METH_VARARGS, NULL},
	 { (char *)"make_output_directory", _wrap_make_output_directory, METH_VARARGS, NULL},
	 { (char *)"trash_output_directory", _wrap_trash_output_directory, METH_VARARGS, NULL},
	 { (char *)"create_output_file", _wrap_create_output_file, METH_VARARGS, NULL},
	 { (char *)"deal_with_ctrl_c", _wrap_deal_with_ctrl_c, METH_VARARGS, NULL},
	 { (char *)"do_harminv", _wrap_do_harminv, METH_VARARGS, NULL},
	 { (char *)"make_casimir_gfunc", _wrap_make_casimir_gfunc, METH_VARARGS, NULL},
	 { (char *)"make_casimir_gfunc_kz", _wrap_make_casimir_gfunc_kz, METH_VARARGS, NULL},
	 { (char *)"set_random_seed", _wrap_set_random_seed, METH_VARARGS, NULL},
	 { (char *)"uniform_random", _wrap_uniform_random, METH_VARARGS, NULL},
	 { (char *)"gaussian_random", _wrap_gaussian_random, METH_VARARGS, NULL},
	 { (char *)"random_int", _wrap_random_int, METH_VARARGS, NULL},
	 { (char *)"BesselJ", _wrap_BesselJ, METH_VARARGS, NULL},
	 { (char *)"green2d", _wrap_green2d, METH_VARARGS, NULL},
	 { (char *)"green3d", _wrap_green3d, METH_VARARGS, NULL},
	 { (char *)"destroy_eigenmode_data", _wrap_destroy_eigenmode_data, METH_VARARGS, NULL},
	 { (char *)"eigenmode_amplitude", _wrap_eigenmode_amplitude, METH_VARARGS, NULL},
	 { (char *)"get_group_velocity", _wrap_get_group_velocity, METH_VARARGS, NULL},
	 { (char *)"get_k", _wrap_get_k, METH_VARARGS, NULL},
	 { (char *)"wall_time", _wrap_wall_time, METH_VARARGS, NULL},
	 { (char *)"new_initialize", _wrap_new_initialize, METH_VARARGS, NULL},
	 { (char *)"delete_initialize", _wrap_delete_initialize, METH_VARARGS, NULL},
	 { (char *)"initialize_elapsed_time", _wrap_initialize_elapsed_time, METH_VARARGS, NULL},
	 { (char *)"initialize_swigregister", initialize_swigregister, METH_VARARGS, NULL},
	 { (char *)"all_wait", _wrap_all_wait, METH_VARARGS, NULL},
	 { (char *)"count_processors", _wrap_count_processors, METH_VARARGS, NULL},
	 { (char *)"my_rank", _wrap_my_rank, METH_VARARGS, NULL},
	 { (char *)"am_really_master", _wrap_am_really_master, METH_VARARGS, NULL},
	 { (char *)"am_master", _wrap_am_master, METH_VARARGS, NULL},
	 { (char *)"with_mpi", _wrap_with_mpi, METH_VARARGS, NULL},
	 { (char *)"send", _wrap_send, METH_VARARGS, NULL},
	 { (char *)"broadcast", _wrap_broadcast, METH_VARARGS, NULL},
	 { (char *)"max_to_master", _wrap_max_to_master, METH_VARARGS, NULL},
	 { (char *)"max_to_all", _wrap_max_to_all, METH_VARARGS, NULL},
	 { (char *)"partial_sum_to_all", _wrap_partial_sum_to_all, METH_VARARGS, NULL},
	 { (char *)"sum_to_all", _wrap_sum_to_all, METH_VARARGS, NULL},
	 { (char *)"sum_to_master", _wrap_sum_to_master, METH_VARARGS, NULL},
	 { (char *)"or_to_all", _wrap_or_to_all, METH_VARARGS, NULL},
	 { (char *)"and_to_all", _wrap_and_to_all, METH_VARARGS, NULL},
	 { (char *)"master_printf", _wrap_master_printf, METH_VARARGS, NULL},
	 { (char *)"debug_printf", _wrap_debug_printf, METH_VARARGS, NULL},
	 { (char *)"master_fprintf", _wrap_master_fprintf, METH_VARARGS, NULL},
	 { (char *)"master_fopen", _wrap_master_fopen, METH_VARARGS, NULL},
	 { (char *)"master_fclose", _wrap_master_fclose, METH_VARARGS, NULL},
	 { (char *)"begin_critical_section", _wrap_begin_critical_section, METH_VARARGS, NULL},
	 { (char *)"end_critical_section", _wrap_end_critical_section, METH_VARARGS, NULL},
	 { (char *)"divide_parallel_processes", _wrap_divide_parallel_processes, METH_VARARGS, NULL},
	 { (char *)"begin_global_communications", _wrap_begin_global_communications, METH_VARARGS, NULL},
	 { (char *)"end_global_communications", _wrap_end_global_communications, METH_VARARGS, NULL},
	 { (char *)"end_divide_parallel", _wrap_end_divide_parallel, METH_VARARGS, NULL},
	 { (char *)"my_global_rank", _wrap_my_global_rank, METH_VARARGS, NULL},
	 { (char *)"dft_data_num_freqs_set", _wrap_dft_data_num_freqs_set, METH_VARARGS, NULL},
	 { (char *)"dft_data_num_freqs_get", _wrap_dft_data_num_freqs_get, METH_VARARGS, NULL},
	 { (char *)"dft_data_num_components_set", _wrap_dft_data_num_components_set, METH_VARARGS, NULL},
	 { (char *)"dft_data_num_components_get", _wrap_dft_data_num_components_get, METH_VARARGS, NULL},
	 { (char *)"dft_data_vols_set", _wrap_dft_data_vols_set, METH_VARARGS, NULL},
	 { (char *)"dft_data_vols_get", _wrap_dft_data_vols_get, METH_VARARGS, NULL},
	 { (char *)"new_dft_data", _wrap_new_dft_data, METH_VARARGS, NULL},
	 { (char *)"delete_dft_data", _wrap_delete_dft_data, METH_VARARGS, NULL},
	 { (char *)"dft_data_swigregister", dft_data_swigregister, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_tol_get", _wrap_fragment_stats_tol_get, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_tol_set", _wrap_fragment_stats_tol_set, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_maxeval_get", _wrap_fragment_stats_maxeval_get, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_maxeval_set", _wrap_fragment_stats_maxeval_set, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_resolution_get", _wrap_fragment_stats_resolution_get, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_resolution_set", _wrap_fragment_stats_resolution_set, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_dims_get", _wrap_fragment_stats_dims_get, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_dims_set", _wrap_fragment_stats_dims_set, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_num_anisotropic_eps_pixels_set", _wrap_fragment_stats_num_anisotropic_eps_pixels_set, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_num_anisotropic_eps_pixels_get", _wrap_fragment_stats_num_anisotropic_eps_pixels_get, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_num_anisotropic_mu_pixels_set", _wrap_fragment_stats_num_anisotropic_mu_pixels_set, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_num_anisotropic_mu_pixels_get", _wrap_fragment_stats_num_anisotropic_mu_pixels_get, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_num_nonlinear_pixels_set", _wrap_fragment_stats_num_nonlinear_pixels_set, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_num_nonlinear_pixels_get", _wrap_fragment_stats_num_nonlinear_pixels_get, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_num_susceptibility_pixels_set", _wrap_fragment_stats_num_susceptibility_pixels_set, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_num_susceptibility_pixels_get", _wrap_fragment_stats_num_susceptibility_pixels_get, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_num_nonzero_conductivity_pixels_set", _wrap_fragment_stats_num_nonzero_conductivity_pixels_set, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_num_nonzero_conductivity_pixels_get", _wrap_fragment_stats_num_nonzero_conductivity_pixels_get, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_num_dft_pixels_set", _wrap_fragment_stats_num_dft_pixels_set, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_num_dft_pixels_get", _wrap_fragment_stats_num_dft_pixels_get, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_num_pixels_in_box_set", _wrap_fragment_stats_num_pixels_in_box_set, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_num_pixels_in_box_get", _wrap_fragment_stats_num_pixels_in_box_get, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_box_set", _wrap_fragment_stats_box_set, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_box_get", _wrap_fragment_stats_box_get, METH_VARARGS, NULL},
	 { (char *)"new_fragment_stats", _wrap_new_fragment_stats, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_update_stats_from_material", _wrap_fragment_stats_update_stats_from_material, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_compute_stats", _wrap_fragment_stats_compute_stats, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_count_anisotropic_pixels", _wrap_fragment_stats_count_anisotropic_pixels, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_count_nonlinear_pixels", _wrap_fragment_stats_count_nonlinear_pixels, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_count_susceptibility_pixels", _wrap_fragment_stats_count_susceptibility_pixels, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_count_nonzero_conductivity_pixels", _wrap_fragment_stats_count_nonzero_conductivity_pixels, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_compute_dft_stats", _wrap_fragment_stats_compute_dft_stats, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_print_stats", _wrap_fragment_stats_print_stats, METH_VARARGS, NULL},
	 { (char *)"delete_fragment_stats", _wrap_delete_fragment_stats, METH_VARARGS, NULL},
	 { (char *)"fragment_stats_swigregister", fragment_stats_swigregister, METH_VARARGS, NULL},
	 { (char *)"compute_fragment_stats", _wrap_compute_fragment_stats, METH_VARARGS, NULL},
	 { (char *)"absorber_thickness_set", _wrap_absorber_thickness_set, METH_VARARGS, NULL},
	 { (char *)"absorber_thickness_get", _wrap_absorber_thickness_get, METH_VARARGS, NULL},
	 { (char *)"absorber_direction_set", _wrap_absorber_direction_set, METH_VARARGS, NULL},
	 { (char *)"absorber_direction_get", _wrap_absorber_direction_get, METH_VARARGS, NULL},
	 { (char *)"absorber_side_set", _wrap_absorber_side_set, METH_VARARGS, NULL},
	 { (char *)"absorber_side_get", _wrap_absorber_side_get, METH_VARARGS, NULL},
	 { (char *)"absorber_R_asymptotic_set", _wrap_absorber_R_asymptotic_set, METH_VARARGS, NULL},
	 { (char *)"absorber_R_asymptotic_get", _wrap_absorber_R_asymptotic_get, METH_VARARGS, NULL},
	 { (char *)"absorber_mean_stretch_set", _wrap_absorber_mean_stretch_set, METH_VARARGS, NULL},
	 { (char *)"absorber_mean_stretch_get", _wrap_absorber_mean_stretch_get, METH_VARARGS, NULL},
	 { (char *)"absorber_pml_profile_set", _wrap_absorber_pml_profile_set, METH_VARARGS, NULL},
	 { (char *)"absorber_pml_profile_get", _wrap_absorber_pml_profile_get, METH_VARARGS, NULL},
	 { (char *)"absorber_pml_profile_data_set", _wrap_absorber_pml_profile_data_set, METH_VARARGS, NULL},
	 { (char *)"absorber_pml_profile_data_get", _wrap_absorber_pml_profile_data_get, METH_VARARGS, NULL},
	 { (char *)"new_absorber", _wrap_new_absorber, METH_VARARGS, NULL},
	 { (char *)"delete_absorber", _wrap_delete_absorber, METH_VARARGS, NULL},
	 { (char *)"absorber_swigregister", absorber_swigregister, METH_VARARGS, NULL},
	 { (char *)"create_absorber_list", _wrap_create_absorber_list, METH_VARARGS, NULL},
	 { (char *)"destroy_absorber_list", _wrap_destroy_absorber_list, METH_VARARGS, NULL},
	 { (char *)"add_absorbing_layer", _wrap_add_absorbing_layer, METH_VARARGS, NULL},
	 { (char *)"set_dimensions", _wrap_set_dimensions, METH_VARARGS, NULL},
	 { (char *)"set_materials_from_geometry", _wrap_set_materials_from_geometry, METH_VARARGS, NULL},
	 { (char *)"make_dielectric", _wrap_make_dielectric, METH_VARARGS, NULL},
	 { (char *)"make_user_material", _wrap_make_user_material, METH_VARARGS, NULL},
	 { (char *)"make_file_material", _wrap_make_file_material, METH_VARARGS, NULL},
	 { (char *)"vec_to_vector3", _wrap_vec_to_vector3, METH_VARARGS, NULL},
	 { (char *)"vector3_to_vec", _wrap_vector3_to_vec, METH_VARARGS, NULL},
	 { (char *)"linear_interpolate", _wrap_linear_interpolate, METH_VARARGS, NULL},
	 { (char *)"epsilon_file_material", _wrap_epsilon_file_material, METH_VARARGS, NULL},
	 { (char *)"check_offdiag", _wrap_check_offdiag, METH_VARARGS, NULL},
	 { (char *)"set_geometry_from_GDSII", _wrap_set_geometry_from_GDSII, METH_VARARGS, NULL},
	 { (char *)"get_GDSII_prism", _wrap_get_GDSII_prism, METH_VARARGS, NULL},
	 { (char *)"get_GDSII_volume", _wrap_get_GDSII_volume, METH_VARARGS, NULL},
	 { (char *)"vector3_x_set", _wrap_vector3_x_set, METH_VARARGS, NULL},
	 { (char *)"vector3_x_get", _wrap_vector3_x_get, METH_VARARGS, NULL},
	 { (char *)"vector3_y_set", _wrap_vector3_y_set, METH_VARARGS, NULL},
	 { (char *)"vector3_y_get", _wrap_vector3_y_get, METH_VARARGS, NULL},
	 { (char *)"vector3_z_set", _wrap_vector3_z_set, METH_VARARGS, NULL},
	 { (char *)"vector3_z_get", _wrap_vector3_z_get, METH_VARARGS, NULL},
	 { (char *)"new_vector3", _wrap_new_vector3, METH_VARARGS, NULL},
	 { (char *)"delete_vector3", _wrap_delete_vector3, METH_VARARGS, NULL},
	 { (char *)"vector3_swigregister", vector3_swigregister, METH_VARARGS, NULL},
	 { (char *)"geom_box_low_set", _wrap_geom_box_low_set, METH_VARARGS, NULL},
	 { (char *)"geom_box_low_get", _wrap_geom_box_low_get, METH_VARARGS, NULL},
	 { (char *)"geom_box_high_set", _wrap_geom_box_high_set, METH_VARARGS, NULL},
	 { (char *)"geom_box_high_get", _wrap_geom_box_high_get, METH_VARARGS, NULL},
	 { (char *)"new_geom_box", _wrap_new_geom_box, METH_VARARGS, NULL},
	 { (char *)"delete_geom_box", _wrap_delete_geom_box, METH_VARARGS, NULL},
	 { (char *)"geom_box_swigregister", geom_box_swigregister, METH_VARARGS, NULL},
	 { (char *)"is_point_in_object", _wrap_is_point_in_object, METH_VARARGS, NULL},
	 { (char *)"is_point_in_periodic_object", _wrap_is_point_in_periodic_object, METH_VARARGS, NULL},
	 { (char *)"display_geometric_object_info", _wrap_display_geometric_object_info, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_meep__lorentzian_susceptibilityTo_p_meep__susceptibility(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((meep::susceptibility *)  ((meep::lorentzian_susceptibility *) x));
}
static void *_p_meep__noisy_lorentzian_susceptibilityTo_p_meep__susceptibility(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((meep::susceptibility *) (meep::lorentzian_susceptibility *) ((meep::noisy_lorentzian_susceptibility *) x));
}
static void *_p_meep__multilevel_susceptibilityTo_p_meep__susceptibility(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((meep::susceptibility *)  ((meep::multilevel_susceptibility *) x));
}
static void *_p_meep__noisy_lorentzian_susceptibilityTo_p_meep__lorentzian_susceptibility(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((meep::lorentzian_susceptibility *)  ((meep::noisy_lorentzian_susceptibility *) x));
}
static void *_p_p_meep__lorentzian_susceptibilityTo_p_p_meep__susceptibility(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((meep::susceptibility **)  ((meep::lorentzian_susceptibility **) x));
}
static void *_p_p_meep__noisy_lorentzian_susceptibilityTo_p_p_meep__susceptibility(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((meep::susceptibility **) (meep::lorentzian_susceptibility *) ((meep::noisy_lorentzian_susceptibility **) x));
}
static void *_p_p_meep__multilevel_susceptibilityTo_p_p_meep__susceptibility(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((meep::susceptibility **)  ((meep::multilevel_susceptibility **) x));
}
static void *_p_meep__simple_material_functionTo_p_meep__material_function(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((meep::material_function *)  ((meep::simple_material_function *) x));
}
static void *_p_meep__gaussian_src_timeTo_p_meep__src_time(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((meep::src_time *)  ((meep::gaussian_src_time *) x));
}
static void *_p_meep__continuous_src_timeTo_p_meep__src_time(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((meep::src_time *)  ((meep::continuous_src_time *) x));
}
static void *_p_meep__custom_src_timeTo_p_meep__src_time(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((meep::src_time *)  ((meep::custom_src_time *) x));
}
static void *_p_p_meep__gaussian_src_timeTo_p_p_meep__src_time(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((meep::src_time **)  ((meep::gaussian_src_time **) x));
}
static void *_p_p_meep__continuous_src_timeTo_p_p_meep__src_time(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((meep::src_time **)  ((meep::continuous_src_time **) x));
}
static void *_p_p_meep__custom_src_timeTo_p_p_meep__src_time(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((meep::src_time **)  ((meep::custom_src_time **) x));
}
static swig_type_info _swigt__p_FILE = {"_p_FILE", "FILE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GEOMETRIC_OBJECT = {"_p_GEOMETRIC_OBJECT", "GEOMETRIC_OBJECT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_2__p_double = {"_p_a_2__p_double", "double *(*)[2]|meep::realnum *(*)[2]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_5__bool = {"_p_a_5__bool", "bool (*)[5]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_5__meep__boundary_condition = {"_p_a_5__meep__boundary_condition", "enum meep::boundary_condition (*)[5]|meep::boundary_condition (*)[5]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_5__p_double = {"_p_a_5__p_double", "double *(*)[5]|meep::realnum *(*)[5]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_meep__CONNECT_COPY_1__a_meep__Outgoing_1__p_p_double = {"_p_a_meep__CONNECT_COPY_1__a_meep__Outgoing_1__p_p_double", "double **(*)[meep::CONNECT_COPY+1][meep::Outgoing+1]|meep::realnum **(*)[meep::CONNECT_COPY+1][meep::Outgoing+1]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_meep__CONNECT_COPY_1__a_meep__Outgoing_1__size_t = {"_p_a_meep__CONNECT_COPY_1__a_meep__Outgoing_1__size_t", "size_t (*)[meep::CONNECT_COPY+1][meep::Outgoing+1]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_meep__CONNECT_COPY_1__p_size_t = {"_p_a_meep__CONNECT_COPY_1__p_size_t", "size_t *(*)[meep::CONNECT_COPY+1]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_access_mode = {"_p_access_mode", "access_mode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boundary_region_kind = {"_p_boundary_region_kind", "boundary_region_kind *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "meep::realnum *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_double_int_p_void__meep__vec = {"_p_f_double_int_p_void__meep__vec", "meep::kpoint_func|meep::vec (*)(double,int,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_double_p_void__double = {"_p_f_double_p_void__double", "double (*)(double,void *)|meep::pml_profile_func", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_meep__fields_chunk_int_enum_meep__component_meep__ivec_meep__ivec_meep__vec_meep__vec_meep__vec_meep__vec_double_double_meep__ivec_std__complex__double___r_q_const__meep__symmetry_int_p_void__void = {"_p_f_p_meep__fields_chunk_int_enum_meep__component_meep__ivec_meep__ivec_meep__vec_meep__vec_meep__vec_meep__vec_double_double_meep__ivec_std__complex__double___r_q_const__meep__symmetry_int_p_void__void", "void (*)(meep::fields_chunk *,int,enum meep::component,meep::ivec,meep::ivec,meep::vec,meep::vec,meep::vec,meep::vec,double,double,meep::ivec,std::complex< double >,meep::symmetry const &,int,void *)|meep::field_chunkloop", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double = {"_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double", "double (*)(std::complex< double > const *,meep::vec const &,void *)|meep::field_rfunction", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__std__complexT_double_t = {"_p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__std__complexT_double_t", "meep::field_function|std::complex< double > (*)(std::complex< double > const *,meep::vec const &,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_std__complex__double____std__complexT_double_t = {"_p_f_std__complex__double____std__complexT_double_t", "std::complex< double > (*)(std::complex< double >)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_geom_box = {"_p_geom_box", "geom_box *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_geometric_object = {"_p_geometric_object", "geometric_object *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_geometric_object_list = {"_p_geometric_object_list", "geometric_object_list *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_double = {"_p_long_double", "long double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_material_data = {"_p_material_data", "material_data *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_material_type = {"_p_material_type", "material_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_medium_struct = {"_p_medium_struct", "medium_struct *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__boundary_region = {"_p_meep__boundary_region", "meep::boundary_region *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__component = {"_p_meep__component", "enum meep::component *|meep::component *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__continuous_src_time = {"_p_meep__continuous_src_time", "meep::continuous_src_time *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__custom_src_time = {"_p_meep__custom_src_time", "meep::custom_src_time *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__dft_chunk = {"_p_meep__dft_chunk", "meep::dft_chunk *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__dft_fields = {"_p_meep__dft_fields", "meep::dft_fields *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__dft_flux = {"_p_meep__dft_flux", "meep::dft_flux *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__dft_force = {"_p_meep__dft_force", "meep::dft_force *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__dft_ldos = {"_p_meep__dft_ldos", "meep::dft_ldos *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__dft_near2far = {"_p_meep__dft_near2far", "meep::dft_near2far *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__direction = {"_p_meep__direction", "enum meep::direction *|meep::direction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__fields = {"_p_meep__fields", "meep::fields *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__fields_chunk = {"_p_meep__fields_chunk", "meep::fields_chunk *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__flux_vol = {"_p_meep__flux_vol", "meep::flux_vol *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__gaussian_src_time = {"_p_meep__gaussian_src_time", "meep::gaussian_src_time *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__grid_volume = {"_p_meep__grid_volume", "meep::grid_volume *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__h5file = {"_p_meep__h5file", "meep::h5file *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__h5file__extending_s = {"_p_meep__h5file__extending_s", "meep::h5file::extending_s *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__initialize = {"_p_meep__initialize", "meep::initialize *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__ivec = {"_p_meep__ivec", "meep::ivec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__lorentzian_susceptibility = {"_p_meep__lorentzian_susceptibility", "meep::lorentzian_susceptibility *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__material_function = {"_p_meep__material_function", "meep::material_function *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__monitor_point = {"_p_meep__monitor_point", "meep::monitor_point *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__multilevel_susceptibility = {"_p_meep__multilevel_susceptibility", "meep::multilevel_susceptibility *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__noisy_lorentzian_susceptibility = {"_p_meep__noisy_lorentzian_susceptibility", "meep::noisy_lorentzian_susceptibility *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__polarization_state_s = {"_p_meep__polarization_state_s", "meep::polarization_state_s *|meep::polarization_state *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__signed_direction = {"_p_meep__signed_direction", "meep::signed_direction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__simple_material_function = {"_p_meep__simple_material_function", "meep::simple_material_function *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__src_time = {"_p_meep__src_time", "meep::src_time *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__structure = {"_p_meep__structure", "meep::structure *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__structure_chunk = {"_p_meep__structure_chunk", "meep::structure_chunk *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__susceptibility = {"_p_meep__susceptibility", "meep::susceptibility *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__symmetry = {"_p_meep__symmetry", "meep::symmetry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__vec = {"_p_meep__vec", "meep::vec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__volume = {"_p_meep__volume", "meep::volume *|std::vector< meep::volume >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep__volume_list = {"_p_meep__volume_list", "meep::volume_list *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep_geom__absorber = {"_p_meep_geom__absorber", "meep_geom::absorber *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep_geom__dft_data = {"_p_meep_geom__dft_data", "std::vector< meep_geom::dft_data >::value_type *|meep_geom::dft_data *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_meep_geom__fragment_stats = {"_p_meep_geom__fragment_stats", "std::vector< meep_geom::fragment_stats >::value_type *|meep_geom::fragment_stats *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_double = {"_p_p_double", "meep::realnum **|double **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_meep__dft_chunk = {"_p_p_meep__dft_chunk", "meep::dft_chunk **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_meep__fields_chunk = {"_p_p_meep__fields_chunk", "meep::fields_chunk **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_meep__polarization_state_s = {"_p_p_meep__polarization_state_s", "meep::polarization_state **|meep::polarization_state_s **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_meep__src_time = {"_p_p_meep__src_time", "meep::src_time **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_meep__gaussian_src_time = {"_p_p_meep__gaussian_src_time", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_meep__continuous_src_time = {"_p_p_meep__continuous_src_time", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_meep__custom_src_time = {"_p_p_meep__custom_src_time", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_meep__src_vol = {"_p_p_meep__src_vol", "meep::src_vol **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_meep__structure_chunk = {"_p_p_meep__structure_chunk", "meep::structure_chunk **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_meep__susceptibility = {"_p_p_meep__susceptibility", "meep::susceptibility **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_meep__lorentzian_susceptibility = {"_p_p_meep__lorentzian_susceptibility", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_meep__noisy_lorentzian_susceptibility = {"_p_p_meep__noisy_lorentzian_susceptibility", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_meep__multilevel_susceptibility = {"_p_p_meep__multilevel_susceptibility", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_p_char = {"_p_p_p_char", "char ***", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_p_double = {"_p_p_p_double", "meep::realnum ***|double ***", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_std__complexT_double_t = {"_p_p_std__complexT_double_t", "std::complex< meep::realnum > **|std::complex< double > **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ptrdiff_t = {"_p_ptrdiff_t", "ptrdiff_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_double_t = {"_p_std__allocatorT_double_t", "std::vector< double >::allocator_type *|std::allocator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_int_t = {"_p_std__allocatorT_int_t", "std::vector< int >::allocator_type *|std::allocator< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_meep__volume_t = {"_p_std__allocatorT_meep__volume_t", "std::allocator< meep::volume > *|std::vector< meep::volume >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_meep_geom__dft_data_t = {"_p_std__allocatorT_meep_geom__dft_data_t", "std::vector< meep_geom::dft_data >::allocator_type *|std::allocator< meep_geom::dft_data > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_meep_geom__fragment_stats_t = {"_p_std__allocatorT_meep_geom__fragment_stats_t", "std::allocator< meep_geom::fragment_stats > *|std::vector< meep_geom::fragment_stats >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "std::complex< meep::realnum > *|meep_geom::cdouble *|std::complex< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_float_t = {"_p_std__complexT_float_t", "std::complex< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_long_double_t = {"_p_std__complexT_long_double_t", "std::complex< long double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *|std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_meep__component_std__allocatorT_meep__component_t_t = {"_p_std__vectorT_meep__component_std__allocatorT_meep__component_t_t", "std::vector< meep::component,std::allocator< meep::component > > *|std::vector< enum meep::component,std::allocator< enum meep::component > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t = {"_p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t", "std::vector< meep::volume > *|std::vector< meep::volume,std::allocator< meep::volume > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_meep_geom__absorber_std__allocatorT_meep_geom__absorber_t_t = {"_p_std__vectorT_meep_geom__absorber_std__allocatorT_meep_geom__absorber_t_t", "meep_geom::absorber_list_type *|meep_geom::absorber_list|std::vector< meep_geom::absorber,std::allocator< meep_geom::absorber > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t = {"_p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t", "std::vector< meep_geom::dft_data,std::allocator< meep_geom::dft_data > > *|std::vector< meep_geom::dft_data > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t = {"_p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t", "std::vector< meep_geom::fragment_stats > *|std::vector< meep_geom::fragment_stats,std::allocator< meep_geom::fragment_stats > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_user_material_func = {"_p_user_material_func", "user_material_func *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vector3 = {"_p_vector3", "vector3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_FILE,
  &_swigt__p_GEOMETRIC_OBJECT,
  &_swigt__p_a_2__p_double,
  &_swigt__p_a_5__bool,
  &_swigt__p_a_5__meep__boundary_condition,
  &_swigt__p_a_5__p_double,
  &_swigt__p_a_meep__CONNECT_COPY_1__a_meep__Outgoing_1__p_p_double,
  &_swigt__p_a_meep__CONNECT_COPY_1__a_meep__Outgoing_1__size_t,
  &_swigt__p_a_meep__CONNECT_COPY_1__p_size_t,
  &_swigt__p_access_mode,
  &_swigt__p_allocator_type,
  &_swigt__p_bool,
  &_swigt__p_boundary_region_kind,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_f_double_int_p_void__meep__vec,
  &_swigt__p_f_double_p_void__double,
  &_swigt__p_f_p_meep__fields_chunk_int_enum_meep__component_meep__ivec_meep__ivec_meep__vec_meep__vec_meep__vec_meep__vec_double_double_meep__ivec_std__complex__double___r_q_const__meep__symmetry_int_p_void__void,
  &_swigt__p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double,
  &_swigt__p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__std__complexT_double_t,
  &_swigt__p_f_std__complex__double____std__complexT_double_t,
  &_swigt__p_float,
  &_swigt__p_geom_box,
  &_swigt__p_geometric_object,
  &_swigt__p_geometric_object_list,
  &_swigt__p_int,
  &_swigt__p_long_double,
  &_swigt__p_material_data,
  &_swigt__p_material_type,
  &_swigt__p_medium_struct,
  &_swigt__p_meep__boundary_region,
  &_swigt__p_meep__component,
  &_swigt__p_meep__continuous_src_time,
  &_swigt__p_meep__custom_src_time,
  &_swigt__p_meep__dft_chunk,
  &_swigt__p_meep__dft_fields,
  &_swigt__p_meep__dft_flux,
  &_swigt__p_meep__dft_force,
  &_swigt__p_meep__dft_ldos,
  &_swigt__p_meep__dft_near2far,
  &_swigt__p_meep__direction,
  &_swigt__p_meep__fields,
  &_swigt__p_meep__fields_chunk,
  &_swigt__p_meep__flux_vol,
  &_swigt__p_meep__gaussian_src_time,
  &_swigt__p_meep__grid_volume,
  &_swigt__p_meep__h5file,
  &_swigt__p_meep__h5file__extending_s,
  &_swigt__p_meep__initialize,
  &_swigt__p_meep__ivec,
  &_swigt__p_meep__lorentzian_susceptibility,
  &_swigt__p_meep__material_function,
  &_swigt__p_meep__monitor_point,
  &_swigt__p_meep__multilevel_susceptibility,
  &_swigt__p_meep__noisy_lorentzian_susceptibility,
  &_swigt__p_meep__polarization_state_s,
  &_swigt__p_meep__signed_direction,
  &_swigt__p_meep__simple_material_function,
  &_swigt__p_meep__src_time,
  &_swigt__p_meep__structure,
  &_swigt__p_meep__structure_chunk,
  &_swigt__p_meep__susceptibility,
  &_swigt__p_meep__symmetry,
  &_swigt__p_meep__vec,
  &_swigt__p_meep__volume,
  &_swigt__p_meep__volume_list,
  &_swigt__p_meep_geom__absorber,
  &_swigt__p_meep_geom__dft_data,
  &_swigt__p_meep_geom__fragment_stats,
  &_swigt__p_p_PyObject,
  &_swigt__p_p_double,
  &_swigt__p_p_meep__continuous_src_time,
  &_swigt__p_p_meep__custom_src_time,
  &_swigt__p_p_meep__dft_chunk,
  &_swigt__p_p_meep__fields_chunk,
  &_swigt__p_p_meep__gaussian_src_time,
  &_swigt__p_p_meep__lorentzian_susceptibility,
  &_swigt__p_p_meep__multilevel_susceptibility,
  &_swigt__p_p_meep__noisy_lorentzian_susceptibility,
  &_swigt__p_p_meep__polarization_state_s,
  &_swigt__p_p_meep__src_time,
  &_swigt__p_p_meep__src_vol,
  &_swigt__p_p_meep__structure_chunk,
  &_swigt__p_p_meep__susceptibility,
  &_swigt__p_p_p_char,
  &_swigt__p_p_p_double,
  &_swigt__p_p_std__complexT_double_t,
  &_swigt__p_ptrdiff_t,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_double_t,
  &_swigt__p_std__allocatorT_int_t,
  &_swigt__p_std__allocatorT_meep__volume_t,
  &_swigt__p_std__allocatorT_meep_geom__dft_data_t,
  &_swigt__p_std__allocatorT_meep_geom__fragment_stats_t,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__complexT_float_t,
  &_swigt__p_std__complexT_long_double_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_meep__component_std__allocatorT_meep__component_t_t,
  &_swigt__p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t,
  &_swigt__p_std__vectorT_meep_geom__absorber_std__allocatorT_meep_geom__absorber_t_t,
  &_swigt__p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t,
  &_swigt__p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_user_material_func,
  &_swigt__p_value_type,
  &_swigt__p_vector3,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_FILE[] = {  {&_swigt__p_FILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GEOMETRIC_OBJECT[] = {  {&_swigt__p_GEOMETRIC_OBJECT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_2__p_double[] = {  {&_swigt__p_a_2__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_5__bool[] = {  {&_swigt__p_a_5__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_5__meep__boundary_condition[] = {  {&_swigt__p_a_5__meep__boundary_condition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_5__p_double[] = {  {&_swigt__p_a_5__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_meep__CONNECT_COPY_1__a_meep__Outgoing_1__p_p_double[] = {  {&_swigt__p_a_meep__CONNECT_COPY_1__a_meep__Outgoing_1__p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_meep__CONNECT_COPY_1__a_meep__Outgoing_1__size_t[] = {  {&_swigt__p_a_meep__CONNECT_COPY_1__a_meep__Outgoing_1__size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_meep__CONNECT_COPY_1__p_size_t[] = {  {&_swigt__p_a_meep__CONNECT_COPY_1__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_access_mode[] = {  {&_swigt__p_access_mode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boundary_region_kind[] = {  {&_swigt__p_boundary_region_kind, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_double_int_p_void__meep__vec[] = {  {&_swigt__p_f_double_int_p_void__meep__vec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_double_p_void__double[] = {  {&_swigt__p_f_double_p_void__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_meep__fields_chunk_int_enum_meep__component_meep__ivec_meep__ivec_meep__vec_meep__vec_meep__vec_meep__vec_double_double_meep__ivec_std__complex__double___r_q_const__meep__symmetry_int_p_void__void[] = {  {&_swigt__p_f_p_meep__fields_chunk_int_enum_meep__component_meep__ivec_meep__ivec_meep__vec_meep__vec_meep__vec_meep__vec_double_double_meep__ivec_std__complex__double___r_q_const__meep__symmetry_int_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double[] = {  {&_swigt__p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__std__complexT_double_t[] = {  {&_swigt__p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_std__complex__double____std__complexT_double_t[] = {  {&_swigt__p_f_std__complex__double____std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_geom_box[] = {  {&_swigt__p_geom_box, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_geometric_object[] = {  {&_swigt__p_geometric_object, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_geometric_object_list[] = {  {&_swigt__p_geometric_object_list, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_double[] = {  {&_swigt__p_long_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_material_data[] = {  {&_swigt__p_material_data, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_material_type[] = {  {&_swigt__p_material_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_medium_struct[] = {  {&_swigt__p_medium_struct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__boundary_region[] = {  {&_swigt__p_meep__boundary_region, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__component[] = {  {&_swigt__p_meep__component, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__continuous_src_time[] = {  {&_swigt__p_meep__continuous_src_time, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__custom_src_time[] = {  {&_swigt__p_meep__custom_src_time, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__dft_chunk[] = {  {&_swigt__p_meep__dft_chunk, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__dft_fields[] = {  {&_swigt__p_meep__dft_fields, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__dft_flux[] = {  {&_swigt__p_meep__dft_flux, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__dft_force[] = {  {&_swigt__p_meep__dft_force, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__dft_ldos[] = {  {&_swigt__p_meep__dft_ldos, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__dft_near2far[] = {  {&_swigt__p_meep__dft_near2far, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__direction[] = {  {&_swigt__p_meep__direction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__fields[] = {  {&_swigt__p_meep__fields, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__fields_chunk[] = {  {&_swigt__p_meep__fields_chunk, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__flux_vol[] = {  {&_swigt__p_meep__flux_vol, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__gaussian_src_time[] = {  {&_swigt__p_meep__gaussian_src_time, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__grid_volume[] = {  {&_swigt__p_meep__grid_volume, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__h5file[] = {  {&_swigt__p_meep__h5file, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__h5file__extending_s[] = {  {&_swigt__p_meep__h5file__extending_s, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__initialize[] = {  {&_swigt__p_meep__initialize, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__ivec[] = {  {&_swigt__p_meep__ivec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__lorentzian_susceptibility[] = {  {&_swigt__p_meep__lorentzian_susceptibility, 0, 0, 0},  {&_swigt__p_meep__noisy_lorentzian_susceptibility, _p_meep__noisy_lorentzian_susceptibilityTo_p_meep__lorentzian_susceptibility, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__material_function[] = {  {&_swigt__p_meep__material_function, 0, 0, 0},  {&_swigt__p_meep__simple_material_function, _p_meep__simple_material_functionTo_p_meep__material_function, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__monitor_point[] = {  {&_swigt__p_meep__monitor_point, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__multilevel_susceptibility[] = {  {&_swigt__p_meep__multilevel_susceptibility, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__noisy_lorentzian_susceptibility[] = {  {&_swigt__p_meep__noisy_lorentzian_susceptibility, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__polarization_state_s[] = {  {&_swigt__p_meep__polarization_state_s, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__signed_direction[] = {  {&_swigt__p_meep__signed_direction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__simple_material_function[] = {  {&_swigt__p_meep__simple_material_function, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__src_time[] = {  {&_swigt__p_meep__src_time, 0, 0, 0},  {&_swigt__p_meep__gaussian_src_time, _p_meep__gaussian_src_timeTo_p_meep__src_time, 0, 0},  {&_swigt__p_meep__continuous_src_time, _p_meep__continuous_src_timeTo_p_meep__src_time, 0, 0},  {&_swigt__p_meep__custom_src_time, _p_meep__custom_src_timeTo_p_meep__src_time, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__structure[] = {  {&_swigt__p_meep__structure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__structure_chunk[] = {  {&_swigt__p_meep__structure_chunk, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__susceptibility[] = {  {&_swigt__p_meep__susceptibility, 0, 0, 0},  {&_swigt__p_meep__lorentzian_susceptibility, _p_meep__lorentzian_susceptibilityTo_p_meep__susceptibility, 0, 0},  {&_swigt__p_meep__noisy_lorentzian_susceptibility, _p_meep__noisy_lorentzian_susceptibilityTo_p_meep__susceptibility, 0, 0},  {&_swigt__p_meep__multilevel_susceptibility, _p_meep__multilevel_susceptibilityTo_p_meep__susceptibility, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__symmetry[] = {  {&_swigt__p_meep__symmetry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__vec[] = {  {&_swigt__p_meep__vec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__volume[] = {  {&_swigt__p_meep__volume, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep__volume_list[] = {  {&_swigt__p_meep__volume_list, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep_geom__absorber[] = {  {&_swigt__p_meep_geom__absorber, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep_geom__dft_data[] = {  {&_swigt__p_meep_geom__dft_data, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_meep_geom__fragment_stats[] = {  {&_swigt__p_meep_geom__fragment_stats, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_double[] = {  {&_swigt__p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_meep__dft_chunk[] = {  {&_swigt__p_p_meep__dft_chunk, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_meep__fields_chunk[] = {  {&_swigt__p_p_meep__fields_chunk, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_meep__polarization_state_s[] = {  {&_swigt__p_p_meep__polarization_state_s, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_meep__gaussian_src_time[] = {{&_swigt__p_p_meep__gaussian_src_time, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_meep__continuous_src_time[] = {{&_swigt__p_p_meep__continuous_src_time, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_meep__custom_src_time[] = {{&_swigt__p_p_meep__custom_src_time, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_meep__src_time[] = {  {&_swigt__p_p_meep__src_time, 0, 0, 0},  {&_swigt__p_p_meep__gaussian_src_time, _p_p_meep__gaussian_src_timeTo_p_p_meep__src_time, 0, 0},  {&_swigt__p_p_meep__continuous_src_time, _p_p_meep__continuous_src_timeTo_p_p_meep__src_time, 0, 0},  {&_swigt__p_p_meep__custom_src_time, _p_p_meep__custom_src_timeTo_p_p_meep__src_time, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_meep__src_vol[] = {  {&_swigt__p_p_meep__src_vol, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_meep__structure_chunk[] = {  {&_swigt__p_p_meep__structure_chunk, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_meep__lorentzian_susceptibility[] = {{&_swigt__p_p_meep__lorentzian_susceptibility, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_meep__noisy_lorentzian_susceptibility[] = {{&_swigt__p_p_meep__noisy_lorentzian_susceptibility, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_meep__multilevel_susceptibility[] = {{&_swigt__p_p_meep__multilevel_susceptibility, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_meep__susceptibility[] = {  {&_swigt__p_p_meep__susceptibility, 0, 0, 0},  {&_swigt__p_p_meep__lorentzian_susceptibility, _p_p_meep__lorentzian_susceptibilityTo_p_p_meep__susceptibility, 0, 0},  {&_swigt__p_p_meep__noisy_lorentzian_susceptibility, _p_p_meep__noisy_lorentzian_susceptibilityTo_p_p_meep__susceptibility, 0, 0},  {&_swigt__p_p_meep__multilevel_susceptibility, _p_p_meep__multilevel_susceptibilityTo_p_p_meep__susceptibility, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_p_char[] = {  {&_swigt__p_p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_p_double[] = {  {&_swigt__p_p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_std__complexT_double_t[] = {  {&_swigt__p_p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ptrdiff_t[] = {  {&_swigt__p_ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_double_t[] = {  {&_swigt__p_std__allocatorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_int_t[] = {  {&_swigt__p_std__allocatorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_meep__volume_t[] = {  {&_swigt__p_std__allocatorT_meep__volume_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_meep_geom__dft_data_t[] = {  {&_swigt__p_std__allocatorT_meep_geom__dft_data_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_meep_geom__fragment_stats_t[] = {  {&_swigt__p_std__allocatorT_meep_geom__fragment_stats_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_float_t[] = {  {&_swigt__p_std__complexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_long_double_t[] = {  {&_swigt__p_std__complexT_long_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_meep__component_std__allocatorT_meep__component_t_t[] = {  {&_swigt__p_std__vectorT_meep__component_std__allocatorT_meep__component_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t[] = {  {&_swigt__p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_meep_geom__absorber_std__allocatorT_meep_geom__absorber_t_t[] = {  {&_swigt__p_std__vectorT_meep_geom__absorber_std__allocatorT_meep_geom__absorber_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t[] = {  {&_swigt__p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t[] = {  {&_swigt__p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_user_material_func[] = {  {&_swigt__p_user_material_func, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vector3[] = {  {&_swigt__p_vector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_FILE,
  _swigc__p_GEOMETRIC_OBJECT,
  _swigc__p_a_2__p_double,
  _swigc__p_a_5__bool,
  _swigc__p_a_5__meep__boundary_condition,
  _swigc__p_a_5__p_double,
  _swigc__p_a_meep__CONNECT_COPY_1__a_meep__Outgoing_1__p_p_double,
  _swigc__p_a_meep__CONNECT_COPY_1__a_meep__Outgoing_1__size_t,
  _swigc__p_a_meep__CONNECT_COPY_1__p_size_t,
  _swigc__p_access_mode,
  _swigc__p_allocator_type,
  _swigc__p_bool,
  _swigc__p_boundary_region_kind,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_f_double_int_p_void__meep__vec,
  _swigc__p_f_double_p_void__double,
  _swigc__p_f_p_meep__fields_chunk_int_enum_meep__component_meep__ivec_meep__ivec_meep__vec_meep__vec_meep__vec_meep__vec_double_double_meep__ivec_std__complex__double___r_q_const__meep__symmetry_int_p_void__void,
  _swigc__p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__double,
  _swigc__p_f_p_q_const__std__complex__double___r_q_const__meep__vec_p_void__std__complexT_double_t,
  _swigc__p_f_std__complex__double____std__complexT_double_t,
  _swigc__p_float,
  _swigc__p_geom_box,
  _swigc__p_geometric_object,
  _swigc__p_geometric_object_list,
  _swigc__p_int,
  _swigc__p_long_double,
  _swigc__p_material_data,
  _swigc__p_material_type,
  _swigc__p_medium_struct,
  _swigc__p_meep__boundary_region,
  _swigc__p_meep__component,
  _swigc__p_meep__continuous_src_time,
  _swigc__p_meep__custom_src_time,
  _swigc__p_meep__dft_chunk,
  _swigc__p_meep__dft_fields,
  _swigc__p_meep__dft_flux,
  _swigc__p_meep__dft_force,
  _swigc__p_meep__dft_ldos,
  _swigc__p_meep__dft_near2far,
  _swigc__p_meep__direction,
  _swigc__p_meep__fields,
  _swigc__p_meep__fields_chunk,
  _swigc__p_meep__flux_vol,
  _swigc__p_meep__gaussian_src_time,
  _swigc__p_meep__grid_volume,
  _swigc__p_meep__h5file,
  _swigc__p_meep__h5file__extending_s,
  _swigc__p_meep__initialize,
  _swigc__p_meep__ivec,
  _swigc__p_meep__lorentzian_susceptibility,
  _swigc__p_meep__material_function,
  _swigc__p_meep__monitor_point,
  _swigc__p_meep__multilevel_susceptibility,
  _swigc__p_meep__noisy_lorentzian_susceptibility,
  _swigc__p_meep__polarization_state_s,
  _swigc__p_meep__signed_direction,
  _swigc__p_meep__simple_material_function,
  _swigc__p_meep__src_time,
  _swigc__p_meep__structure,
  _swigc__p_meep__structure_chunk,
  _swigc__p_meep__susceptibility,
  _swigc__p_meep__symmetry,
  _swigc__p_meep__vec,
  _swigc__p_meep__volume,
  _swigc__p_meep__volume_list,
  _swigc__p_meep_geom__absorber,
  _swigc__p_meep_geom__dft_data,
  _swigc__p_meep_geom__fragment_stats,
  _swigc__p_p_PyObject,
  _swigc__p_p_double,
  _swigc__p_p_meep__continuous_src_time,
  _swigc__p_p_meep__custom_src_time,
  _swigc__p_p_meep__dft_chunk,
  _swigc__p_p_meep__fields_chunk,
  _swigc__p_p_meep__gaussian_src_time,
  _swigc__p_p_meep__lorentzian_susceptibility,
  _swigc__p_p_meep__multilevel_susceptibility,
  _swigc__p_p_meep__noisy_lorentzian_susceptibility,
  _swigc__p_p_meep__polarization_state_s,
  _swigc__p_p_meep__src_time,
  _swigc__p_p_meep__src_vol,
  _swigc__p_p_meep__structure_chunk,
  _swigc__p_p_meep__susceptibility,
  _swigc__p_p_p_char,
  _swigc__p_p_p_double,
  _swigc__p_p_std__complexT_double_t,
  _swigc__p_ptrdiff_t,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_double_t,
  _swigc__p_std__allocatorT_int_t,
  _swigc__p_std__allocatorT_meep__volume_t,
  _swigc__p_std__allocatorT_meep_geom__dft_data_t,
  _swigc__p_std__allocatorT_meep_geom__fragment_stats_t,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__complexT_float_t,
  _swigc__p_std__complexT_long_double_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_meep__component_std__allocatorT_meep__component_t_t,
  _swigc__p_std__vectorT_meep__volume_std__allocatorT_meep__volume_t_t,
  _swigc__p_std__vectorT_meep_geom__absorber_std__allocatorT_meep_geom__absorber_t_t,
  _swigc__p_std__vectorT_meep_geom__dft_data_std__allocatorT_meep_geom__dft_data_t_t,
  _swigc__p_std__vectorT_meep_geom__fragment_stats_std__allocatorT_meep_geom__fragment_stats_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_user_material_func,
  _swigc__p_value_type,
  _swigc__p_vector3,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_POINTER, (char*)"py_pml_profile", 0, 0, (void *)(py_pml_profile), &SWIGTYPE_p_f_double_p_void__double },
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
        0,                                  /* tp_prev */
#endif
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  import_array();
  
  
  PyDict_SetItemString(md,(char *)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char *)"NUM_FIELD_COMPONENTS",Swig_var_NUM_FIELD_COMPONENTS_get, Swig_var_NUM_FIELD_COMPONENTS_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"NUM_FIELD_TYPES",Swig_var_NUM_FIELD_TYPES_get, Swig_var_NUM_FIELD_TYPES_set);
  SWIG_Python_SetConstant(d, "Ex",SWIG_From_int(static_cast< int >(meep::Ex)));
  SWIG_Python_SetConstant(d, "Ey",SWIG_From_int(static_cast< int >(meep::Ey)));
  SWIG_Python_SetConstant(d, "Er",SWIG_From_int(static_cast< int >(meep::Er)));
  SWIG_Python_SetConstant(d, "Ep",SWIG_From_int(static_cast< int >(meep::Ep)));
  SWIG_Python_SetConstant(d, "Ez",SWIG_From_int(static_cast< int >(meep::Ez)));
  SWIG_Python_SetConstant(d, "Hx",SWIG_From_int(static_cast< int >(meep::Hx)));
  SWIG_Python_SetConstant(d, "Hy",SWIG_From_int(static_cast< int >(meep::Hy)));
  SWIG_Python_SetConstant(d, "Hr",SWIG_From_int(static_cast< int >(meep::Hr)));
  SWIG_Python_SetConstant(d, "Hp",SWIG_From_int(static_cast< int >(meep::Hp)));
  SWIG_Python_SetConstant(d, "Hz",SWIG_From_int(static_cast< int >(meep::Hz)));
  SWIG_Python_SetConstant(d, "Dx",SWIG_From_int(static_cast< int >(meep::Dx)));
  SWIG_Python_SetConstant(d, "Dy",SWIG_From_int(static_cast< int >(meep::Dy)));
  SWIG_Python_SetConstant(d, "Dr",SWIG_From_int(static_cast< int >(meep::Dr)));
  SWIG_Python_SetConstant(d, "Dp",SWIG_From_int(static_cast< int >(meep::Dp)));
  SWIG_Python_SetConstant(d, "Dz",SWIG_From_int(static_cast< int >(meep::Dz)));
  SWIG_Python_SetConstant(d, "Bx",SWIG_From_int(static_cast< int >(meep::Bx)));
  SWIG_Python_SetConstant(d, "By",SWIG_From_int(static_cast< int >(meep::By)));
  SWIG_Python_SetConstant(d, "Br",SWIG_From_int(static_cast< int >(meep::Br)));
  SWIG_Python_SetConstant(d, "Bp",SWIG_From_int(static_cast< int >(meep::Bp)));
  SWIG_Python_SetConstant(d, "Bz",SWIG_From_int(static_cast< int >(meep::Bz)));
  SWIG_Python_SetConstant(d, "Dielectric",SWIG_From_int(static_cast< int >(meep::Dielectric)));
  SWIG_Python_SetConstant(d, "Permeability",SWIG_From_int(static_cast< int >(meep::Permeability)));
  SWIG_Python_SetConstant(d, "Sx",SWIG_From_int(static_cast< int >(meep::Sx)));
  SWIG_Python_SetConstant(d, "Sy",SWIG_From_int(static_cast< int >(meep::Sy)));
  SWIG_Python_SetConstant(d, "Sr",SWIG_From_int(static_cast< int >(meep::Sr)));
  SWIG_Python_SetConstant(d, "Sp",SWIG_From_int(static_cast< int >(meep::Sp)));
  SWIG_Python_SetConstant(d, "Sz",SWIG_From_int(static_cast< int >(meep::Sz)));
  SWIG_Python_SetConstant(d, "EnergyDensity",SWIG_From_int(static_cast< int >(meep::EnergyDensity)));
  SWIG_Python_SetConstant(d, "D_EnergyDensity",SWIG_From_int(static_cast< int >(meep::D_EnergyDensity)));
  SWIG_Python_SetConstant(d, "H_EnergyDensity",SWIG_From_int(static_cast< int >(meep::H_EnergyDensity)));
  SWIG_Python_SetConstant(d, "D1",SWIG_From_int(static_cast< int >(meep::D1)));
  SWIG_Python_SetConstant(d, "D2",SWIG_From_int(static_cast< int >(meep::D2)));
  SWIG_Python_SetConstant(d, "D3",SWIG_From_int(static_cast< int >(meep::D3)));
  SWIG_Python_SetConstant(d, "Dcyl",SWIG_From_int(static_cast< int >(meep::Dcyl)));
  SWIG_Python_SetConstant(d, "E_stuff",SWIG_From_int(static_cast< int >(meep::E_stuff)));
  SWIG_Python_SetConstant(d, "H_stuff",SWIG_From_int(static_cast< int >(meep::H_stuff)));
  SWIG_Python_SetConstant(d, "D_stuff",SWIG_From_int(static_cast< int >(meep::D_stuff)));
  SWIG_Python_SetConstant(d, "B_stuff",SWIG_From_int(static_cast< int >(meep::B_stuff)));
  SWIG_Python_SetConstant(d, "PE_stuff",SWIG_From_int(static_cast< int >(meep::PE_stuff)));
  SWIG_Python_SetConstant(d, "PH_stuff",SWIG_From_int(static_cast< int >(meep::PH_stuff)));
  SWIG_Python_SetConstant(d, "WE_stuff",SWIG_From_int(static_cast< int >(meep::WE_stuff)));
  SWIG_Python_SetConstant(d, "WH_stuff",SWIG_From_int(static_cast< int >(meep::WH_stuff)));
  SWIG_Python_SetConstant(d, "High",SWIG_From_int(static_cast< int >(meep::High)));
  SWIG_Python_SetConstant(d, "Low",SWIG_From_int(static_cast< int >(meep::Low)));
  SWIG_Python_SetConstant(d, "X",SWIG_From_int(static_cast< int >(meep::X)));
  SWIG_Python_SetConstant(d, "Y",SWIG_From_int(static_cast< int >(meep::Y)));
  SWIG_Python_SetConstant(d, "Z",SWIG_From_int(static_cast< int >(meep::Z)));
  SWIG_Python_SetConstant(d, "R",SWIG_From_int(static_cast< int >(meep::R)));
  SWIG_Python_SetConstant(d, "P",SWIG_From_int(static_cast< int >(meep::P)));
  SWIG_Python_SetConstant(d, "NO_DIRECTION",SWIG_From_int(static_cast< int >(meep::NO_DIRECTION)));
  SWIG_Python_SetConstant(d, "MEEP_SINGLE",SWIG_From_int(static_cast< int >(0)));
  SWIG_addvarlink(SWIG_globals(),(char *)"quiet",Swig_var_quiet_get, Swig_var_quiet_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"pi",Swig_var_pi_get, Swig_var_pi_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"nan",Swig_var_nan_get, Swig_var_nan_set);
  SWIG_Python_SetConstant(d, "h5file_READONLY",SWIG_From_int(static_cast< int >(meep::h5file::READONLY)));
  SWIG_Python_SetConstant(d, "h5file_READWRITE",SWIG_From_int(static_cast< int >(meep::h5file::READWRITE)));
  SWIG_Python_SetConstant(d, "h5file_WRITE",SWIG_From_int(static_cast< int >(meep::h5file::WRITE)));
  SWIG_Python_SetConstant(d, "DEFAULT_SUBPIXEL_TOL",SWIG_From_double(static_cast< double >(1e-4)));
  SWIG_Python_SetConstant(d, "DEFAULT_SUBPIXEL_MAXEVAL",SWIG_From_int(static_cast< int >(100000)));
  SWIG_Python_SetConstant(d, "boundary_region_NOTHING_SPECIAL",SWIG_From_int(static_cast< int >(meep::boundary_region::NOTHING_SPECIAL)));
  SWIG_Python_SetConstant(d, "boundary_region_PML",SWIG_From_int(static_cast< int >(meep::boundary_region::PML)));
  SWIG_Python_SetConstant(d, "Incoming",SWIG_From_int(static_cast< int >(meep::Incoming)));
  SWIG_Python_SetConstant(d, "Outgoing",SWIG_From_int(static_cast< int >(meep::Outgoing)));
  SWIG_Python_SetConstant(d, "CONNECT_PHASE",SWIG_From_int(static_cast< int >(meep::CONNECT_PHASE)));
  SWIG_Python_SetConstant(d, "CONNECT_NEGATE",SWIG_From_int(static_cast< int >(meep::CONNECT_NEGATE)));
  SWIG_Python_SetConstant(d, "CONNECT_COPY",SWIG_From_int(static_cast< int >(meep::CONNECT_COPY)));
  SWIG_Python_SetConstant(d, "Periodic",SWIG_From_int(static_cast< int >(meep::Periodic)));
  SWIG_Python_SetConstant(d, "Metallic",SWIG_From_int(static_cast< int >(meep::Metallic)));
  SWIG_Python_SetConstant(d, "Magnetic",SWIG_From_int(static_cast< int >(meep::Magnetic)));
  SWIG_Python_SetConstant(d, "Meep_None",SWIG_From_int(static_cast< int >(meep::None)));
  SWIG_Python_SetConstant(d, "Connecting",SWIG_From_int(static_cast< int >(meep::Connecting)));
  SWIG_Python_SetConstant(d, "Stepping",SWIG_From_int(static_cast< int >(meep::Stepping)));
  SWIG_Python_SetConstant(d, "Boundaries",SWIG_From_int(static_cast< int >(meep::Boundaries)));
  SWIG_Python_SetConstant(d, "MpiTime",SWIG_From_int(static_cast< int >(meep::MpiTime)));
  SWIG_Python_SetConstant(d, "FieldOutput",SWIG_From_int(static_cast< int >(meep::FieldOutput)));
  SWIG_Python_SetConstant(d, "FourierTransforming",SWIG_From_int(static_cast< int >(meep::FourierTransforming)));
  SWIG_Python_SetConstant(d, "Other",SWIG_From_int(static_cast< int >(meep::Other)));
  SWIG_addvarlink(SWIG_globals(),(char *)"interrupt",Swig_var_interrupt_get, Swig_var_interrupt_set);
  SWIG_Python_SetConstant(d, "CYLINDRICAL",SWIG_From_int(static_cast< int >(-2)));
  SWIG_Python_SetConstant(d, "X_DIR",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "Y_DIR",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "Z_DIR",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "R_DIR",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "PHI_DIR",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "ALL_SIDES",SWIG_From_int(static_cast< int >(-1)));
  SWIG_Python_SetConstant(d, "ALL_DIRECTIONS",SWIG_From_int(static_cast< int >(-1)));
  SWIG_Python_SetConstant(d, "ENORMOUS",SWIG_From_double(static_cast< double >(1e20)));
  SWIG_Python_SetConstant(d, "TINY",SWIG_From_double(static_cast< double >(1e-20)));
  SWIG_addvarlink(SWIG_globals(),(char *)"fragment_stats_tol",Swig_var_fragment_stats_tol_get, Swig_var_fragment_stats_tol_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"fragment_stats_maxeval",Swig_var_fragment_stats_maxeval_get, Swig_var_fragment_stats_maxeval_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"fragment_stats_resolution",Swig_var_fragment_stats_resolution_get, Swig_var_fragment_stats_resolution_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"fragment_stats_dims",Swig_var_fragment_stats_dims_get, Swig_var_fragment_stats_dims_set);
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

