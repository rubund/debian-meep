# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from . import _mpb
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

import meep
TWOPI = _mpb.TWOPI

def map_data(d_in_re, d_in_im, n_in, d_out_re, d_out_im, n_out, coord_map, kvector, pick_nearest, verbose, multiply_bloch_phase):
    return _mpb.map_data(d_in_re, d_in_im, n_in, d_out_re, d_out_im, n_out, coord_map, kvector, pick_nearest, verbose, multiply_bloch_phase)
map_data = _mpb.map_data

def with_hermitian_epsilon():
    return _mpb.with_hermitian_epsilon()
with_hermitian_epsilon = _mpb.with_hermitian_epsilon
class mode_solver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mode_solver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mode_solver, name)
    __repr__ = _swig_repr
    MAX_NWORK = _mpb.mode_solver_MAX_NWORK
    epsilon_CURFIELD_TYPE = _mpb.mode_solver_epsilon_CURFIELD_TYPE
    mu_CURFIELD_TYPE = _mpb.mode_solver_mu_CURFIELD_TYPE
    NUM_FFT_BANDS = _mpb.mode_solver_NUM_FFT_BANDS
    __swig_setmethods__["num_bands"] = _mpb.mode_solver_num_bands_set
    __swig_getmethods__["num_bands"] = _mpb.mode_solver_num_bands_get
    if _newclass:
        num_bands = _swig_property(_mpb.mode_solver_num_bands_get, _mpb.mode_solver_num_bands_set)
    __swig_setmethods__["parity"] = _mpb.mode_solver_parity_set
    __swig_getmethods__["parity"] = _mpb.mode_solver_parity_get
    if _newclass:
        parity = _swig_property(_mpb.mode_solver_parity_get, _mpb.mode_solver_parity_set)
    __swig_setmethods__["resolution"] = _mpb.mode_solver_resolution_set
    __swig_getmethods__["resolution"] = _mpb.mode_solver_resolution_get
    if _newclass:
        resolution = _swig_property(_mpb.mode_solver_resolution_get, _mpb.mode_solver_resolution_set)
    __swig_setmethods__["target_freq"] = _mpb.mode_solver_target_freq_set
    __swig_getmethods__["target_freq"] = _mpb.mode_solver_target_freq_get
    if _newclass:
        target_freq = _swig_property(_mpb.mode_solver_target_freq_get, _mpb.mode_solver_target_freq_set)
    __swig_setmethods__["lat"] = _mpb.mode_solver_lat_set
    __swig_getmethods__["lat"] = _mpb.mode_solver_lat_get
    if _newclass:
        lat = _swig_property(_mpb.mode_solver_lat_get, _mpb.mode_solver_lat_set)
    __swig_setmethods__["tolerance"] = _mpb.mode_solver_tolerance_set
    __swig_getmethods__["tolerance"] = _mpb.mode_solver_tolerance_get
    if _newclass:
        tolerance = _swig_property(_mpb.mode_solver_tolerance_get, _mpb.mode_solver_tolerance_set)
    __swig_setmethods__["mesh_size"] = _mpb.mode_solver_mesh_size_set
    __swig_getmethods__["mesh_size"] = _mpb.mode_solver_mesh_size_get
    if _newclass:
        mesh_size = _swig_property(_mpb.mode_solver_mesh_size_get, _mpb.mode_solver_mesh_size_set)
    __swig_setmethods__["negative_epsilon_ok"] = _mpb.mode_solver_negative_epsilon_ok_set
    __swig_getmethods__["negative_epsilon_ok"] = _mpb.mode_solver_negative_epsilon_ok_get
    if _newclass:
        negative_epsilon_ok = _swig_property(_mpb.mode_solver_negative_epsilon_ok_get, _mpb.mode_solver_negative_epsilon_ok_set)
    __swig_setmethods__["epsilon_input_file"] = _mpb.mode_solver_epsilon_input_file_set
    __swig_getmethods__["epsilon_input_file"] = _mpb.mode_solver_epsilon_input_file_get
    if _newclass:
        epsilon_input_file = _swig_property(_mpb.mode_solver_epsilon_input_file_get, _mpb.mode_solver_epsilon_input_file_set)
    __swig_setmethods__["mu_input_file"] = _mpb.mode_solver_mu_input_file_set
    __swig_getmethods__["mu_input_file"] = _mpb.mode_solver_mu_input_file_get
    if _newclass:
        mu_input_file = _swig_property(_mpb.mode_solver_mu_input_file_get, _mpb.mode_solver_mu_input_file_set)
    __swig_setmethods__["force_mu"] = _mpb.mode_solver_force_mu_set
    __swig_getmethods__["force_mu"] = _mpb.mode_solver_force_mu_get
    if _newclass:
        force_mu = _swig_property(_mpb.mode_solver_force_mu_get, _mpb.mode_solver_force_mu_set)
    __swig_setmethods__["use_simple_preconditioner"] = _mpb.mode_solver_use_simple_preconditioner_set
    __swig_getmethods__["use_simple_preconditioner"] = _mpb.mode_solver_use_simple_preconditioner_get
    if _newclass:
        use_simple_preconditioner = _swig_property(_mpb.mode_solver_use_simple_preconditioner_get, _mpb.mode_solver_use_simple_preconditioner_set)
    __swig_setmethods__["grid_size"] = _mpb.mode_solver_grid_size_set
    __swig_getmethods__["grid_size"] = _mpb.mode_solver_grid_size_get
    if _newclass:
        grid_size = _swig_property(_mpb.mode_solver_grid_size_get, _mpb.mode_solver_grid_size_set)
    __swig_setmethods__["n"] = _mpb.mode_solver_n_set
    __swig_getmethods__["n"] = _mpb.mode_solver_n_get
    if _newclass:
        n = _swig_property(_mpb.mode_solver_n_get, _mpb.mode_solver_n_set)
    __swig_setmethods__["local_N"] = _mpb.mode_solver_local_N_set
    __swig_getmethods__["local_N"] = _mpb.mode_solver_local_N_get
    if _newclass:
        local_N = _swig_property(_mpb.mode_solver_local_N_get, _mpb.mode_solver_local_N_set)
    __swig_setmethods__["N_start"] = _mpb.mode_solver_N_start_set
    __swig_getmethods__["N_start"] = _mpb.mode_solver_N_start_get
    if _newclass:
        N_start = _swig_property(_mpb.mode_solver_N_start_get, _mpb.mode_solver_N_start_set)
    __swig_setmethods__["alloc_N"] = _mpb.mode_solver_alloc_N_set
    __swig_getmethods__["alloc_N"] = _mpb.mode_solver_alloc_N_get
    if _newclass:
        alloc_N = _swig_property(_mpb.mode_solver_alloc_N_get, _mpb.mode_solver_alloc_N_set)
    __swig_setmethods__["nwork_alloc"] = _mpb.mode_solver_nwork_alloc_set
    __swig_getmethods__["nwork_alloc"] = _mpb.mode_solver_nwork_alloc_get
    if _newclass:
        nwork_alloc = _swig_property(_mpb.mode_solver_nwork_alloc_get, _mpb.mode_solver_nwork_alloc_set)
    __swig_setmethods__["eigensolver_nwork"] = _mpb.mode_solver_eigensolver_nwork_set
    __swig_getmethods__["eigensolver_nwork"] = _mpb.mode_solver_eigensolver_nwork_get
    if _newclass:
        eigensolver_nwork = _swig_property(_mpb.mode_solver_eigensolver_nwork_get, _mpb.mode_solver_eigensolver_nwork_set)
    __swig_setmethods__["eigensolver_block_size"] = _mpb.mode_solver_eigensolver_block_size_set
    __swig_getmethods__["eigensolver_block_size"] = _mpb.mode_solver_eigensolver_block_size_get
    if _newclass:
        eigensolver_block_size = _swig_property(_mpb.mode_solver_eigensolver_block_size_get, _mpb.mode_solver_eigensolver_block_size_set)
    __swig_setmethods__["last_parity"] = _mpb.mode_solver_last_parity_set
    __swig_getmethods__["last_parity"] = _mpb.mode_solver_last_parity_get
    if _newclass:
        last_parity = _swig_property(_mpb.mode_solver_last_parity_get, _mpb.mode_solver_last_parity_set)
    __swig_setmethods__["iterations"] = _mpb.mode_solver_iterations_set
    __swig_getmethods__["iterations"] = _mpb.mode_solver_iterations_get
    if _newclass:
        iterations = _swig_property(_mpb.mode_solver_iterations_get, _mpb.mode_solver_iterations_set)
    __swig_setmethods__["eigensolver_flops"] = _mpb.mode_solver_eigensolver_flops_set
    __swig_getmethods__["eigensolver_flops"] = _mpb.mode_solver_eigensolver_flops_get
    if _newclass:
        eigensolver_flops = _swig_property(_mpb.mode_solver_eigensolver_flops_get, _mpb.mode_solver_eigensolver_flops_set)
    __swig_setmethods__["geometry"] = _mpb.mode_solver_geometry_set
    __swig_getmethods__["geometry"] = _mpb.mode_solver_geometry_get
    if _newclass:
        geometry = _swig_property(_mpb.mode_solver_geometry_get, _mpb.mode_solver_geometry_set)
    __swig_setmethods__["geometry_tree"] = _mpb.mode_solver_geometry_tree_set
    __swig_getmethods__["geometry_tree"] = _mpb.mode_solver_geometry_tree_get
    if _newclass:
        geometry_tree = _swig_property(_mpb.mode_solver_geometry_tree_get, _mpb.mode_solver_geometry_tree_set)
    __swig_setmethods__["vol"] = _mpb.mode_solver_vol_set
    __swig_getmethods__["vol"] = _mpb.mode_solver_vol_get
    if _newclass:
        vol = _swig_property(_mpb.mode_solver_vol_get, _mpb.mode_solver_vol_set)
    __swig_setmethods__["R"] = _mpb.mode_solver_R_set
    __swig_getmethods__["R"] = _mpb.mode_solver_R_get
    if _newclass:
        R = _swig_property(_mpb.mode_solver_R_get, _mpb.mode_solver_R_set)
    __swig_setmethods__["G"] = _mpb.mode_solver_G_set
    __swig_getmethods__["G"] = _mpb.mode_solver_G_get
    if _newclass:
        G = _swig_property(_mpb.mode_solver_G_get, _mpb.mode_solver_G_set)
    __swig_setmethods__["mdata"] = _mpb.mode_solver_mdata_set
    __swig_getmethods__["mdata"] = _mpb.mode_solver_mdata_get
    if _newclass:
        mdata = _swig_property(_mpb.mode_solver_mdata_get, _mpb.mode_solver_mdata_set)
    __swig_setmethods__["mtdata"] = _mpb.mode_solver_mtdata_set
    __swig_getmethods__["mtdata"] = _mpb.mode_solver_mtdata_get
    if _newclass:
        mtdata = _swig_property(_mpb.mode_solver_mtdata_get, _mpb.mode_solver_mtdata_set)
    __swig_setmethods__["curfield_band"] = _mpb.mode_solver_curfield_band_set
    __swig_getmethods__["curfield_band"] = _mpb.mode_solver_curfield_band_get
    if _newclass:
        curfield_band = _swig_property(_mpb.mode_solver_curfield_band_get, _mpb.mode_solver_curfield_band_set)
    __swig_setmethods__["cur_kvector"] = _mpb.mode_solver_cur_kvector_set
    __swig_getmethods__["cur_kvector"] = _mpb.mode_solver_cur_kvector_get
    if _newclass:
        cur_kvector = _swig_property(_mpb.mode_solver_cur_kvector_get, _mpb.mode_solver_cur_kvector_set)
    __swig_setmethods__["Rm"] = _mpb.mode_solver_Rm_set
    __swig_getmethods__["Rm"] = _mpb.mode_solver_Rm_get
    if _newclass:
        Rm = _swig_property(_mpb.mode_solver_Rm_get, _mpb.mode_solver_Rm_set)
    __swig_setmethods__["Gm"] = _mpb.mode_solver_Gm_set
    __swig_getmethods__["Gm"] = _mpb.mode_solver_Gm_get
    if _newclass:
        Gm = _swig_property(_mpb.mode_solver_Gm_get, _mpb.mode_solver_Gm_set)
    __swig_setmethods__["H"] = _mpb.mode_solver_H_set
    __swig_getmethods__["H"] = _mpb.mode_solver_H_get
    if _newclass:
        H = _swig_property(_mpb.mode_solver_H_get, _mpb.mode_solver_H_set)
    __swig_setmethods__["Hblock"] = _mpb.mode_solver_Hblock_set
    __swig_getmethods__["Hblock"] = _mpb.mode_solver_Hblock_get
    if _newclass:
        Hblock = _swig_property(_mpb.mode_solver_Hblock_get, _mpb.mode_solver_Hblock_set)
    __swig_setmethods__["muinvH"] = _mpb.mode_solver_muinvH_set
    __swig_getmethods__["muinvH"] = _mpb.mode_solver_muinvH_get
    if _newclass:
        muinvH = _swig_property(_mpb.mode_solver_muinvH_get, _mpb.mode_solver_muinvH_set)
    __swig_setmethods__["W"] = _mpb.mode_solver_W_set
    __swig_getmethods__["W"] = _mpb.mode_solver_W_get
    if _newclass:
        W = _swig_property(_mpb.mode_solver_W_get, _mpb.mode_solver_W_set)
    __swig_setmethods__["default_md"] = _mpb.mode_solver_default_md_set
    __swig_getmethods__["default_md"] = _mpb.mode_solver_default_md_get
    if _newclass:
        default_md = _swig_property(_mpb.mode_solver_default_md_get, _mpb.mode_solver_default_md_set)
    __swig_setmethods__["freqs"] = _mpb.mode_solver_freqs_set
    __swig_getmethods__["freqs"] = _mpb.mode_solver_freqs_get
    if _newclass:
        freqs = _swig_property(_mpb.mode_solver_freqs_get, _mpb.mode_solver_freqs_set)
    __swig_setmethods__["verbose"] = _mpb.mode_solver_verbose_set
    __swig_getmethods__["verbose"] = _mpb.mode_solver_verbose_get
    if _newclass:
        verbose = _swig_property(_mpb.mode_solver_verbose_get, _mpb.mode_solver_verbose_set)
    __swig_setmethods__["deterministic"] = _mpb.mode_solver_deterministic_set
    __swig_getmethods__["deterministic"] = _mpb.mode_solver_deterministic_get
    if _newclass:
        deterministic = _swig_property(_mpb.mode_solver_deterministic_get, _mpb.mode_solver_deterministic_set)

    def __init__(self, num_bands, parity, resolution, lat, tolerance, mesh_size, _default_material, geom, reset_fields, deterministic, target_freq, dims, verbose, periodicity, flops, negative_epsilon_ok, epsilon_input_file, mu_input_file, force_mu, use_simple_preconditioner, grid_size, eigensolver_nwork, eigensolver_block_size):
        this = _mpb.new_mode_solver(num_bands, parity, resolution, lat, tolerance, mesh_size, _default_material, geom, reset_fields, deterministic, target_freq, dims, verbose, periodicity, flops, negative_epsilon_ok, epsilon_input_file, mu_input_file, force_mu, use_simple_preconditioner, grid_size, eigensolver_nwork, eigensolver_block_size)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mpb.delete_mode_solver
    __del__ = lambda self: None

    def init(self, p, reset_fields):
        return _mpb.mode_solver_init(self, p, reset_fields)

    def solve_kpoint(self, kpoint):
        return _mpb.mode_solver_solve_kpoint(self, kpoint)

    def using_mu(self):
        return _mpb.mode_solver_using_mu(self)

    def set_parity(self, p):
        return _mpb.mode_solver_set_parity(self, p)

    def get_kpoint_index(self):
        return _mpb.mode_solver_get_kpoint_index(self)

    def set_kpoint_index(self, i):
        return _mpb.mode_solver_set_kpoint_index(self, i)

    def get_epsilon(self):
        return _mpb.mode_solver_get_epsilon(self)

    def get_mu(self):
        return _mpb.mode_solver_get_mu(self)

    def get_epsilon_tensor(self, c1, c2, imag, inv):
        return _mpb.mode_solver_get_epsilon_tensor(self, c1, c2, imag, inv)

    def get_material_pt(self, material, p):
        return _mpb.mode_solver_get_material_pt(self, material, p)

    def material_epsmu(self, material, epsmu, epsmu_inv, eps=True):
        return _mpb.mode_solver_material_epsmu(self, material, epsmu, epsmu_inv, eps)

    def mean_epsilon(self, meps, meps_inv, n, d1, d2, d3, tol, r):
        return _mpb.mode_solver_mean_epsilon(self, meps, meps_inv, n, d1, d2, d3, tol, r)

    def randomize_fields(self):
        return _mpb.mode_solver_randomize_fields(self)

    def init_epsilon(self):
        return _mpb.mode_solver_init_epsilon(self)

    def reset_epsilon(self):
        return _mpb.mode_solver_reset_epsilon(self)

    def has_mu(self):
        return _mpb.mode_solver_has_mu(self)

    def material_has_mu(self, mt):
        return _mpb.mode_solver_material_has_mu(self, mt)

    def curfield_reset(self):
        return _mpb.mode_solver_curfield_reset(self)

    def get_field_size(self):
        return _mpb.mode_solver_get_field_size(self)

    def get_freqs(self):
        return _mpb.mode_solver_get_freqs(self)

    def get_eigensolver_flops(self):
        return _mpb.mode_solver_get_eigensolver_flops(self)

    def get_iterations(self):
        return _mpb.mode_solver_get_iterations(self)

    def get_efield(self, band):
        return _mpb.mode_solver_get_efield(self, band)

    def get_dfield(self, band):
        return _mpb.mode_solver_get_dfield(self, band)

    def get_hfield(self, band):
        return _mpb.mode_solver_get_hfield(self, band)

    def get_bfield(self, band):
        return _mpb.mode_solver_get_bfield(self, band)

    def get_efield_from_dfield(self):
        return _mpb.mode_solver_get_efield_from_dfield(self)

    def get_curfield(self, data):
        return _mpb.mode_solver_get_curfield(self, data)

    def get_curfield_cmplx(self, cdata):
        return _mpb.mode_solver_get_curfield_cmplx(self, cdata)

    def set_curfield(self, data):
        return _mpb.mode_solver_set_curfield(self, data)

    def set_curfield_cmplx(self, cdata):
        return _mpb.mode_solver_set_curfield_cmplx(self, cdata)

    def get_lattice(self, data):
        return _mpb.mode_solver_get_lattice(self, data)

    def get_eigenvectors(self, p_start, p, cdata):
        return _mpb.mode_solver_get_eigenvectors(self, p_start, p, cdata)

    def get_eigenvectors_slice_dims(self, num_bands):
        return _mpb.mode_solver_get_eigenvectors_slice_dims(self, num_bands)

    def set_eigenvectors(self, b_start, cdata):
        return _mpb.mode_solver_set_eigenvectors(self, b_start, cdata)

    def compute_field_energy(self):
        return _mpb.mode_solver_compute_field_energy(self)

    def compute_energy_in_objects(self, objects):
        return _mpb.mode_solver_compute_energy_in_objects(self, objects)

    def get_curfield_type(self):
        return _mpb.mode_solver_get_curfield_type(self)

    def set_curfield_type(self, t):
        return _mpb.mode_solver_set_curfield_type(self, t)

    def get_parity_string(self):
        return _mpb.mode_solver_get_parity_string(self)

    def get_dims(self):
        return _mpb.mode_solver_get_dims(self)

    def get_output_k(self):
        return _mpb.mode_solver_get_output_k(self)

    def get_val(self, ix, iy, iz, nx, ny, nz, last_dim_size, data, stride, conjugate):
        return _mpb.mode_solver_get_val(self, ix, iy, iz, nx, ny, nz, last_dim_size, data, stride, conjugate)

    def interp_val(self, p, nx, ny, nz, last_dim_size, data, stride, conjugate):
        return _mpb.mode_solver_interp_val(self, p, nx, ny, nz, last_dim_size, data, stride, conjugate)

    def interp_cval(self, p, nx, ny, nz, last_dim_size, data, stride):
        return _mpb.mode_solver_interp_cval(self, p, nx, ny, nz, last_dim_size, data, stride)

    def interp_eps_inv(self, p):
        return _mpb.mode_solver_interp_eps_inv(self, p)

    def get_epsilon_point(self, p):
        return _mpb.mode_solver_get_epsilon_point(self, p)

    def get_epsilon_inverse_tensor_point(self, p):
        return _mpb.mode_solver_get_epsilon_inverse_tensor_point(self, p)

    def get_energy_point(self, p):
        return _mpb.mode_solver_get_energy_point(self, p)

    def get_field_point(self, p):
        return _mpb.mode_solver_get_field_point(self, p)

    def get_bloch_field_point(self, p):
        return _mpb.mode_solver_get_bloch_field_point(self, p)

    def multiply_bloch_phase(self, cdata=None):
        return _mpb.mode_solver_multiply_bloch_phase(self, cdata)

    def fix_field_phase(self):
        return _mpb.mode_solver_fix_field_phase(self)

    def compute_field_divergence(self):
        return _mpb.mode_solver_compute_field_divergence(self)

    def compute_zparities(self):
        return _mpb.mode_solver_compute_zparities(self)

    def compute_yparities(self):
        return _mpb.mode_solver_compute_yparities(self)

    def compute_group_velocity_component(self, d):
        return _mpb.mode_solver_compute_group_velocity_component(self, d)

    def compute_1_group_velocity_component(self, d, b):
        return _mpb.mode_solver_compute_1_group_velocity_component(self, d, b)

    def compute_1_group_velocity(self, b):
        return _mpb.mode_solver_compute_1_group_velocity(self, b)

    def compute_1_group_velocity_reciprocal(self, b):
        return _mpb.mode_solver_compute_1_group_velocity_reciprocal(self, b)

    def compute_energy_in_dielectric(self, eps_low, eps_high):
        return _mpb.mode_solver_compute_energy_in_dielectric(self, eps_low, eps_high)

    def compute_field_integral(self, field_func):
        return _mpb.mode_solver_compute_field_integral(self, field_func)

    def compute_energy_integral(self, field_func):
        return _mpb.mode_solver_compute_energy_integral(self, field_func)
mode_solver_swigregister = _mpb.mode_solver_swigregister
mode_solver_swigregister(mode_solver)


from .solver import (
    MPBArray,
    ModeSolver,
    output_hfield,
    output_hfield_x,
    output_hfield_y,
    output_hfield_z,
    output_bfield,
    output_bfield_x,
    output_bfield_y,
    output_bfield_z,
    output_dfield,
    output_dfield_x,
    output_dfield_y,
    output_dfield_z,
    output_efield,
    output_efield_x,
    output_efield_y,
    output_efield_z,
    output_charge_density,
    output_bpwr,
    output_dpwr,
    output_tot_pwr,
    output_dpwr_in_objects,
    output_poynting,
    output_poynting_x,
    output_poynting_y,
    output_poynting_z,
    output_at_kpoint,
    display_group_velocities,
    display_yparities,
    display_zparities,
    fix_hfield_phase,
    fix_bfield_phase,
    fix_dfield_phase,
    fix_efield_phase,
)

from .mpb_data import (
    MPBData,
)

# This file is compatible with both classic and new-style classes.


